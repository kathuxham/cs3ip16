{"version":3,"file":"js/975.d10e39e2.js","mappings":"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","sources":["webpack://vue-3-typescript/./src/services/AssessmentDataService.ts","webpack://vue-3-typescript/./src/services/AssessmentMarksDataService.ts","webpack://vue-3-typescript/./src/services/ModuleDataService.ts","webpack://vue-3-typescript/../../../../../src/.internal/core/elements/Grip.ts","webpack://vue-3-typescript/../../../../src/.internal/charts/Chart.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/Bullet.ts","webpack://vue-3-typescript/../../../../src/.internal/charts/Legend.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/Series.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/SerialChart.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisBreak.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/Axis.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisLine.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisFill.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/Grid.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisLabel.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/Tick.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisTick.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisRenderer.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisBullet.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisRendererY.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/ValueAxisBreak.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/ValueAxis.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/DateAxis.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisRendererX.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/XYSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/XYChart.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/LineSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/RadarSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/GridCircular.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/RadarChart.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/ClockHand.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/GaugeChart.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/PercentSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/PercentChart.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/PieTick.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/PieSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/PieChart.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/PieChart3D.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/SlicedChart.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/FlowDiagram.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/LabelBullet.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/SankeyNode.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/SankeyLink.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/SankeyDiagram.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/ChordNode.ts","webpack://vue-3-typescript/../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/ChordLink.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/Column.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/TreeMap.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/Column3D.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/types/XYChart3D.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/HeatLegend.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/Candlestick.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/OHLC.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/FunnelSlice.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/FunnelTick.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/FunnelSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/ConeSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/ErrorBullet.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/cursors/Cursor.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack://vue-3-typescript/../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack://vue-3-typescript/./src/components/Charts/BarChart.vue?5666","webpack://vue-3-typescript/./src/components/Charts/BarChart.vue?1832","webpack://vue-3-typescript/./src/components/Charts/BarChart.vue"],"sourcesContent":["import http from \"../http-common\";\r\n\r\nclass AssessmentDataService {\r\n  getAll() {\r\n    return http.get(\"/assessments\");\r\n  }\r\n\r\n  get(id: string) {\r\n    return http.get(`/assessments/${id}`);\r\n  }\r\n\r\n  getAssessmentsByModule(id: string) {\r\n    return http.get(`/assessments/?moduleId=${id}`);\r\n  }\r\n\r\n  create(data: any) {\r\n    return http.post(\"/assessments\", data);\r\n  }\r\n\r\n  update(id: string, data: any) {\r\n    return http.put(`/assessments/${id}`, data);\r\n  }\r\n\r\n  delete(id: string) {\r\n    return http.delete(`/assessments/${id}`);\r\n  }\r\n\r\n}\r\n\r\nexport default new AssessmentDataService();","import http from \"../http-common\";\r\n\r\nclass AssessmentMarksDataService {\r\n  getAll() {\r\n    return http.get(\"/assessmentmarks\");\r\n  }\r\n\r\n  get(id: string) {\r\n    return http.get(`/assessmentmarks/${id}`);\r\n  }\r\n\r\n  getByAssessment(id: string) {\r\n    return http.get(`/assessmentmarks/?assessmentId=${id}`);\r\n  }\r\n\r\n  getByStudent(id: string) {\r\n    return http.get(`/assessmentmarks/?studentId=${id}`);\r\n  }\r\n\r\n  create(data: any) {\r\n    return http.post(\"/assessmentmarks\", data);\r\n  }\r\n\r\n  update(id: string, data: any) {\r\n    return http.put(`/assessmentmarks/${id}`, data);\r\n  }\r\n\r\n  delete(id: string) {\r\n    return http.delete(`/assessmentmarks/${id}`);\r\n  }\r\n\r\n}\r\n\r\nexport default new AssessmentMarksDataService();","import http from \"../http-common\";\r\n\r\nclass ModuleDataService {\r\n  getAll() {\r\n    return http.get(\"/modules\");\r\n  }\r\n\r\n  get(id: string) {\r\n    return http.get(`/modules/${id}`);\r\n  }\r\n\r\n  create(data: any) {\r\n    return http.post(\"/modules\", data);\r\n  }\r\n\r\n  update(id: string, data: any) {\r\n    return http.put(`/modules/${id}`, data);\r\n  }\r\n\r\n  delete(id: string) {\r\n    return http.delete(`/modules/${id}`);\r\n  }\r\n}\r\n\r\nexport default new ModuleDataService();","/**\r\n * Grip module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Align } from \"../defs/Align\";\r\nimport { VerticalAlign } from \"../defs/VerticalAlign\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../Registry\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport { percent } from \"../utils/Percent\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Grip]].\r\n */\r\nexport interface IGripProperties extends IButtonProperties {\r\n\tposition: Align | VerticalAlign;\r\n\tautoHideDelay: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Grip]] for [[Grip]].\r\n */\r\nexport interface IGripEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Grip]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGripAdapters extends IButtonAdapters, IGripProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a grip element that can be used for scrolling or other things.\r\n *\r\n * @see {@link IGripEvents} for a list of available events\r\n * @see {@link IGripAdapters} for a list of available Adapters\r\n * @since 4.4.0\r\n */\r\nexport class Grip extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGripProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGripAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGripEvents;\r\n\r\n\t\t/**\r\n\t * Disposer for grip autohide timeout.\r\n\t */\r\n\tprotected _autoHideTimeout: Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Grip\";\r\n\r\n\t\tconst cs = new InterfaceColorSet();\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"absolute\";\r\n\r\n\r\n\t\tthis.padding(10, 10, 10, 10);\r\n\t\tthis.margin(3, 3, 3, 3);\r\n\t\tthis.background.fillOpacity = 0.3;\r\n\t\tthis.background.cornerRadius(10, 10, 10, 10);\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\r\n\t\tlet path = $path.moveTo({ x: -6, y: 0 });\r\n\t\tpath += $path.lineTo({ x: 6, y: 0 });\r\n\t\tpath += $path.moveTo({ x: -8, y: -6 });\r\n\t\tpath += $path.lineTo({ x: 0, y: -12 });\r\n\t\tpath += $path.lineTo({ x: 8, y: -6 });\r\n\t\tpath += $path.moveTo({ x: -8, y: 6 });\r\n\t\tpath += $path.lineTo({ x: 0, y: 12 });\r\n\t\tpath += $path.lineTo({ x: 8, y: 6 });\r\n\t\ticon.path = path;\r\n\t\ticon.strokeWidth = 2;\r\n\t\ticon.fillOpacity = 0;\r\n\r\n\t\ticon.pixelPerfect = true;\r\n\t\ticon.padding(0, 4, 0, 4);\r\n\t\ticon.stroke = cs.getFor(\"text\");\r\n\t\ticon.strokeOpacity = 0.7;\r\n\t\ticon.align = \"center\";\r\n\t\ticon.valign = \"middle\";\r\n\t\tthis.icon = icon;\r\n\r\n\t\tthis.label.dispose();\r\n\t\tthis.label = undefined;\r\n\r\n\t\t// Set default position\r\n\t\tthis.position = \"right\";\r\n\r\n\t\t// Set up autohide\r\n\t\tthis.autoHideDelay = 3000;\r\n\t\tthis.events.on(\"shown\", (ev) => {\r\n\t\t\tif (this._autoHideTimeout) {\r\n\t\t\t\tthis._autoHideTimeout.dispose();\r\n\t\t\t}\r\n\t\t\tif (this.autoHideDelay) {\r\n\t\t\t\tthis._autoHideTimeout = this.setTimeout(() => {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t}, this.autoHideDelay);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.events.on(\"down\", (ev) => {\r\n\t\t\tif (this._autoHideTimeout) {\r\n\t\t\t\tthis._autoHideTimeout.dispose();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.events.on(\"out\", (ev) => {\r\n\t\t\tif (this.autoHideDelay) {\r\n\t\t\t\tthis._autoHideTimeout = this.setTimeout(() => {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t}, this.autoHideDelay);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets position of the grip.\r\n\t *\r\n\t * Available options: \"left\", \"right\" (default), \"top\", \"bottom\".\r\n\t *\r\n\t * @param  value  Position\r\n\t */\r\n\tpublic set position(value: Align | VerticalAlign) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tswitch(value) {\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tthis.align = \"left\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 0;\r\n\t\t\t\t\tthis.width = undefined;\r\n\t\t\t\t\tthis.height = percent(30);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tthis.align = \"right\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 0;\r\n\t\t\t\t\tthis.width = undefined;\r\n\t\t\t\t\tthis.height = percent(30);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"top\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"top\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"bottom\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"bottom\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position\r\n\t */\r\n\tpublic get position(): Align | VerticalAlign {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of milliseconds to show grip until it is hidden automatically.\r\n\t *\r\n\t * @default 3000\r\n\t * @param  value  Delay\r\n\t */\r\n\tpublic set autoHideDelay(value: number) {\r\n\t\tthis.setPropertyValue(\"autoHideDelay\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Delay\r\n\t */\r\n\tpublic get autoHideDelay(): number {\r\n\t\treturn this.getPropertyValue(\"autoHideDelay\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grip\"] = Grip;\r\n","/**\r\n * [[Chart]] class provides base functionality for all chart types to inherit.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"../core/Registry\";\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentEvents, IComponentAdapters } from \"../core/Component\";\r\nimport { MutableValueDisposer, Disposer } from \"../core/utils/Disposer\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../core/utils/List\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Grip } from \"../core/elements/Grip\";\r\nimport { Legend } from \"../charts/Legend\";\r\nimport { DataItem } from \"../core/DataItem\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport * as $iter from \"../core/utils/Iterator\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Chart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChartDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Chart]].\r\n */\r\nexport interface IChartDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Chart]].\r\n */\r\nexport interface IChartProperties extends IComponentProperties { }\r\n\r\n/**\r\n * Defines events for [[Chart]].\r\n */\r\nexport interface IChartEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Chart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChartAdapters extends IComponentAdapters, IChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Charts.\r\n *\r\n * @see {@link IChartEvents} for a list of available Events\r\n * @see {@link IChartAdapters} for a list of available Adapters\r\n */\r\nexport class Chart extends Component {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChartEvents;\r\n\r\n\t/**\r\n\t * A List of chart titles.\r\n\t */\r\n\tpublic titles: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Container that holds the chart itself.\r\n\t */\r\n\tpublic chartContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to a container that holds both the chart and the legend.\r\n\t */\r\n\tpublic chartAndLegendContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to chart's [[Legend]].\r\n\t * @ignore\r\n\t */\r\n\tprotected _legend = new MutableValueDisposer<Legend>();\r\n\r\n\t/**\r\n\t * Instance of the grip element.\r\n\t */\r\n\tprotected _dragGrip: $type.Optional<Grip>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Chart) {\r\n\t\t\tthrow new Error(\"'Chart' cannot be instantiated directly. Please use a specific chart type.\");\r\n\t\t}\r\n\t\tthis.className = \"Chart\";\r\n\r\n\t\t// Create a list of titles\r\n\t\tconst template = new Label();\r\n\t\tthis.titles = new ListTemplate<Label>(template);\r\n\t\tthis._disposers.push(new ListDisposer(this.titles));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\t// Chart component is also a container. it holds _chartAndLegendCont and titles\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.layout = \"vertical\";\r\n\r\n\t\t// Chart and legend\r\n\t\tlet chartAndLegendContainer: Container = this.createChild(Container);\r\n\t\tchartAndLegendContainer.shouldClone = false;\r\n\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\tchartAndLegendContainer.width = percent(100);\r\n\t\tchartAndLegendContainer.height = percent(100);\r\n\t\tthis.chartAndLegendContainer = chartAndLegendContainer;\r\n\r\n\t\t// Chart container holds all the elements of a chart, extept titles and legend\r\n\t\tlet chartContainer = chartAndLegendContainer.createChild(Container);\r\n\t\tchartContainer.shouldClone = false;\r\n\t\tchartContainer.width = percent(100);\r\n\t\tchartContainer.height = percent(100);\r\n\t\tthis.chartContainer = chartContainer;\r\n\r\n\t\tthis.showOnInit = true;\r\n\r\n\t\tthis._disposers.push(this._legend);\r\n\r\n\t\t// Add title list events to apply certain formatting options and to make\r\n\t\t// the chart reference them as accessible screen reader labels\r\n\t\tthis.titles.events.on(\"inserted\", (label) => {\r\n\t\t\tthis.processTitle(label);\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this, false);\r\n\t\tthis.titles.events.on(\"removed\", (label) => {\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this, false);\r\n\r\n\t\t// Accessibility\r\n\t\t// It seems we can't set focusable on the whole chart because it seems to\r\n\t\t// mess up the whole focus event system - getting a focus on an inside\r\n\t\t// object also trigger focus on parent\r\n\t\t//this.focusable = true;\r\n\t\tthis.role = \"region\";\r\n\r\n\t\tthis.defaultState.transitionDuration = 1;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates drawing of the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tthis.fixLayout();\r\n\t\tsuper.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates legend's hierarchy based on the position.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet chartAndLegendContainer = this.chartAndLegendContainer;\r\n\t\t\tlet chartContainer = this.chartContainer;\r\n\t\t\tchartContainer.x = undefined;\r\n\t\t\tchartContainer.y = undefined;\r\n\t\t\tif (legend.position != \"absolute\") {\r\n\t\t\t\tlegend.x = undefined;\r\n\t\t\t\tlegend.y = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (legend.position) {\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"absolute\":\r\n\t\t\t\t\tlegend.isMeasured = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\r\n\t\t// Nothing here. This method is provided only as a \"placeholder\" for\r\n\t\t// extending classes to override\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new title to the chart when it is inserted into chart's titles\r\n\t * list.\r\n\t * @param event  An event object which is triggered when inserting into titles list\r\n\t * @return Label object\r\n\t */\r\n\tprotected processTitle(event: IListEvents<Label>[\"inserted\"]): Label {\r\n\t\tlet title: Label = event.newValue;\r\n\t\ttitle.parent = this;\r\n\t\ttitle.toBack();\r\n\t\ttitle.shouldClone = false;\r\n\t\ttitle.align = \"center\";\r\n\r\n\t\t// Need to explicitly apply the `id` attribute so it can be referenced by\r\n\t\t// `aria-labelledby`\r\n\t\ttitle.uidAttr();\r\n\t\treturn title;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if chart has any title elements. If it does, we will use them in an\r\n\t * `aria-labelledby` attribute so that screen readers can use them to properly\r\n\t * describe the chart when it is focused or hovered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateReaderTitleReferences(): void {\r\n\t\tif (this.titles.length) {\r\n\t\t\tlet titleIds: Array<string> = [];\r\n\t\t\t$iter.each(this.titles.iterator(), (title) => {\r\n\t\t\t\ttitleIds.push(title.uid);\r\n\t\t\t});\r\n\t\t\tthis.setSVGAttribute({ \"aria-labelledby\": titleIds.join(\" \") });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-labelledby\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Holds the instance of chart's [[Leged]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for more information about legends\r\n\t * @param Legend\r\n\t */\r\n\tpublic set legend(legend: Legend) {\r\n\t\tthis.setLegend(legend);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend\r\n\t */\r\n\tpublic get legend(): Legend {\r\n\t\treturn this._legend.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tif (this._legend.get() !== legend) {\r\n\t\t\tif (legend) {\r\n\t\t\t\t// Set legend options\r\n\t\t\t\tlegend.parent = this.chartAndLegendContainer;\r\n\r\n\t\t\t\tthis._legend.set(legend, legend.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"position\") {\r\n\t\t\t\t\t\tthis.fixLayout();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false));\r\n\r\n\t\t\t\tlegend.addDisposer(new Disposer(() => {\r\n\t\t\t\t\tthis.legend = undefined;\r\n\t\t\t\t}))\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._legend.reset();\r\n\t\t\t}\r\n\r\n\t\t\tthis.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\t// otherwise there might be some errors when disposing chart which was just inited\r\n\t\tif (this.legend) {\r\n\t\t\tthis.legend.dispose();\r\n\t\t}\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up legend\r\n\t\t\tif ($type.hasValue(config.legend) && !$type.hasValue(config.legend.type)) {\r\n\t\t\t\tconfig.legend.type = \"Legend\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.titles.copyFrom(source.titles);\r\n\t\tthis.chartContainer.copyFrom(source.chartContainer);\r\n\t\tif (source.legend) {\r\n\t\t\tthis.legend = source.legend.clone();\r\n\t\t\tthis.legend.removeChildren();\r\n\t\t}\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * An instance of [[Grip]] which serves as a grip point which appears on\r\n\t * touch and allows scrolling whole page even if chart is occupying the\r\n\t * whole of the screen and would otherwise prevent scrolling.\r\n\t *\r\n\t * @since 4.4.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/touch/} For more information.\r\n\t * @param  value  Grip\r\n\t */\r\n\tpublic set dragGrip(value: Grip) {\r\n\t\tthis._dragGrip = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grip\r\n\t */\r\n\tpublic get dragGrip(): Grip {\r\n\t\tif (!this._dragGrip) {\r\n\t\t\tlet grip = this.tooltipContainer.createChild(Grip);\r\n\t\t\tgrip.align = \"right\";\r\n\t\t\tgrip.valign = \"middle\";\r\n\t\t\tgrip.hide(0);\r\n\r\n\t\t\tgrip.events.on(\"down\", (ev) => {\r\n\t\t\t\tif (ev.touch) {\r\n\t\t\t\t\tthis.interactionsEnabled = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tgrip.events.on(\"up\", (ev) => {\r\n\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t});\r\n\r\n\t\t\tthis.events.on(\"down\", (ev) => {\r\n\t\t\t\tif (ev.touch) {\r\n\t\t\t\t\tgrip.show();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis._dragGrip = grip;\r\n\t\t}\r\n\t\treturn this._dragGrip;\r\n\t}\r\n\r\n\tpublic set focusable(value: boolean) {\r\n\t\tthis.parent.focusable = value;\r\n\t}\r\n\r\n\tpublic get focusable(): boolean {\r\n\t\treturn this.parent.focusable;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Chart\"] = Chart;\r\n\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Reduce horizontal margins\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tif (target.pixelPaddingLeft > 10) {\r\n\t\t\t\tstate.properties.paddingLeft = 10;\r\n\t\t\t}\r\n\t\t\tif (target.pixelPaddingRight > 10) {\r\n\t\t\t\tstate.properties.paddingRight = 10;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Reduce vertical margins\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tif (target.pixelPaddingTop > 10) {\r\n\t\t\t\tstate.properties.paddingTop = 10;\r\n\t\t\t}\r\n\t\t\tif (target.pixelPaddingBottom > 10) {\r\n\t\t\t\tstate.properties.paddingBottom = 10;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove horizontal padding\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.paddingLeft = 0;\r\n\t\t\tstate.properties.paddingRight = 0;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical padding\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.paddingTop = 0;\r\n\t\t\tstate.properties.paddingBottom = 0;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Module that defines everything related to building bullets.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]].\r\n */\r\nexport interface IBulletProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Relative horizontal location within cell. (0-1)\r\n\t */\r\n\tlocationX?: number;\r\n\r\n\t/**\r\n\t * Relative vertical location within cell. (0-1)\r\n\t */\r\n\tlocationY?: number;\r\n\r\n\t/**\r\n\t * Specifies if bullet needs to be redrawn if the underlying data changes.\r\n\t */\r\n\tisDynamic?: boolean;\r\n\r\n\t/**\r\n\t * [string description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\txField?: string;\r\n\r\n\t/**\r\n\t * [string description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tyField?: string;\r\n\r\n\t/**\r\n\t * Defines if this bullet should be copied to legend marker\r\n\t */\r\n\tcopyToLegendMarker?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Bullet]].\r\n */\r\nexport interface IBulletEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Bullet]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IBulletAdapters extends IContainerAdapters, IBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates bullets.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Bullet extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IBulletEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Bullet\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.tooltipX = 0;\r\n\t\tthis.tooltipY = 0;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.copyToLegendMarker = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative horizontal location within cell. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tif(this.setPropertyValue(\"locationX\", value)){\r\n\t\t\tlet dataItem = this.dataItem\r\n\t\t\tif(dataItem && dataItem.component){\r\n\t\t\t\tdataItem.component.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative vertical location within cell. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tif(this.setPropertyValue(\"locationY\", value)){\r\n\t\t\tlet dataItem = this.dataItem\r\n\t\t\tif(dataItem && dataItem.component){\r\n\t\t\t\tdataItem.component.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  [description]\r\n\t */\r\n\tpublic set xField(value: string) {\r\n\t\tthis.setPropertyValue(\"xField\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this.getPropertyValue(\"xField\");\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * Description\r\n\t * @param value  [description]\r\n\t */\r\n\tpublic set yField(value: string) {\r\n\t\tthis.setPropertyValue(\"yField\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this.getPropertyValue(\"yField\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the bullet is \"dynamic\".\r\n\t *\r\n\t * In most cases the bullets remain the same, even if the underlying data\r\n\t * changes.\r\n\t *\r\n\t * However, in cases where bullet also displays a label, or its size depends\r\n\t * on data, it also needs to be redrawn when the underlying data changes.\r\n\t *\r\n\t * Only those bullets that have set `isDynamic = true` will be redrawn each\r\n\t * time data changes. Regular bullets will be reused as they are.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Redraw on data change?\r\n\t */\r\n\tpublic set isDynamic(value: boolean) {\r\n\t\tthis.setPropertyValue(\"isDynamic\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Redraw on data change?\r\n\t */\r\n\tpublic get isDynamic(): boolean {\r\n\t\treturn this.getPropertyValue(\"isDynamic\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if the bullet should be copied to legend marker\r\n\t *\r\n\t * @default false\r\n\t * @param value  Redraw on data change?\r\n\t */\r\n\tpublic set copyToLegendMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"copyToLegendMarker\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Redraw on data change?\r\n\t */\r\n\tpublic get copyToLegendMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"copyToLegendMarker\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Bullet\"] = Bullet;\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Hide bullets\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.isXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Bullet) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Legend-related functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../core/Component\";\r\nimport { DataItem, IDataItemEvents } from \"../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\r\nimport { RoundedRectangle } from \"../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Optional } from \"../core/utils/Type\";\r\nimport { Preloader } from \"../core/elements/Preloader\";\r\nimport { keyboard } from \"../core/utils/Keyboard\";\r\nimport { registry } from \"../core/Registry\";\r\nimport { getInteraction } from \"../core/interaction/Interaction\";\r\nimport { percent, Percent } from \"../core/utils/Percent\";\r\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\r\nimport { Color } from \"../core/utils/Color\";\r\nimport { RadialGradient } from \"../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../core/rendering/fills/Pattern\";\r\nimport * as $utils from \"../core/utils/Utils\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport * as $math from \"../core/utils/Math\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../core/Sprite\";\r\nimport { Disposer, IDisposer } from \"../core/utils/Disposer\";\r\nimport { MouseCursorStyle } from \"../core/interaction/Mouse\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\nimport { Scrollbar } from \"../core/elements/Scrollbar\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Legend]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LegendDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * A container data item's elements will be placed in.\r\n\t */\r\n\tprotected _itemContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the item label.\r\n\t */\r\n\tprotected _label: Label;\r\n\r\n\t/**\r\n\t * A [[Container]] for legend item marker.\r\n\t */\r\n\tprotected _marker: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the value label.\r\n\t */\r\n\tprotected _valueLabel: Label;\r\n\r\n\t/**\r\n\t * A data context for legend item.\r\n\t */\r\n\tpublic dataContext: any;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Legend;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic childrenCreated: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic colorOrig: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LegendDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element.\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis._label = label;\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * Main color of legend data item.\r\n\t *\r\n\t * This is set by the target element this legend item represents, like\r\n\t * a Series or a Slice.\r\n\t *\r\n\t * It can be used to derive a color in legend's sub-items, like label:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"legend\": {\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"text\": \"[{color}]{name}[/]\"\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/#Legend_labels} For more information about configuring legend labels.\r\n\t * @param value  Main color\r\n\t */\r\n\tpublic set color(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Main color\r\n\t */\r\n\tpublic get color(): $type.Optional<Color | Pattern | LinearGradient | RadialGradient> {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element for \"value label\".\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get valueLabel(): Label {\r\n\t\tif (!this._valueLabel) {\r\n\t\t\tlet valueLabel = this.component.valueLabels.create();\r\n\t\t\tthis._valueLabel = valueLabel;\r\n\r\n\t\t\tthis.addSprite(valueLabel);\r\n\t\t\tthis._disposers.push(valueLabel);\r\n\t\t\tvalueLabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.valueLabels.removeValue(valueLabel);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._valueLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to the main [[Container]] that holds legend item's elements:\r\n\t * marker and labels.\r\n\t *\r\n\t * @return Item container\r\n\t */\r\n\tpublic get itemContainer(): Container {\r\n\t\tif (!this._itemContainer) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet itemContainer = component.itemContainers.create();\r\n\t\t\titemContainer.parent = component;\r\n\r\n\t\t\tthis._itemContainer = itemContainer;\r\n\t\t\tthis.addSprite(itemContainer);\r\n\t\t\tthis._disposers.push(itemContainer);\r\n\r\n\t\t\t// Add click/tap event to toggle item\r\n\t\t\tif (itemContainer.togglable) {\r\n\t\t\t\titemContainer.events.on(\"toggled\", (ev) => {\r\n\t\t\t\t\tcomponent.toggleDataItem(<this>ev.target.dataItem);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add focus event so that we can track which object is currently in focus\r\n\t\t\t// for keyboard toggling\r\n\t\t\tif (itemContainer.focusable) {\r\n\t\t\t\titemContainer.events.on(\"hit\", (ev) => {\r\n\t\t\t\t\t// We need this here in order to reset focused item when it is clicked\r\n\t\t\t\t\t// normally so that it is not toggled by ENTER afterwards\r\n\t\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\titemContainer.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tcomponent.focusedItem = <this>ev.target.dataItem;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\titemContainer.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.itemContainers.removeValue(itemContainer);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tif (this.dataContext.uidAttr) {\r\n\t\t\t\titemContainer.readerControls = this.dataContext.uidAttr();\r\n\t\t\t\titemContainer.readerLabelledBy = this.dataContext.uidAttr();\r\n\t\t\t}\r\n\r\n\t\t\tlet sprite = <any>this.dataContext;\r\n\t\t\tif ((sprite instanceof DataItem || sprite instanceof Sprite) && !sprite.isDisposed()) {\r\n\t\t\t\tconst visibilitychanged = function(ev: AMEvent<Sprite | DataItem, ISpriteEvents & IDataItemEvents>[\"visibilitychanged\"]) {\r\n\t\t\t\t\titemContainer.readerChecked = ev.visible;\r\n\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\titemContainer.isActive = !ev.visible;\r\n\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t};\r\n\r\n\t\t\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\t\t\tif (this.component) {\r\n\t\t\t\t\t\tthis.component.dataItems.remove(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\r\n\t\t\t\tif (sprite instanceof Sprite) {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false)\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"hidden\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = false;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = true;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"shown\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = true;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = false;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._itemContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Container]] that holds legend item's marker element.\r\n\t *\r\n\t * @return Marker\r\n\t */\r\n\tpublic get marker(): Container {\r\n\t\tif (!this._marker) {\r\n\t\t\tlet marker = this.component.markers.create();\r\n\t\t\tthis._marker = marker;\r\n\t\t\tmarker.parent = this.itemContainer;\r\n\t\t\tthis.addSprite(marker);\r\n\t\t\tthis._disposers.push(marker);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.markers.removeValue(marker);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._marker;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a class that carries legend settings.\r\n *\r\n * A legend might change its settings dynamically. Legend can also be shared\r\n * by several elements, requiring different settings.\r\n *\r\n * Having legend's settings in a separate object is a good way to \"hot swap\"\r\n * a set of settings for the legend.\r\n */\r\nexport class LegendSettings {\r\n\r\n\t/**\r\n\t * [valueText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueText: string;\r\n\r\n\t/**\r\n\t * [labelText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic labelText: string;\r\n\r\n\t/**\r\n\t * A text template for the value part of the legend item.\r\n\t */\r\n\tpublic itemValueText: string;\r\n\r\n\t/**\r\n\t * A text template for the label part of the legend item.\r\n\t */\r\n\tpublic itemLabelText: string;\r\n\r\n\t/**\r\n\t * Should marker be created for each legend item.\r\n\t */\r\n\tpublic createMarker: boolean = true;\r\n}\r\n\r\n/**\r\n * Represents types available for Legend position. Not all charts will pay attention to this, like MapChart. You'll need to use legend.align and legend.valign properties to position legend on MapChart.\r\n */\r\nexport type LegendPosition = \"left\" | \"right\" | \"top\" | \"bottom\" | \"absolute\";\r\n\r\n/**\r\n * Defines data fields for [[Legend]].\r\n */\r\nexport interface ILegendDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * A field name in the data item which holds name of the legend item.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A field name in data item which holds boolean value whether item should\r\n\t * be displayed in legend or not.\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Legend]].\r\n */\r\nexport interface ILegendProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Should legend use default marker?\r\n\t *\r\n\t * If set to `false`, the legend will try to mirror the look of the actual\r\n\t * item, like series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tuseDefaultMarker?: boolean;\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * @default \"bottom\"\r\n\t */\r\n\tposition?: LegendPosition;\r\n\r\n\t/**\r\n\t * If set to `true` the Legend will display a scrollbar if its contents do\r\n\t * not fit into its `maxHeight`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.8.0\r\n\t */\r\n\tscrollable?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Legend]].\r\n */\r\nexport interface ILegendEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Legend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILegendAdapters extends IComponentAdapters, ILegendProperties { }\r\n\r\nexport interface ILegendItemEvents {\r\n\tpropertychanged: {\r\n\t\t/**\r\n\t\t * Property key.\r\n\t\t */\r\n\t\tproperty: string;\r\n\t};\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [[Legend]] class is used to create legend for the chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for Legend documentation\r\n * @see {@link ILegendEvents} for a list of available events\r\n * @see {@link ILegendAdapters} for a list of available Adapters\r\n */\r\nexport class Legend extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of the data fields.\r\n\t */\r\n\tpublic _dataFields: ILegendDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILegendEvents;\r\n\r\n\t/**\r\n\t * Defines data item type.\r\n\t */\r\n\tpublic _dataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * List of legend Item containers. Legend item containers contain marker, title label and value label.\r\n\t */\r\n\tpublic itemContainers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item labels.\r\n\t */\r\n\tpublic labels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * List of legend item markers.\r\n\t */\r\n\tpublic markers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item value labels.\r\n\t */\r\n\tpublic valueLabels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Currently focused legend item (for toggling via keyboard)\r\n\t */\r\n\tpublic focusedItem: Optional<this[\"_dataItem\"]>;\r\n\r\n\r\n\tpublic scrollbar: Scrollbar;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Legend\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", false);\r\n\t\tthis.setPropertyValue(\"scrollable\", false);\r\n\t\tthis.setPropertyValue(\"contentAlign\", \"center\");\r\n\r\n\t\t// Create a template container and list for legend items\r\n\t\tlet itemContainer: Container = new Container();\r\n\t\titemContainer.applyOnClones = true;\r\n\t\titemContainer.padding(8, 0, 8, 0);\r\n\t\titemContainer.margin(0, 10, 0, 10);\r\n\t\titemContainer.layout = \"horizontal\";\r\n\t\titemContainer.clickable = true;\r\n\t\titemContainer.focusable = true;\r\n\t\titemContainer.role = \"switch\";\r\n\t\titemContainer.togglable = true;\r\n\t\titemContainer.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\titemContainer.background.fillOpacity = 0; // creates hit area\r\n\r\n\t\t// Create container list using item template we just created\r\n\t\tthis.itemContainers = new ListTemplate<Container>(itemContainer);\r\n\t\tthis._disposers.push(new ListDisposer(this.itemContainers));\r\n\t\tthis._disposers.push(this.itemContainers.template);\r\n\r\n\t\t// Set up global keyboard events for toggling elements\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (keyboard.isKey(ev.event, \"enter\") && this.focusedItem) {\r\n\t\t\t\tconst focusedItem = this.focusedItem;\r\n\t\t\t\tconst target = focusedItem.itemContainer;\r\n\t\t\t\tif (target.togglable) {\r\n\t\t\t\t\tthis.toggleDataItem(focusedItem);\r\n\t\t\t\t}\r\n\t\t\t\telse if (target.clickable && target.events.isEnabled(\"hit\")) {\r\n\t\t\t\t\ttarget.dispatchImmediately(\"hit\", { event: ev });\r\n\r\n\t\t\t\t\t// We need this here because \"hit\" event resets `this.focusedItem`\r\n\t\t\t\t\t// And we need it here\r\n\t\t\t\t\tthis.focusedItem = focusedItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: Container = new Container();\r\n\t\tmarker.width = 23;\r\n\t\tmarker.height = 23;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.applyOnClones = true;\r\n\t\tmarker.setStateOnChildren = true;\r\n\t\tmarker.background.fillOpacity = 0;\r\n\t\tmarker.background.strokeOpacity = 0;\r\n\t\tmarker.propertyFields.fill = \"fill\";\r\n\t\tmarker.valign = \"middle\";\r\n\r\n\t\tlet disabledColor = interfaceColors.getFor(\"disabledBackground\");\r\n\r\n\t\tmarker.events.on(\"childadded\", (event) => {\r\n\t\t\tlet child = event.newValue;\r\n\t\t\tlet activeState = child.states.create(\"active\");\r\n\t\t\tactiveState.properties.stroke = disabledColor;\r\n\t\t\tactiveState.properties.fill = disabledColor;\r\n\t\t});\r\n\r\n\t\tthis.markers = new ListTemplate<Container>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\t// Create a legend background element\r\n\t\tlet rectangle: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\trectangle.width = percent(100);\r\n\t\trectangle.height = percent(100);\r\n\t\trectangle.applyOnClones = true;\r\n\t\trectangle.propertyFields.fill = \"fill\"; //othrwise old edge doesn't like as the same pattern is set both on parent and child https://codepen.io/team/amcharts/pen/72d7a98f3fb811d3118795220ff63182\r\n\t\trectangle.strokeOpacity = 0;\r\n\r\n\t\t// Create a template container and list for item labels\r\n\t\tlet label: Label = new Label();\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.margin(0, 5, 0, 5);\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.applyOnClones = true;\r\n\t\tlabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tthis.labels = new ListTemplate<Label>(label);\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\t\tlabel.interactionsEnabled = false;\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.fullWords = false;\r\n\r\n\t\t// Create a template container and list for item value labels\r\n\t\tlet valueLabel: Label = new Label();\r\n\t\tvalueLabel.margin(0, 5, 0, 0);\r\n\t\tvalueLabel.valign = \"middle\";\r\n\t\tvalueLabel.width = 50; // to avoid rearranging legend entries when value changes.\r\n\t\tvalueLabel.align = \"right\";\r\n\t\tvalueLabel.textAlign = \"end\";\r\n\t\tvalueLabel.applyOnClones = true;\r\n\t\tvalueLabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tvalueLabel.interactionsEnabled = false;\r\n\r\n\t\tthis.valueLabels = new ListTemplate<Label>(valueLabel);\r\n\t\tthis._disposers.push(new ListDisposer(this.valueLabels));\r\n\t\tthis._disposers.push(this.valueLabels.template);\r\n\r\n\t\tthis.position = \"bottom\"; // don't use setPropertyValue here!\r\n\r\n\t\t// Create a state for disabled legend items\r\n\t\titemContainer.states.create(\"active\");\r\n\t\titemContainer.setStateOnChildren = true;\r\n\r\n\t\t// Apply accessibility settings\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.events.on(\"layoutvalidated\", this.handleScrollbar, this, false);\r\n\t\tthis.events.on(\"parentset\", () => {\r\n\t\t\tconst parent = this.parent;\r\n\t\t\tif (parent) {\r\n\t\t\t\tthis._disposers.push(parent.events.on(\"maxsizechanged\", () => {\r\n\t\t\t\t\tif (this.scrollable) {\r\n\t\t\t\t\t\tthis.setTimeout(() => {\r\n\t\t\t\t\t\t\tthis.updateMasks();\r\n\t\t\t\t\t\t\tthis.handleScrollbar();\r\n\t\t\t\t\t\t\tthis._handleWheelReal(1);\r\n\t\t\t\t\t\t}, 100)\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Legend\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LegendDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected validateDataElements() {\r\n\t\tif (this.scrollbar) {\r\n\t\t\tthis.scrollbar.start = 0;\r\n\t\t\tthis.scrollbar.end = 1;\r\n\t\t}\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t * @todo Description\r\n\t * @todo Figure out how to update appearance of legend item without losing focus\r\n\t * @todo Update legend marker appearance as apperance of related series changes\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\t// Get data item (legend item's) container\r\n\t\tlet container = dataItem.itemContainer;\r\n\r\n\t\tlet marker = dataItem.marker;\r\n\r\n\t\t$utils.used(dataItem.label);\r\n\t\tlet valueLabel = dataItem.valueLabel;\r\n\r\n\t\t// Set parent and update current state\r\n\t\tcontainer.readerChecked = dataItem.dataContext.visible;\r\n\r\n\t\t// Tell series its legend data item\r\n\t\tdataItem.dataContext.legendDataItem = dataItem;\r\n\r\n\t\tlet tempMaxWidth = dataItem.label.maxWidth;\r\n\t\tif (!(dataItem.label.width instanceof Percent)) {\r\n\t\t\tdataItem.label.width = undefined;\r\n\t\t}\r\n\r\n\t\tif (tempMaxWidth > 0) {\r\n\t\t\tdataItem.label.maxWidth = tempMaxWidth;\r\n\t\t}\r\n\t\tif (valueLabel.align == \"right\") {\r\n\t\t\tvalueLabel.width = undefined;\r\n\t\t}\r\n\r\n\t\tlet legendSettings = dataItem.dataContext.legendSettings;\r\n\r\n\t\t// If we are not using default markers, create a unique legend marker based\r\n\t\t// on the data item type\r\n\t\tlet dataContext = dataItem.dataContext;\r\n\r\n\t\tif (dataContext.createLegendMarker && (!this.useDefaultMarker || !(dataContext instanceof Sprite))) {\r\n\t\t\tif (!dataItem.childrenCreated) {\r\n\t\t\t\tdataContext.createLegendMarker(marker);\r\n\t\t\t\tdataItem.childrenCreated = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.markers.template.propertyFields.fill = undefined;\r\n\t\t}\r\n\r\n\t\tif (dataContext.updateLegendValue) {\r\n\t\t\tdataContext.updateLegendValue(); // this solves issue with external legend, as legend is created after chart updates legend values\r\n\t\t}\r\n\r\n\t\tif (dataContext.component && dataContext.component.updateLegendValue) {\r\n\t\t\tdataContext.component.updateLegendValue(dataContext);\r\n\t\t}\r\n\r\n\t\tif (valueLabel.invalid) {\r\n\t\t\tvalueLabel.validate();\r\n\t\t}\r\n\r\n\t\tif (valueLabel.text == \"\" || valueLabel.text == undefined) {\r\n\t\t\tvalueLabel.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (legendSettings && (legendSettings.itemValueText != undefined || legendSettings.valueText != undefined)) {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet visible = dataItem.dataContext.visible;\r\n\r\n\t\tif (visible === undefined) {\r\n\t\t\tvisible = true;\r\n\t\t}\r\n\t\tvisible = $type.toBoolean(visible);\r\n\t\tdataItem.dataContext.visible = visible;\r\n\r\n\t\tcontainer.events.disableType(\"toggled\");\r\n\r\n\t\tcontainer.isActive = !visible;\r\n\t\tif (container.isActive) {\r\n\t\t\tcontainer.setState(\"active\", 0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcontainer.setState(\"default\", 0);\r\n\t\t}\r\n\t\tcontainer.events.enableType(\"toggled\");\r\n\t}\r\n\r\n\r\n\tpublic afterDraw() {\r\n\t\tlet maxWidth = this.getPropertyValue(\"maxWidth\");\r\n\t\tlet maxLabelWidth = 0;\r\n\t\tthis.labels.each((label) => {\r\n\t\t\tif (label.invalid) {\r\n\t\t\t\tlabel.maxWidth = undefined;\r\n\t\t\t\tlabel.validate();\r\n\t\t\t}\r\n\t\t\tif (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxLabelWidth) {\r\n\t\t\t\tmaxLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tlet maxValueLabelWidth = 0;\r\n\t\tthis.valueLabels.each((label) => {\r\n\t\t\tif (label.invalid) {\r\n\t\t\t\tlabel.validate();\r\n\t\t\t}\r\n\t\t\tif (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxValueLabelWidth) {\r\n\t\t\t\tmaxValueLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet maxMarkerWidth = 0;\r\n\t\tthis.markers.each((marker) => {\r\n\t\t\tif (marker.invalid) {\r\n\t\t\t\tmarker.validate();\r\n\t\t\t}\r\n\t\t\tif (marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight > maxMarkerWidth) {\r\n\t\t\t\tmaxMarkerWidth = marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\t\tlet itemContainer = this.itemContainers.template;\r\n\t\tlet margin = itemContainer.pixelMarginRight + itemContainer.pixelMarginLeft;\r\n\t\tlet maxAdjustedLabelWidth: number;\r\n\t\tlet trueMaxWidth = maxLabelWidth + maxValueLabelWidth + maxMarkerWidth;\r\n\t\tif (!$type.isNumber(maxWidth)) {\r\n\t\t\tmaxAdjustedLabelWidth = maxLabelWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmaxWidth = maxWidth - margin;\r\n\t\t\tif (maxWidth > trueMaxWidth) {\r\n\t\t\t\tmaxWidth = trueMaxWidth;\r\n\t\t\t}\r\n\t\t\tmaxAdjustedLabelWidth = maxWidth - maxMarkerWidth - maxValueLabelWidth;\r\n\t\t}\r\n\r\n\t\tthis.labels.each((label) => {\r\n\t\t\tif (this.valueLabels.template.align == \"right\" || label.measuredWidth > maxAdjustedLabelWidth) {\r\n\t\t\t\tif (!(label.width instanceof Percent)) {\r\n\t\t\t\t\tlabel.width = Math.min(label.maxWidth, maxAdjustedLabelWidth - label.pixelMarginLeft - label.pixelMarginRight);\r\n\t\t\t\t\tlabel.maxWidth = label.width;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (this.valueLabels.template.align == \"right\") {\r\n\t\t\tthis.valueLabels.each((valueLabel) => {\r\n\t\t\t\tvalueLabel.width = maxValueLabelWidth - valueLabel.pixelMarginRight - valueLabel.pixelMarginLeft;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tsuper.afterDraw();\r\n\t}\r\n\r\n\r\n\tprotected handleScrollbar() {\r\n\t\tlet scrollbar = this.scrollbar;\r\n\t\tif (this.scrollable && scrollbar) {\r\n\t\t\tconst measuredHeight = this.maxHeight;\r\n\t\t\tscrollbar.height = measuredHeight;\r\n\t\t\tscrollbar.x = this.measuredWidth - scrollbar.pixelWidth - scrollbar.pixelMarginLeft;\r\n\r\n\t\t\tif (this.contentHeight > measuredHeight) {\r\n\t\t\t\tscrollbar.visible = true;\r\n\t\t\t\tscrollbar.thumb.height = scrollbar.height * measuredHeight / this.contentHeight;\r\n\t\t\t\tthis.paddingRight = scrollbar.pixelWidth + scrollbar.pixelMarginLeft + scrollbar.pixelMarginRight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tscrollbar.thumb.height = scrollbar.height * measuredHeight / this.contentHeight;\r\n\t\t\t\tthis.paddingRight = scrollbar.pixelWidth + scrollbar.pixelMarginLeft + scrollbar.pixelMarginRight;\r\n\t\t\t\tscrollbar.visible = false;\r\n\t\t\t\tscrollbar.start = 0;\r\n\t\t\t\tscrollbar.end = 1;\r\n\t\t\t}\r\n\r\n\t\t\tscrollbar.handleThumbPosition();\r\n\r\n\t\t\tthis.updateMasks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * IMPORTANT: [[MapChart]] will ignore this setting, as it is using different\r\n\t * layout structure than other charts.\r\n\t *\r\n\t * To position legend in [[MapChart]] set legend's `align` (`\"left\"` or\r\n\t * `\"right\"`) and `valign` (`\"top\"` or `\"bottom\"`) properties instead.\r\n\t *\r\n\t * @default \"bottom\"\r\n\t * @param value  Position\r\n\t */\r\n\tpublic set position(value: LegendPosition) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tif (value == \"left\" || value == \"right\") {\r\n\t\t\t\tthis.margin(10, 5, 10, 10);\r\n\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\tthis.contentAlign = \"none\";\r\n\t\t\t\tthis.valueLabels.template.align = \"right\";\r\n\r\n\t\t\t\tif (!$type.isNumber(this.maxColumns)) {\r\n\t\t\t\t\tthis.maxColumns = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.width = undefined;\r\n\t\t\t\tthis.maxWidth = 220;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.maxColumns = undefined;\r\n\t\t\t\tthis.width = percent(100);\r\n\t\t\t\tthis.valueLabels.template.align = \"left\";\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position\r\n\t */\r\n\tpublic get position(): LegendPosition {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should legend try to mirror the look of the related item when building\r\n\t * the marker for legend item?\r\n\t *\r\n\t * If set to `false` it will try to make the marker look like its related\r\n\t * item.\r\n\t *\r\n\t * E.g. if an item is for a Line Series, it will display a line of the\r\n\t * same thickness, color, and will use the same bullets if series have them.\r\n\t *\r\n\t * If set to `true`, all markers will be shown as squares, regardless of te\r\n\t * series type.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use default marker?\r\n\t */\r\n\tpublic set useDefaultMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use default marker?\r\n\t */\r\n\tpublic get useDefaultMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"useDefaultMarker\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the Legend will display a scrollbar if its contents do\r\n\t * not fit into its `maxHeight`.\r\n\t *\r\n\t * Please note that `maxHeight` is automatically set for Legend when its\r\n\t * `position` is set to `\"left\"` or `\"right\"`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.8.0\r\n\t * @param  value  Legend Scrollable?\r\n\t */\r\n\tpublic set scrollable(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"scrollable\", value, true)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tlet scrollbar = this.createChild(Scrollbar);\r\n\t\t\t\tthis.scrollbar = scrollbar;\r\n\t\t\t\tscrollbar.isMeasured = false;\r\n\t\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\t\tscrollbar.endGrip.__disabled = true;\r\n\t\t\t\tscrollbar.startGrip.__disabled = true;\r\n\t\t\t\tscrollbar.visible = false;\r\n\t\t\t\tscrollbar.marginLeft = 5;\r\n\r\n\t\t\t\tthis._mouseWheelDisposer = this.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\r\n\t\t\t\tthis._disposers.push(scrollbar.events.on(\"rangechanged\", this.updateMasks, this, false));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t\tif (this.scrollbar) {\r\n\t\t\t\t\t\tthis.scrollbar.dispose();\r\n\t\t\t\t\t\tthis.scrollbar = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel scrolling of legend.\r\n\t *\r\n\t * @param  event  Event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]): void {\r\n\t\tthis._handleWheelReal(event.shift.y)\r\n\t}\r\n\r\n\tprotected _handleWheelReal(shift: number) {\r\n\t\tlet scrollbar = this.scrollbar\r\n\t\tif (scrollbar) {\r\n\t\t\tlet ds = (shift / 1000 * this.measuredHeight / this.contentHeight);\r\n\t\t\tlet delta = scrollbar.end - scrollbar.start;\r\n\t\t\tif (shift > 0) {\r\n\t\t\t\tscrollbar.start = $math.max(0, scrollbar.start - ds);\r\n\t\t\t\tscrollbar.end = scrollbar.start + delta;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tscrollbar.end = $math.min(1, scrollbar.end - ds);\r\n\t\t\t\tscrollbar.start = scrollbar.end - delta;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateMasks(): void {\r\n\t\tif (this.scrollbar) {\r\n\t\t\tthis.itemContainers.each((itemContainer) => {\r\n\t\t\t\titemContainer.dy = -this.scrollbar.thumb.pixelY * this.contentHeight / this.maxHeight;\r\n\t\t\t\titemContainer.maskRectangle = { x: 0, y: -itemContainer.dy, width: this.measuredWidth, height: this.maxHeight }\r\n\t\t\t})\r\n\t\t}\r\n\t\tthis.invalidatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend Scrollable?\r\n\t */\r\n\tpublic get scrollable(): boolean {\r\n\t\treturn this.getPropertyValue(\"scrollable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item Legend item\r\n\t * @todo Maybe do it with togglable instead\r\n\t */\r\n\tpublic toggleDataItem(item: this[\"_dataItem\"]): void {\r\n\t\tlet dataContext = item.dataContext;\r\n\r\n\t\tif (!dataContext.visible || dataContext.isHiding || (dataContext instanceof Sprite && dataContext.isHidden)) {\r\n\t\t\titem.color = item.colorOrig;\r\n\r\n\t\t\tdataContext.appeared = true;\r\n\t\t\titem.itemContainer.isActive = false;\r\n\r\n\t\t\tif (dataContext.hidden === true) {\r\n\t\t\t\tdataContext.hidden = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataContext.show) {\r\n\t\t\t\tdataContext.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"%1 shown\", this.language.locale, item.label.readerTitle));\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\titem.itemContainer.isActive = true;\r\n\t\t\tdataContext.appeared = true;\r\n\r\n\t\t\tif (dataContext.hide) {\r\n\t\t\t\tdataContext.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"%1 hidden\", this.language.locale, item.label.readerTitle));\r\n\t\t\titem.color = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Override preloader method so that legend does not accidentally show its\r\n\t * own preloader.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Always `undefined`\r\n\t */\r\n\tpublic get preloader(): Optional<Preloader> {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemPropertyChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemPropertyChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tdataItem.valueLabel.invalidate();\r\n\t\tdataItem.label.invalidate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Legend\"] = Legend;\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Move legend to below the chart if chart is narrow\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"left\" || target.position == \"right\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Move legend to the right if chart is very short\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"top\" || target.position == \"bottom\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"right\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable legend altogether on small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.isXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { AxisDataItem } from \"../axes/Axis\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { LegendDataItem, LegendSettings } from \"../Legend\";\r\nimport { options } from \"../../core/Options\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\n\r\nexport interface IHeatRule {\r\n\ttarget: Sprite;\r\n\tproperty: string;\r\n\tmin: any;\r\n\tmax: any;\r\n\tdataField?: string;\r\n\tminValue?: number;\r\n\tmaxValue?: number;\r\n\tlogarithmic?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SeriesDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Related item's width in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemWidth: number;\r\n\r\n\t/**\r\n\t * Related item's height in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemHeight: number;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _bullets: Dictionary<string, Sprite>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Series;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t */\r\n\tpublic get bullets(): Dictionary<string, Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new Dictionary<string, Sprite>();\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._bullets));\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SeriesDataItem\";\r\n\t\t//@todo Should we make `bullets` list disposable?\r\n\t\t//this._disposers.push(new DictionaryDisposer(this.bullets));\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.bullets.clear();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * data items's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Series]].\r\n */\r\nexport interface ISeriesDataFields extends IComponentDataFields {\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be hidden.\r\n\t */\r\n\thidden?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Series]].\r\n */\r\nexport interface ISeriesProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tminBulletDistance?: number;\r\n\r\n\t/**\r\n\t * Should series be hidden in chart's legend?\r\n\t */\r\n\thiddenInLegend?: boolean;\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t */\r\n\tname?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[Series]].\r\n */\r\nexport interface ISeriesEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\textremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tdataitemchanged: {\r\n\t\tdataItem: DataItem\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Series]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISeriesAdapters extends IComponentAdapters, ISeriesProperties {\r\n\t/**\r\n\t * Applied to the name used by screen readers.\r\n\t */\r\n\titemReaderText: string\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\r\nexport class Series extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ISeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISeriesEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used for the series.\r\n\t */\r\n\tpublic _dataItem: SeriesDataItem;\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this series.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tprotected _ignoreMinMax: boolean = false;\r\n\r\n\t/**\r\n\t * Container series' elements are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic mainContainer: Container;\r\n\r\n\t/**\r\n\t * Should series' bullets?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tprotected _showBullets: boolean = true;\r\n\r\n\t/**\r\n\t * List of series' bullets.\r\n\t */\r\n\tprotected _bullets: ListTemplate<Sprite>;\r\n\r\n\t/**\r\n\t * Container bullets are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: SerialChart;\r\n\r\n\t/**\r\n\t * A container axis ranges are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rangesContainer: Container;\r\n\r\n\t/**\r\n\t * A list of axis ranges for this series.\r\n\t */\r\n\tpublic axisRanges: List<AxisDataItem>;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\t/**\r\n\t * Lowest overal values by type.\r\n\t */\r\n\tprotected _tmin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest overal values by type.\r\n\t */\r\n\tprotected _tmax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Lowest values in current selection by type.\r\n\t */\r\n\tprotected _smin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest values in current selection by type.\r\n\t */\r\n\tprotected _smax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [dataItemsByAxis description]\r\n\t *\r\n\t * Both by category and date.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataItemsByAxis = new Dictionary<string, Dictionary<string, this[\"_dataItem\"]>>();\r\n\r\n\t/**\r\n\t * Normally series items are focusable using keyboard, so that people can\r\n\t * select them with a TAB key. However, if there are a lot of data points on\r\n\t * screen it might be long and useless to tab through all o fthem.\r\n\t *\r\n\t * This is where `skipFocusThreshold` comes in. If there are more items than\r\n\t * the value set here, we will not make those focusable and rather let screen\r\n\t * reader software rely on the series summary, or authors provide alternative\r\n\t * detailed information display, such as HTML table.\r\n\t *\r\n\t * Different series might have different threshold defaults.\r\n\t */\r\n\tpublic skipFocusThreshold: number = 20;\r\n\r\n\t/**\r\n\t * Holds a default screen reader text for series data items. It will be used\r\n\t * to generate information for screen readers. If not set, the series will\r\n\t * try to deduce reader text from `tooltipText` or `tooltipHTML`. If those\r\n\t * are not set either, a default reader text will be used which is relevant\r\n\t * for each Series type.\r\n\t */\r\n\tprotected _itemReaderText: string;\r\n\r\n\r\n\t/**\r\n\t * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n\t */\r\n\tprotected _itemReaderTextChanged: boolean = false;\r\n\r\n\t/*\r\n\t\tpublic heatMapfillRule: (fill:Color, column: Sprite) => any = function(fill:Color, sprite: Sprite) {\r\n\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>sprite.dataItem;\r\n\r\n\t\t\tif (dataItem && dataItem.value) {\r\n\t\t\t\tlet series = dataItem.component;\r\n\t\t\t\tif($type.hasValue(series.minColor) &&  $type.hasValue(series.maxColor) && $type.isNumber(series.minValue) && $type.isNumber(series.maxValue)){\r\n\t\t\t\t\tlet percent = (dataItem.values.value.workingValue - series.minValue) / (series.maxValue - series.minValue);\r\n\t\t\t\t\treturn new Color($colors.interpolate(series.minColor.rgb, series.maxColor.rgb, percent));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t*/\r\n\r\n\tprotected _heatRules: List<IHeatRule>;\r\n\r\n\t/**\r\n\t * Most of the series use absolute values. However sometimes various\r\n\t * calculated percent values are need, e.g. item's percent representation\r\n\t * across all values in series, etc.\r\n\t *\r\n\t * It's a resource-intensive operation, so it is disabled by default.\r\n\t *\r\n\t * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n\t * or creating 100% stacks, this setting needs to be set to `true`.\r\n\t *\r\n\t * NOTE: `PieChart`, which relies on slice percentages, has this\r\n\t * automatically set to `true`.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic calculatePercent: boolean = false;\r\n\r\n\t/**\r\n\t * When `calculatePercent` is enabled and data item's percent value is\r\n\t * calculated, last item's real value is used instead of its working value.\r\n\t *\r\n\t * This is done for the animations when last item in series (e.g. slice in\r\n\t * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n\t * calculated percent would always be 100%).\r\n\t *\r\n\t * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n\t * hack by setting `usePercentHack` to `false`.\r\n\t *\r\n\t * @since 4.9.13\r\n\t * @default true\r\n\t */\r\n\tpublic usePercentHack: boolean = true;\r\n\r\n\t/**\r\n\t * Specifies if series should be automatically disposed when removing from\r\n\t * chart's `series` list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * When chart/series' data is processed, all kinds of derivative values are\r\n\t * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n\t * time-consuming operation, especially prominent in data-heavy charts.\r\n\t *\r\n\t * If your chart does not need those values, and you have a lot of data,\r\n\t * setting this to `true` might give a dramatic increase in initial chart\r\n\t * load speed.\r\n\t *\r\n\t * Please note, regular column and line series usage scenarios do not\r\n\t * require derivative values. Those come into play only when you do advanced\r\n\t * functionality like coloring segments of charts in different colors\r\n\t * depending on change between open and close values, have stacked series, or\r\n\t * display any of the derived values, like percent, in tooltips or bullets.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Series) {\r\n\t\t\tthrow new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\r\n\t\t}\r\n\r\n\t\tthis.className = \"Series\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"hidden\", false);\r\n\r\n\t\tthis.axisRanges = new List<AxisDataItem>();\r\n\t\tthis.axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\r\n\t\tthis.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\r\n\t\tthis.mainContainer = this.createChild(Container);\r\n\t\tthis.mainContainer.shouldClone = false;\r\n\t\tthis.mainContainer.mask = this.createChild(Sprite);\r\n\r\n\t\tthis._disposers.push(this.mainContainer);\r\n\r\n\t\t// all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\r\n\t\tlet bulletsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis._shouldBeReady.push(bulletsContainer);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.virtualParent = this;\r\n\t\tthis._disposers.push(bulletsContainer);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.tooltip = new Tooltip();\r\n\t\tthis.tooltip.virtualParent = this;\r\n\t\tthis._disposers.push(this.tooltip);\r\n\r\n\t\tthis.hiddenState.transitionEasing = $ease.cubicIn;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis._disposers.push(this.dataItem);\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply accessibility\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * We need this here so that class names can be applied to bullets container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\tsuper.applyTheme();\r\n\t\tif (options.autoSetClassName && this.bulletsContainer) {\r\n\t\t\tthis.bulletsContainer.className = this.className + \"-bullets\";\r\n\t\t\tthis.bulletsContainer.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart series is used on.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullet.\r\n\t *\r\n\t * @param bullet  Sprite\r\n\t */\r\n\tpublic positionBullet(bullet: Sprite): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates newly created bullet after it has been instert into the list.\r\n\t *\r\n\t * @param event  List event\r\n\t * @todo investigate why itemReaderText is undefined\r\n\t */\r\n\tprotected processBullet(event: IListEvents<Sprite>[\"inserted\"]) {\r\n\t\tlet bullet: Sprite = event.newValue;\r\n\t\tbullet.isTemplate = true;\r\n\t\t// Add accessibility options to bullet\r\n\t\t// If there are relatively few bullets, make them focusable\r\n\t\tthis.events.once(\"datavalidated\", (ev) => {\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tbullet.focusable = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * removes bullets\r\n\t *\r\n\t * @param event  List event\r\n\t */\r\n\tprotected removeBullet(event: IListEvents<Sprite>[\"removed\"]) {\r\n\t\tlet bullet: Sprite = event.oldValue;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet eachBullet = dataItem.bullets.getKey(bullet.uid);\r\n\t\t\tif (eachBullet) {\r\n\t\t\t\teachBullet.dispose();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.processValues(false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getFirstValue(key: string, startIndex: number): number {\r\n\t\t// find first\r\n\t\t/*\r\n\t\treturn $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tfor (let key in dataItem.values) {\r\n\t\t\t\tif ($object.hasKey(dataItem.values, key)) {\r\n\t\t\t\t\tlet value: number = dataItem.values[key].workingValue;\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t});*/\r\n\r\n\t\t//if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\r\n\t\t//startIndex++;\r\n\t\t//}\r\n\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getAbsoluteFirstValue(key: string): number {\r\n\t\tfor (let i = 0; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.values[key].value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * [rangeChangeUpdate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected rangeChangeUpdate() {\r\n\t\tsuper.rangeChangeUpdate();\r\n\t\tthis.processValues(true);\r\n\t}\r\n\r\n\t/**\r\n\t * [processValues description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t * @param dataItems [description]\r\n\t */\r\n\tprotected processValues(working: boolean) {\r\n\t\tif (!this.simplifiedProcessing) {\r\n\t\t\tlet dataItems = this.dataItems;\r\n\r\n\t\t\tlet count: { [index: string]: number } = {};\r\n\t\t\tlet sum: { [index: string]: number } = {};\r\n\t\t\tlet absoluteSum: { [index: string]: number } = {};\r\n\t\t\tlet low: { [index: string]: number } = {};\r\n\t\t\tlet high: { [index: string]: number } = {};\r\n\t\t\tlet open: { [index: string]: number } = {};\r\n\t\t\tlet close: { [index: string]: number } = {};\r\n\t\t\tlet previous: { [index: string]: number } = {};\r\n\t\t\tlet first: { [index: string]: number } = {};\r\n\t\t\tlet absoluteFirst: { [index: string]: number } = {};\r\n\r\n\t\t\t//let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\r\n\r\n\t\t\tlet startIndex: number = $math.max(0, this.startIndex);\r\n\t\t\tstartIndex = $math.min(startIndex, this.dataItems.length);\r\n\r\n\t\t\tlet endIndex: number = $math.min(this.endIndex, this.dataItems.length);\r\n\r\n\t\t\tif (!$type.isNumber(startIndex)) {\r\n\t\t\t\tstartIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\t\tendIndex = this.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t//if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\t// count values\r\n\t\t\t\t\t\tif (!$type.isNumber(count[key])) {\r\n\t\t\t\t\t\t\tcount[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcount[key]++;\r\n\r\n\t\t\t\t\t\t// sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\tsum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsum[key] += value;\r\n\r\n\t\t\t\t\t\t// absolute sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteSum[key])) {\r\n\t\t\t\t\t\t\tabsoluteSum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tabsoluteSum[key] += Math.abs(value);\r\n\r\n\t\t\t\t\t\t// open\r\n\t\t\t\t\t\tif (!$type.isNumber(open[key])) {\r\n\t\t\t\t\t\t\topen[key] = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// close\r\n\t\t\t\t\t\tclose[key] = value;\r\n\r\n\t\t\t\t\t\t// low\r\n\t\t\t\t\t\tif (!$type.isNumber(low[key])) {\r\n\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (low[key] > value) {\r\n\t\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// high\r\n\t\t\t\t\t\tif (!$type.isNumber(high[key])) {\r\n\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (high[key] < value) {\r\n\t\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(first[key])) {\r\n\t\t\t\t\t\t\tfirst[key] = this.getFirstValue(key, startIndex);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteFirst[key])) {\r\n\t\t\t\t\t\t\tabsoluteFirst[key] = this.getAbsoluteFirstValue(key);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// change\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - first[key], \"change\");\r\n\t\t\t\t\t\t// change from start percent\r\n\t\t\t\t\t\t// will fail if first value is 0\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - first[key]) / first[key] * 100, \"changePercent\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]), \"startChange\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]) / absoluteFirst[key] * 100, \"startChangePercent\");\r\n\r\n\t\t\t\t\t\t// previous change\r\n\t\t\t\t\t\tlet prevValue: number = previous[key];\r\n\t\t\t\t\t\tif (!$type.isNumber(prevValue)) {\r\n\t\t\t\t\t\t\tprevValue = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - prevValue, \"previousChange\");\r\n\t\t\t\t\t\t// previous change percent\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\r\n\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.calculatePercent) {\r\n\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\tlet ksum: number = absoluteSum[key];\r\n\r\n\t\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tif (ksum > 0) {\r\n\t\t\t\t\t\t\t\tif (this.usePercentHack) {\r\n\t\t\t\t\t\t\t\t\t// this hack is made in order to make it possible to animate single slice to 0\r\n\t\t\t\t\t\t\t\t\t// if there is only one slice left, percent value is always 100%, so it won't animate\r\n\t\t\t\t\t\t\t\t\t// so we use real value of a slice instead of current value\r\n\t\t\t\t\t\t\t\t\tif (value == ksum) {\r\n\t\t\t\t\t\t\t\t\t\tksum = dataItem.values[key].value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet percent = value / ksum * 100;\r\n\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, percent, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 0, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// calculate one before first (cant do that in cycle, as we don't know open yet\r\n\t\t\t// when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\r\n\t\t\t// so we do startIndex - 1\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet zeroItem: this[\"_dataItem\"] = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(zeroItem.values, (key) => {\r\n\t\t\t\t\tlet value = zeroItem.values[key].value;\r\n\t\t\t\t\t// change\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, value - open[key], \"change\");\r\n\t\t\t\t\t// change percent\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, (value - open[key]) / open[key] * 100, \"changePercent\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// we save various data like sum, average to dataPoint of the series\r\n\t\t\tlet dataItem: DataItem = this.dataItem;\r\n\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, absoluteSum[key], \"absoluteSum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key] / count[key], \"average\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, open[key], \"open\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, close[key], \"close\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, low[key], \"low\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, high[key], \"high\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, count[key], \"count\");\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.filters.clear();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t//axisRange.contents.disposeChildren(); // not good for columns, as they are reused\r\n\t\t\t//\t\t\taxisRange.appendChildren();\r\n\t\t\taxisRange.validate();\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t\tlet bulletsContainer = this.bulletsContainer;\r\n\t\tbulletsContainer.fill = this.fill;\r\n\t\tbulletsContainer.stroke = this.stroke;\r\n\t\tbulletsContainer.x = this.pixelX;\r\n\t\tbulletsContainer.y = this.pixelY;\r\n\r\n\t\tif (this.bulletsContainer.children.length > 0) {\r\n\t\t\tif (this._showBullets) {\r\n\r\n\t\t\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.children.each((bullet) => {\r\n\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.updateTooltipBounds();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltipBounds() {\r\n\t\tif (this.topParent) {\r\n\t\t\tlet x = 0;\r\n\t\t\tlet y = 0;\r\n\t\t\tlet w = this.topParent.maxWidth;\r\n\t\t\tlet h = this.topParent.maxHeight;\r\n\t\t\tlet rect = { x: x, y: y, width: w, height: h };\r\n\r\n\t\t\tthis.tooltip.setBounds(rect);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Sprite): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (this._showBullets) {\r\n\t\t\tif (!this.isHidden) {\r\n\t\t\t\tthis.bulletsContainer.visible = true;\r\n\t\t\t}\r\n\t\t\tthis.bullets.each((bulletTemplate) => {\r\n\t\t\t\t// always better to use the same, this helps to avoid redrawing\r\n\t\t\t\tlet bullet: Sprite = <Sprite>dataItem.bullets.getKey(bulletTemplate.uid);\r\n\r\n\t\t\t\tif (this.shouldCreateBullet(dataItem, bulletTemplate)) {\r\n\t\t\t\t\tif (!bullet) {\r\n\r\n\t\t\t\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\t\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\t\t\t\tif (disabledField && dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = false;\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = false;\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = true;\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbullet.shouldClone = false;\r\n\t\t\t\t\t\tdataItem.addSprite(bullet);\r\n\r\n\t\t\t\t\t\tif (!this.visible || this.isHiding) {\r\n\t\t\t\t\t\t\tbullet.hide(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet currentDataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\t\t\t\tif (currentDataItem != dataItem) {\r\n\t\t\t\t\t\t// set to undefined in order not to reuse\r\n\t\t\t\t\t\tif (currentDataItem) {\r\n\t\t\t\t\t\t\tcurrentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet readerText = this.itemReaderText;\r\n\r\n\t\t\t\t\t\tif (bullet instanceof Bullet) {\r\n\t\t\t\t\t\t\tif (!readerText) {\r\n\t\t\t\t\t\t\t\treaderText = (\"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\");\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (bullet.isDynamic) {\r\n\t\t\t\t\t\t\t\tdataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\t//dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\tthis.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbullet.deepInvalidate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Add accessibility to bullet\r\n\t\t\t\t\t\tif (bullet.focusable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (bullet.hoverable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbullet.parent = this.bulletsContainer;\r\n\t\t\t\t\tdataItem.bullets.setKey(bulletTemplate.uid, bullet);\r\n\r\n\t\t\t\t\t// pass max w/h so we'd know if we should show/hide somethings\r\n\t\t\t\t\tbullet.maxWidth = dataItem.itemWidth;\r\n\t\t\t\t\tbullet.maxHeight = dataItem.itemHeight;\r\n\t\t\t\t\tbullet.__disabled = false;\r\n\r\n\t\t\t\t\tthis.positionBullet(bullet);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (bullet) {\r\n\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.bulletsContainer.visible = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (!this.dataRangeInvalid) {\r\n\t\t\tthis.invalidateProcessedData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t * @param value  Exclude from calculations?\r\n\t */\r\n\tpublic set ignoreMinMax(value: boolean) {\r\n\t\tthis._ignoreMinMax = value;\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from calculations?\r\n\t */\r\n\tpublic get ignoreMinMax(): boolean {\r\n\t\treturn this._ignoreMinMax;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\r\n\t\t// A placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process axis range after it has been added to the list.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<AxisDataItem>[\"inserted\"]): void {\r\n\t\t// create container if not existing\r\n\t\tif (!this.rangesContainer) {\r\n\t\t\tthis.rangesContainer = this.createChild(Container);\r\n\t\t\tthis.rangesContainer.shouldClone = false;\r\n\t\t\tthis.rangesContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\tif (axisRange) {\r\n\t\t\taxisRange.contents.parent = this.rangesContainer;\r\n\t\t\taxisRange.isRange = true;\r\n\t\t\taxisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getAxisField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axis  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * IMPORTANT: This setting will work only when Series' base axis\r\n\t * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n\t * setting will be ignored, because it would be a huge overhead to measure\r\n\t * distance between each and every bullet.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Distance (px)\r\n\t */\r\n\tpublic set minBulletDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"minBulletDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get minBulletDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minBulletDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of bullets that will be added to each and every items in the\r\n\t * series.\r\n\t *\r\n\t * You can push any object that is a descendant of a [[Sprite]] here. All\r\n\t * items added to this list will be copied and used as a bullet on all data\r\n\t * items, including their properties, events, etc.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n\t * @return List of bullets.\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Sprite>(new Bullet());\r\n\t\t\tthis._bullets.template.virtualParent = this;\r\n\t\t\tthis._bullets.events.on(\"inserted\", this.processBullet, this, false);\r\n\t\t\tthis._bullets.events.on(\"removed\", this.removeBullet, this, false);\r\n\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Should the series be hidden in legend?\r\n\t *\r\n\t * @param value Hidden in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"hiddenInLegend\", value)) {\r\n\t\t\tif (this.chart) {\r\n\t\t\t\tthis.chart.feedLegend();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hidden in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.getPropertyValue(\"hiddenInLegend\");\r\n\t}\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value);\r\n\r\n\t\tlet legendDataItem = this.legendDataItem;\r\n\t\tif (legendDataItem) {\r\n\t\t\tlegendDataItem.component.invalidate();\r\n\t\t\tlegendDataItem.component.invalidateRawData();\r\n\t\t}\r\n\r\n\t\tthis.readerTitle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Screen reader text to be applied to each individual data item, such\r\n\t * as bullets, columns or slices.\r\n\t *\r\n\t * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n\t * `{valueY}`, etc.\r\n\t *\r\n\t * Any text formatting options, e.g. `[bold]` will be ignored.\r\n\t *\r\n\t * @param value Screen reader text template\r\n\t */\r\n\tpublic set itemReaderText(value: string) {\r\n\t\tthis._itemReaderText = value;\r\n\t\tthis._itemReaderTextChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Screen reader text template\r\n\t */\r\n\tpublic get itemReaderText(): string {\r\n\r\n\t\t// Get explicitly set reader text\r\n\t\tlet readerText = this._itemReaderText;\r\n\r\n\t\t// Not set? Let's try something else\r\n\t\tif (!readerText) {\r\n\r\n\t\t\t// Tooltip text?\r\n\t\t\tif (this.tooltipText) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipText);\r\n\t\t\t}\r\n\t\t\telse if (this.tooltipHTML) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipHTML);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn readerText;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"itemReaderText\", readerText);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if number of data items in the series are beyond non-focusable\r\n\t * count and should not be available for TAB-through.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Items focusable?\r\n\t */\r\n\tpublic itemsFocusable(): boolean {\r\n\t\treturn this.dataItems.length >= this.skipFocusThreshold ? false : true;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\t// if this series has legend item\r\n\t\tif (this.legendDataItem) {\r\n\r\n\t\t\tlet legendSettings: LegendSettings = this.legendSettings;\r\n\t\t\tlet legendDataItem = this.legendDataItem;\r\n\t\t\tlet label: Label = legendDataItem.label;\r\n\t\t\tlet valueLabel: Label = legendDataItem.valueLabel;\r\n\r\n\t\t\t// update legend\r\n\t\t\tif ((dataItem && !dataItem.isDisposed())|| notRange) {\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\t// if itemLabelText is set, means we have to reset label even if labelText is not set\r\n\t\t\t\t\tif (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.valueText || legendSettings.itemValueText != undefined) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tthis.bulletsContainer.copyFrom(source.bulletsContainer);\r\n\t\tthis.calculatePercent = source.calculatePercent;\r\n\t\tthis.usePercentHack = source.usePercentHack;\r\n\t\tthis.simplifiedProcessing = source.simplifiedProcessing;\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a modal or console message with error, and halts any further\r\n\t * processing of this element.\r\n\t *\r\n\t * @param e Error\r\n\t */\r\n\tpublic raiseCriticalError(e: Error) {\r\n\t\tif (this._chart && this._chart.modal) {\r\n\t\t\tthis._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\r\n\t\t\tthis._chart.modal.closable = false;\r\n\t\t\tif (!options.suppressErrors) {\r\n\t\t\t\tthis._chart.modal.open();\r\n\t\t\t}\r\n\t\t\tthis._chart.disabled = true;\r\n\t\t}\r\n\r\n\t\tif (options.verbose) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Applies filters to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyFilters() {\r\n\t\tsuper.applyFilters();\r\n\t\tthis.bulletsContainer.filters.clear();\r\n\r\n\t\t// copyFrom of a list copies, does not clone\r\n\t\t$iter.each(this.filters.iterator(), (filter) => {\r\n\t\t\tthis.bulletsContainer.filters.push(filter.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of heat rules to apply to series' elements based on the value\r\n\t * of the data item.\r\n\t *\r\n\t * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n\t * be applied to child objects of series, like columns, bullets, etc.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t * ```Javacript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t *```JSON\r\n\t *{\r\n\t *  // ...\r\n\t *  \"series\": [{\r\n\t *    \"type\": \"ColumnSeries\",\r\n\t *    \"heatRules\": [{\r\n\t *      \"target\": \"columns.template\",\r\n\t *      \"property\": \"fill\",\r\n\t *      \"min\": \"#F5DBCB\",\r\n\t *      \"max\": \"#ED7B84\",\r\n\t *      \"dataField\": \"valueY\"\r\n\t *    }]\r\n\t *  }]\r\n\t *}\r\n\t *```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n\t * @return  Heat rules\r\n\t */\r\n\r\n\tpublic get heatRules(): List<IHeatRule> {\r\n\t\tif (!this._heatRules) {\r\n\t\t\tthis._heatRules = new List<IHeatRule>();\r\n\t\t\tthis._heatRules.events.on(\"inserted\", (event) => {\r\n\t\t\t\tlet heatRule = event.newValue;\r\n\t\t\t\tlet target = heatRule.target;\r\n\r\n\t\t\t\tif (target) {\r\n\t\t\t\t\tlet dataField = heatRule.dataField;\r\n\r\n\t\t\t\t\tif (!$type.hasValue(dataField)) {\r\n\t\t\t\t\t\tdataField = \"value\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet seriesDataItem = this.dataItem;\r\n\t\t\t\t\tlet property = heatRule.property;\r\n\r\n\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\tif (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\tthis.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// giveup here\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.dataItems.template.events.on(\"workingvaluechanged\", (event) => {\r\n\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\tlet dataItem = event.target;\r\n\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t// givup here\r\n\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\r\n\t\t\t\t\ttarget.adapter.add(<any>property, (value, ruleTarget, property) => {\r\n\r\n\t\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\t\tlet min = heatRule.min;\r\n\t\t\t\t\t\tlet max = heatRule.max;\r\n\r\n\t\t\t\t\t\tif (ruleTarget instanceof Sprite) {\r\n\t\t\t\t\t\t\tlet anySprite = <any>ruleTarget;\r\n\t\t\t\t\t\t\tlet propertyField = anySprite.propertyFields[property];\r\n\t\t\t\t\t\t\tif (propertyField && ruleTarget.dataItem) {\r\n\t\t\t\t\t\t\t\tlet dataContext = <any>ruleTarget.dataItem.dataContext;\r\n\t\t\t\t\t\t\t\tif (dataContext && $type.hasValue(dataContext[propertyField])) {\r\n\t\t\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>ruleTarget.dataItem;\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(minValue)) {\r\n\t\t\t\t\t\t\tminValue = seriesDataItem.values[dataField].low;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\t\tmaxValue = seriesDataItem.values[dataField].high;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\tlet fieldValues = dataItem.values[dataField];\r\n\t\t\t\t\t\t\tif (fieldValues) {\r\n\t\t\t\t\t\t\t\tlet workingValue = dataItem.getActualWorkingValue(dataField);\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\r\n\r\n\t\t\t\t\t\t\t\t\tlet percent: number;\r\n\t\t\t\t\t\t\t\t\tif (heatRule.logarithmic) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tpercent = (workingValue - minValue) / (maxValue - minValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(workingValue) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = 0.5;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// fixes problems if all values are the same\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(min)) {\r\n\t\t\t\t\t\t\t\t\t\treturn min + (max - min) * percent;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (min instanceof Color) {\r\n\t\t\t\t\t\t\t\t\t\treturn new Color($colors.interpolate(min.rgb, max.rgb, percent));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this._heatRules;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tlet heatRules;\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up bullets\r\n\t\t\tif ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\r\n\t\t\t\tfor (let i = 0, len = config.bullets.length; i < len; i++) {\r\n\t\t\t\t\tlet bullets = config.bullets[i];\r\n\t\t\t\t\tif (!$type.hasValue(bullets.type)) {\r\n\t\t\t\t\t\tbullets.type = \"Bullet\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Let's take heatRules out of the config, so that we can process\r\n\t\t\t// them later, when bullets are already there\r\n\t\t\tif ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\r\n\t\t\t\theatRules = config.heatRules;\r\n\t\t\t\tdelete config.heatRules;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t\t// Process heat rules again, when all other elements are ready\r\n\t\tif (heatRules) {\r\n\t\t\tfor (let i = 0, len = heatRules.length; i < len; i++) {\r\n\t\t\t\tlet rule = heatRules[i];\r\n\r\n\t\t\t\t// Resolve target\r\n\t\t\t\tlet target: any = this;\r\n\t\t\t\tif ($type.hasValue(rule.target) && $type.isString(rule.target)) {\r\n\r\n\r\n\t\t\t\t\t// Check if we can find this element by id\r\n\t\t\t\t\tif (this.map.hasKey(rule.target)) {\r\n\t\t\t\t\t\ttarget = this.map.getKey(rule.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet parts = rule.target.split(\".\");\r\n\t\t\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\t\t\tif (target instanceof List) {\r\n\t\t\t\t\t\t\t\tlet listitem = target.getIndex($type.toNumber(parts[x]));\r\n\t\t\t\t\t\t\t\tif (!listitem) {\r\n\t\t\t\t\t\t\t\t\ttarget = (<any>target)[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = listitem;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tconst maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\r\n\t\t\t\t\t\t\t\tif (maybeIndex) {\r\n\t\t\t\t\t\t\t\t\tif (target[maybeIndex[1]] instanceof List) {\r\n\t\t\t\t\t\t\t\t\t\ttarget = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\ttarget = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = target[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trule.target = target;\r\n\r\n\t\t\t\t// Resolve colors and percents\r\n\t\t\t\tif ($type.hasValue(rule.min)) {\r\n\t\t\t\t\trule.min = this.maybeColorOrPercent(rule.min);\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.hasValue(rule.max)) {\r\n\t\t\t\t\trule.max = this.maybeColorOrPercent(rule.max);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig({\r\n\t\t\t\theatRules: heatRules\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns visibility value\r\n\t * @ignore\r\n\t */\r\n\t/*\r\n\t\tprotected getVisibility(): boolean {\r\n\t\t\tlet hidden = this.getPropertyValue(\"hidden\");\r\n\t\t\tif (hidden) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn super.getVisibility();\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"heatRules\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"heatRules\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Series\"] = Series;\r\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;\r\n","/**\r\n * Serial chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { IListEvents, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SerialChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SerialChartDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SerialChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SerialChart]].\r\n */\r\nexport interface ISerialChartDataFields extends IChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SerialChart]]\r\n */\r\nexport interface ISerialChartProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * A set of colors to be used for chart elements, like Series, Slices, etc.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * A set of patterns to use for fills, like Series, Slices, etc.\r\n\t *\r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SerialChart]].\r\n */\r\nexport interface ISerialChartEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SerialChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISerialChartAdapters extends IChartAdapters, ISerialChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all series-based charts, like XY, Pie, etc.\r\n *\r\n * Is not useful on its own.\r\n *\r\n * @see {@link ISerialChartEvents} for a list of available Events\r\n * @see {@link ISerialChartAdapters} for a list of available Adapters\r\n */\r\nexport class SerialChart extends Chart {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ISerialChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISerialChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISerialChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISerialChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: Series;\r\n\r\n\t/**\r\n\t * Holds a list of [[Series]] displayed on the chart.\r\n\t */\r\n\tprotected _series: ListTemplate<this[\"_seriesType\"]>\r\n\r\n\t/**\r\n\t * Holds the reference to the container actual series are drawn in.\r\n\t */\r\n\tpublic readonly seriesContainer: Container;\r\n\r\n\t/**\r\n\t * Holds a reference to the container series' bullets are drawn in.\r\n\t */\r\n\tpublic readonly bulletsContainer: Container;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChart\";\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\r\n\t\tthis._usesData = false;\r\n\r\n\t\t// Create a container for series\r\n\t\tlet seriesContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tseriesContainer.shouldClone = false;\r\n\t\tseriesContainer.width = percent(100);\r\n\t\tseriesContainer.height = percent(100);\r\n\t\tseriesContainer.isMeasured = false;\r\n\t\tseriesContainer.layout = \"none\";\r\n\t\tseriesContainer.zIndex = 2;\r\n\t\tthis.seriesContainer = seriesContainer;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet bulletsContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.zIndex = 3;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this.colors) {\r\n\t\t\tthis.colors.dispose();\r\n\t\t}\r\n\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Serial chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's series.\r\n\t *\r\n\t * @return Chart's series\r\n\t */\r\n\tpublic get series(): ListTemplate<this[\"_seriesType\"]> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new ListTemplate<this[\"_seriesType\"]>(this.createSeries());\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._series, false));\r\n\t\t\tthis._disposers.push(this._series.template);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<Series>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(series);\r\n\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\tdataUser.invalidateDataItems();\r\n\t\t})\r\n\r\n\t\tif (series.autoDispose) {\r\n\t\t\tseries.dispose();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tseries.parent = undefined;\r\n\t\t\tseries.bulletsContainer.parent = undefined;\r\n\t\t}\r\n\t\t//this.feedLegend();\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet dataItems = this.legend.dataItems;\r\n\t\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem && dataItem.dataContext == series) {\r\n\t\t\t\t\tlegend.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = legend.data.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet di = legend.data[i];\r\n\t\t\t\tif (di && di == series) {\r\n\t\t\t\t\t$array.remove(legend.data, di);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<Series>[\"inserted\"]): void {\r\n\t\tlet series: Series = event.newValue;\r\n\t\tif (series.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tseries.chart = this;\r\n\t\tseries.parent = this.seriesContainer;\r\n\r\n\t\tseries.bulletsContainer.parent = this.bulletsContainer;\r\n\r\n\t\tthis._dataUsers.moveValue(series);\r\n\t\tseries.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(series);\r\n\t\t}))\r\n\r\n\t\tthis.handleSeriesAdded2(series);\r\n\t\tthis.handleLegendSeriesAdded(series);\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series:Series){\r\n\t\tif (!series.hiddenInLegend) {\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.addData(series);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2(series: Series) {\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\tthis._disposers.push(\r\n\t\t\t\t// on exit only as data is usually passed after push\r\n\t\t\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\t\t\tif (!series.data || series.data.length == 0) {\r\n\t\t\t\t\t\tseries.data = this.data;\r\n\t\t\t\t\t\tif (series.showOnInit) {\r\n\t\t\t\t\t\t\tseries.reinit()\r\n\t\t\t\t\t\t\tseries.setPropertyValue(\"showOnInit\", false);\r\n\t\t\t\t\t\t\tseries.showOnInit = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(!series.isDisposed()) {\r\n\t\t\t\t\t\t\tseries.events.once(\"datavalidated\", () => {\r\n\t\t\t\t\t\t\t\tif (series.data == this.data) {\r\n\t\t\t\t\t\t\t\t\t(<any>series)._data = [];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for this chart type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new Series();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's color list.\r\n\t *\r\n\t * This list can be used by a number of serial items, like applying a new\r\n\t * color for each Series added. Or, applying a new color for each slice\r\n\t * of a Pie chart.\r\n\t *\r\n\t * Please see [[ColorSet]] for information on how you can set up to generate\r\n\t * unique colors.\r\n\t *\r\n\t * A theme you are using may override default pre-defined colors.\r\n\t *\r\n\t * @param value Color list\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color list\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[SerialChart]].\r\n\t *\r\n\t * @param source Source SerialChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.series.copyFrom(source.series);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n\t */\r\n\tpublic appear() {\r\n\t\tsuper.appear();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.showOnInit && series.inited) {\r\n\t\t\t\tseries.appear();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;\r\n","/**\r\n * Axis break module\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { IWavedShape } from \"../../core/defs/IWavedShape\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t */\r\n\tbreakSize?: number;\r\n\r\n\t/**\r\n\t * Starting value.\r\n\t */\r\n\tstartValue?: number;\r\n\r\n\t/**\r\n\t * End value.\r\n\t */\r\n\tendValue?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines [[AxisBreak]] adapters.\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisBreakAdapters extends IContainerAdapters, IAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisBreak extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: Axis;\r\n\r\n\t/**\r\n\t * Reference to parent Axis.\r\n\t */\r\n\tprotected _axis = new MutableValueDisposer<this[\"_axisType\"]>();\r\n\r\n\t/**\r\n\t * A reference to starting line element.\r\n\t */\r\n\tprotected _startLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to ending line element.\r\n\t */\r\n\tprotected _endLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to fill shape.\r\n\t */\r\n\tprotected _fillShape: IWavedShape;\r\n\r\n\t/**\r\n\t * A list of axis data items which fall within this break.\r\n\t */\r\n\tpublic dataItems: List<AxisDataItem> = new List<AxisDataItem>();\r\n\r\n\t/**\r\n\t * Adjusted start value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedStartValue: number;\r\n\r\n\t/**\r\n\t * Adjusted end value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedEndValue: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisBreak\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.breakSize = 0.01;\r\n\t\tthis.marginLeft = -5;\r\n\t\tthis.marginRight = -5;\r\n\t\tthis.marginTop = -5;\r\n\t\tthis.marginBottom = -5;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create elements\r\n\t\t// (these won't be used actually, just for setting properties)\r\n\t\tlet fillShape = new WavedLine();\r\n\t\tfillShape.fill = interfaceColors.getFor(\"background\");\r\n\t\tfillShape.stroke = color();\r\n\t\tfillShape.fillOpacity = 0.9;\r\n\t\tfillShape.zIndex = 0;\r\n\t\tthis._fillShape = fillShape;\r\n\r\n\t\tlet startLine = new WavedLine();\r\n\t\tstartLine.fill = color();\r\n\t\tstartLine.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tstartLine.strokeOpacity = 0.3;\r\n\t\tstartLine.zIndex = 1;\r\n\t\tthis._startLine = startLine;\r\n\r\n\t\tlet endLine = new WavedLine();\r\n\t\tendLine.fill = color();\r\n\t\tendLine.stroke = color(\"#000000\");// interfaceColors.getFor(\"grid\");\r\n\t\tendLine.strokeOpacity = 0.3;\r\n\t\tendLine.zIndex = 2;\r\n\t\tthis._endLine = endLine;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the starting line of the break.\r\n\t *\r\n\t * @param sprite  Element\r\n\t */\r\n\tpublic set startLine(sprite: IWavedShape) {\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\t\tthis._startLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get startLine(): IWavedShape {\r\n\t\treturn this._startLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the end line of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set endLine(sprite: IWavedShape) {\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t\tthis._endLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get endLine(): IWavedShape {\r\n\t\treturn this._endLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for fill of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set fillShape(sprite: IWavedShape) {\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tthis._fillShape = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get fillShape(): IWavedShape {\r\n\t\treturn this._fillShape;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a break element (e.g. lines, fill) to the break, which is\r\n\t * [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite Element to add\r\n\t */\r\n\tpublic addBreakSprite(sprite: IWavedShape) {\r\n\t\tsprite.parent = this;\r\n\t\tsprite.isMeasured = false;\r\n\t\tthis._disposers.push(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis this Break is associated with.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: this[\"_axisType\"]) {\r\n\t\tif (this._axis.get() !== axis) {\r\n\t\t\tthis._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\r\n\t\t\taxis.renderer.createBreakSprites(this);\r\n\r\n\t\t\t// this can't go to copyFrom, as axis is set later\r\n\t\t\tlet breakTemplate: AxisBreak = axis.axisBreaks.template;\r\n\r\n\t\t\tthis.startLine.copyFrom(breakTemplate.startLine);\r\n\t\t\tthis.endLine.copyFrom(breakTemplate.endLine);\r\n\t\t\tthis.fillShape.copyFrom(breakTemplate.fillShape);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): this[\"_axisType\"] {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t * @param value  Relative axis break\r\n\t */\r\n\tpublic set breakSize(value: number) {\r\n\t\tif (this.setPropertyValue(\"breakSize\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative axis break\r\n\t */\r\n\tpublic get breakSize(): number {\r\n\t\treturn this.getPropertyValue(\"breakSize\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's start.\r\n\t *\r\n\t * @return Start point\r\n\t */\r\n\tpublic get startPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.startPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's end.\r\n\t *\r\n\t * @return End point\r\n\t */\r\n\tpublic get endPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.endPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break starts.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break ends.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\t\trenderer.updateBreakElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A starting value for the break.\r\n\t *\r\n\t * @param value  Starting value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Starting value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\treturn this.getPropertyValue(\"startValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * An end value for the break.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.getPropertyValue(\"endValue\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;\r\n","/**\r\n * Base class for all Axis\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem, IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\n\r\n// Charts\r\nimport { Chart } from \"../Chart\";\r\n\r\n// Series\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\n\r\n// Elements\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Tooltip, PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { PointedRectangle } from \"../../core/elements/PointedRectangle\";\r\n\r\n// Types\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n// Utils\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Axis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class AxisDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Reference to a related [[Grid]] element.\r\n\t */\r\n\tprotected _grid: Grid;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisTick]] element.\r\n\t */\r\n\tprotected _tick: AxisTick;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisLabel]] element.\r\n\t */\r\n\tprotected _label: AxisLabel;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisFill]] element.\r\n\t */\r\n\tprotected _axisFill: AxisFill;\r\n\r\n\t/**\r\n\t * A mask for axis. We're using [[AxisFill]] since the mask, basically, has\r\n\t * the same shape and features.\r\n\t */\r\n\tprotected _mask: AxisFill;\r\n\r\n\t/**\r\n\t * Container which might be used to hold some extra items, like series\r\n\t * segments when data item is used for axis range.\r\n\t */\r\n\tprotected _contents: Container;\r\n\r\n\t/**\r\n\t * A text to be used as label for this data item.\r\n\t */\r\n\tprotected _text: string;\r\n\r\n\t/**\r\n\t * Holds a physical position of the grid line associated with this data item,\r\n\t * so that it can be used when measuring distance between points, and hiding\r\n\t * some of them so they don't overlap.\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * If the data item is within an existing [[AxisBreak]] this property will\r\n\t * hold a reference to that [[AxisBreak]].\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Axis;\r\n\r\n\t/**\r\n\t * Used to distinguish from real data points and those data items that are\r\n\t * used for ranges, like `series.axisRanges` or `axis.axisRanges`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic isRange: boolean;\r\n\r\n\t/**\r\n\t * relative position of data item on axis\r\n\t */\r\n\tpublic position: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullet: Sprite;\r\n\r\n\t/**\r\n\t * Allows hiding axis item (tick, label, grid) if it is closer to axis\r\n\t * beginning than this relative position (0-1).\r\n\t *\r\n\t * For axis labels it overrides `minLabelPosition` if set.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t * axis.dataItems.template.minPosition = 0.2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t * axis.dataItems.template.minPosition = 0.2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t *     \"dataItems\": {\r\n\t *       \"minPosition\": 0.2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * \r\n\t * @since 4.5.11\r\n\t */\r\n\tpublic minPosition?: number;\r\n\r\n\t/**\r\n\t * Allows hiding axis item (tick, label, grid) if it is closer to axis\r\n\t * end than this relative position (0-1).\r\n\t *\r\n\t * For axis labels it overrides `maxLabelPosition` if set.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Hide all ticks and labels closer than 20% to axis end.\r\n\t * axis.dataItems.template.maxPosition = 0.8;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Hide all ticks and labels closer than 20% to axis end.\r\n\t * axis.dataItems.template.maxPosition = 0.8;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     // Hide all ticks and labels closer than 20% to axis end.\r\n\t *     \"dataItems\": {\r\n\t *       \"maxPosition\": 0.8\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * \r\n\t * @since 4.5.11\r\n\t */\r\n\tpublic maxPosition?: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Actual index of the axis data item.\r\n\t * \r\n\t * @since 4.7.8\r\n\t */\r\n\tpublic itemIndex: number;\r\n\r\n\t/**\r\n\t * A [[Grid]] element associated with this data item.\r\n\t *\r\n\t * If there is no grid element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param grid  Grid element\r\n\t */\r\n\tpublic set grid(grid: Grid) {\r\n\t\tif (this._grid && this._grid != grid) {\r\n\t\t\t$array.remove(this.sprites, this._grid);\r\n\t\t\tthis._grid.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (grid) {\r\n\t\t\tif (grid.dataItem && grid.dataItem != this) {\r\n\t\t\t\t$array.remove(grid.dataItem.sprites, grid);\r\n\t\t\t\tgrid.dataItem.grid = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(grid);\r\n\t\t}\r\n\t\tthis._grid = grid;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grid element\r\n\t */\r\n\tpublic get grid(): Grid {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: Grid;\r\n\t\t\t\tlet grid: Grid;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.grid;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.grid.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = component.renderer.grid.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.grid.removeValue(grid);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.grid = grid;\r\n\t\t\t\tgrid.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(grid);\r\n\t\t\t\tgrid.axis = this.component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisTick]] element associated with this data item.\r\n\t *\r\n\t * If there is no tick element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param tick  Tick element\r\n\t */\r\n\tpublic set tick(tick: AxisTick) {\r\n\t\tif (this._tick && this._tick != tick) {\r\n\t\t\t$array.remove(this.sprites, this._tick);\r\n\t\t\tthis._tick.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (tick) {\r\n\t\t\tif (tick.dataItem && tick.dataItem != this) {\r\n\t\t\t\t$array.remove(tick.dataItem.sprites, tick);\r\n\t\t\t\ttick.dataItem.tick = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(tick);\r\n\t\t}\r\n\t\tthis._tick = tick;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): AxisTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisTick;\r\n\t\t\t\tlet tick: AxisTick;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.tick;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.ticks.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = component.renderer.ticks.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.ticks.removeValue(tick);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tick = tick;\r\n\t\t\t\ttick.axis = this.component;\r\n\t\t\t\ttick.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(tick);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisLabel]] element associated with this data item.\r\n\t *\r\n\t * If there is no label element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set label(label: AxisLabel) {\r\n\t\tif (this._label && this._label != label) {\r\n\t\t\t$array.remove(this.sprites, this._label);\r\n\t\t\tthis._label.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (label) {\r\n\t\t\tif (label.dataItem && label.dataItem != this) {\r\n\t\t\t\t$array.remove(label.dataItem.sprites, label);\r\n\t\t\t\tlabel.dataItem.label = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(label);\r\n\t\t}\r\n\t\tthis._label = label;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): AxisLabel {\r\n\t\tif (!this._label) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisLabel;\r\n\t\t\t\tlet label: AxisLabel;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.label;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.labels.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = component.renderer.labels.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.labels.removeValue(label);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposers.push(label);\r\n\t\t\t\tthis.label = label;\r\n\t\t\t\tlabel.shouldClone = false;\r\n\t\t\t\tlabel.axis = this.component;\r\n\t\t\t\tlabel.virtualParent = component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisFill]] associated element with this data item.\r\n\t *\r\n\t * If there is no fill element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set axisFill(axisFill: AxisFill) {\r\n\t\tif (this._axisFill && this._axisFill != axisFill) {\r\n\t\t\t$array.remove(this.sprites, this._axisFill);\r\n\t\t\tthis._axisFill.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.dataItem && axisFill.dataItem != this) {\r\n\t\t\t\t$array.remove(axisFill.dataItem.sprites, axisFill);\r\n\t\t\t\taxisFill.dataItem.axisFill = undefined;\r\n\t\t\t}\r\n\t\t\taxisFill.axis = this.component;\r\n\t\t\tthis.addSprite(axisFill);\r\n\t\t}\r\n\t\tthis._axisFill = axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get axisFill(): AxisFill {\r\n\t\tif (!this._axisFill) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisFill;\r\n\t\t\t\tlet axisFill: AxisFill;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.axisFill;\r\n\t\t\t\t\tif (!this.isTemplate && template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.axisFills.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = component.renderer.axisFills.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.axisFills.removeValue(axisFill);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.axisFill = axisFill;\r\n\t\t\t\taxisFill.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(axisFill);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * Text to be used as data item's label.\r\n\t *\r\n\t * @param text Text label\r\n\t */\r\n\tpublic set text(text: string) {\r\n\t\tthis._text = text;\r\n\t\tif (this._label) { // do not use getter, it will create unwanted instances!\r\n\t\t\tthis._label.text = text;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Text label\r\n\t */\r\n\tpublic get text(): string {\r\n\t\treturn this._text;\r\n\t}\r\n\r\n\t/**\r\n\t * Data item's mask.\r\n\t *\r\n\t * @return Mask\r\n\t */\r\n\tpublic get mask(): AxisFill {\r\n\t\treturn this._mask;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[Container]] to place all visual elements, related to data item\r\n\t * in.\r\n\t *\r\n\t * If there is no Container, a new one is created.\r\n\t *\r\n\t * @return Contents container\r\n\t */\r\n\tpublic get contents(): Container {\r\n\t\tif (!this._contents) {\r\n\t\t\tlet contents = new Container();\r\n\t\t\tthis.addSprite(contents);\r\n\t\t\tcontents.isMeasured = false;\r\n\t\t\tthis._contents = contents;\r\n\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\t\t\t\tlet mask: AxisFill = component.renderer.createFill(this.component);\r\n\t\t\t\tmask.disabled = false;\r\n\t\t\t\tmask.axis = component;\r\n\t\t\t\tthis.addSprite(mask);\r\n\t\t\t\tthis._mask = mask;\r\n\t\t\t\tcontents.mask = mask;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._contents;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisBreak]] this data item falls within.\r\n\t *\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic set axisBreak(axisBreak: this[\"_axisBreak\"]) {\r\n\t\tif (this._axisBreak) {\r\n\t\t\tthis._axisBreak.dataItems.removeValue(this);\r\n\t\t}\r\n\t\tif (axisBreak) {\r\n\t\t\taxisBreak.dataItems.push(this);\r\n\t\t}\r\n\t\tthis._axisBreak = axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis break\r\n\t */\r\n\tpublic get axisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn this._axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.validateDataElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Appends data item's elements to the parent [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic appendChildren() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.appendDataItem(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if data item has particular property set.\r\n\t *\r\n\t * @param prop  Property name\r\n\t * @return Property set?\r\n\t */\r\n\tprotected hasProperty(prop: string): boolean {\r\n\t\treturn prop == \"component\" ? true : super.hasProperty(prop);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[AxisDataItem]].\r\n\t *\r\n\t * @param source Source AxisDataItem\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.text = source.text;\r\n\t\tif (source.bullet) {\r\n\t\t\tthis.bullet = source.bullet.clone();\r\n\t\t}\r\n\r\n\t\tthis.minPosition = source.minPosition;\r\n\t\tthis.maxPosition = source.maxPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t\tif (this._contents) {\r\n\t\t\tthis._contents.visible = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set it to an instance of any [[Sprite]]. It will be displayed as an axis\r\n\t * bullet in the middle of the cell, or specific value.\r\n\t *\r\n\t * If you need position bullet relatively to the cell, use [[AxisBullet]]\r\n\t * instead. It has a `location` property which can be used to indicate\r\n\t * precise relative location within cell/range.\r\n\t *\r\n\t * Also, [[AxisBullet]] is a [[Container]] so you can push any other element\r\n\t * into it.\r\n\t *\r\n\t * NOTE: `location` is relative to the parent axis range's scope, i.e.\r\n\t * between its `date` and `endDate` for [[DateAxis]], or `value`/`endValue`\r\n\t * ([[ValueAxis]]), or `category`/`endCategory` ([[categoryAxis]]).\r\n\t * \r\n\t * ```TypeScript\r\n\t * let range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * \r\n\t * let flag = new am4plugins_bullets.FlagBullet();\r\n\t * flag.label.text = \"Hello\";\r\n\t *\r\n\t * range.bullet = flag;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * \r\n\t * var flag = new am4plugins_bullets.FlagBullet();\r\n\t * flag.label.text = \"Hello\";\r\n\t *\r\n\t * range.bullet = flag;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     // ...\r\n\t *     \"axisRanges\": [{\r\n\t *       \"date\": new Date(2018, 0, 5),\r\n\t *       \"bullet: {\r\n\t *         \"type\": \"FlagBullet\",\r\n\t *         \"label\": {\r\n\t *           \"text\": \"Hello\"\r\n\t *         }\r\n\t *       }\r\n\t *     }]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.5.9\r\n\t * @param  value  Bullet\r\n\t */\r\n\tpublic set bullet(value: Sprite) {\r\n\t\tif (this._bullet && this._bullet != value) {\r\n\t\t\t$array.remove(this.sprites, this._bullet);\r\n\t\t\tthis._bullet.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tthis._bullet = value;\r\n\t\tif (value) {\r\n\t\t\tthis.addSprite(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bullet\r\n\t */\r\n\tpublic get bullet(): Sprite {\r\n\t\treturn this._bullet;\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[AxisDataItem]]\r\n * Includes both the [[DataItemAdapter]] definitions and properties\r\n * @see {@link DataItemAdapter}\r\n */\r\nexport interface IAxisDataItemAdapters extends IDataItemAdapters {\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines named positions for data item's location within [[Axis]].\r\n */\r\nexport enum AxisItemLocation {\r\n\tStart = 0,\r\n\tMiddle = 0.5,\r\n\tEnd = 1\r\n}\r\n\r\n/**\r\n * Defines data fields for [[Axis]].\r\n */\r\nexport interface IAxisDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Axis]].\r\n */\r\nexport interface IAxisProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - None of the first cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the first cell is shown.\r\n\t * * 1 - Full first cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tendLocation?: number;\r\n\r\n\t/**\r\n\t * Indicates if cusor's tooltip should be shown on this Axis.\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n\t * and vice versa: when axis is zoomed out completely, zoom out button is\r\n\t * hidden.\r\n\t *\r\n\t * Setting this to `false` will disable this behavior. Zooming in our out\r\n\t * this axis will not reveal or hide zoom out button.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\ttoggleZoomOutButton?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if axis' tooltip should be hidden while axis range is animating\r\n\t * (zooming)\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @default true\r\n\t */\r\n\thideTooltipWhileZooming?: boolean;\r\n\r\n\r\n\tzoomable?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Axis]].\r\n */\r\nexport interface IAxisEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * Invoked when available axis lenght changes, e.g. after resizing the whole\r\n\t * chart.\r\n\t */\r\n\tlengthchanged: {}\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Axis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisAdapters extends IComponentAdapters, IAxisProperties {\r\n\t/**\r\n\t * Applied to the tooltip text before it is shown.\r\n\t */\r\n\tgetTooltipText: string;\r\n\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Axis elements.\r\n *\r\n * @see {@link IAxisEvents} for a list of available Events\r\n * @see {@link IAxisAdapters} for a list of available Adapters\r\n */\r\nexport class Axis<T extends AxisRenderer = AxisRenderer> extends Component {\r\n\r\n\t/**\r\n\t * Defines list of data fields.\r\n\t */\r\n\tpublic _dataFields: IAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the [[DataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A list of Axis Ranges.\r\n\t */\r\n\tprotected _axisRanges: ListTemplate<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisEvents;\r\n\r\n\t/**\r\n\t * A [[Label]] instance that is used for Axis title label.\r\n\t */\r\n\tprotected _title: Label;\r\n\r\n\t/**\r\n\t * \"X\", \"Y\", etc.\r\n\t *\r\n\t * This is needed so that Axis knows which of the values from series' data\r\n\t * items it should use.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisLetter: string;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tprotected _chart: Chart;\r\n\r\n\t/**\r\n\t * A type for renderer used for this Axis.\r\n\t */\r\n\tpublic _renderer: T;\r\n\r\n\t/**\r\n\t * Number of Grid elements on the axis.\r\n\t */\r\n\tprotected _gridCount: number = 10;\r\n\r\n\t/**\r\n\t * A list of [[XYSeries]] that are using this Axis.\r\n\t */\r\n\tprotected _series: List<XYSeries> = new List<XYSeries>();\r\n\r\n\t/**\r\n\t * Holds the length of the Axis, so that we can check if it changed after\r\n\t * other changes and we need to update layouts.\r\n\t */\r\n\tprotected _prevLength: number;\r\n\r\n\t/**\r\n\t * A list of Axis Breaks associated with this Axis.\r\n\t */\r\n\tprotected _axisBreaks: SortedListTemplate<this[\"_axisBreak\"]>;\r\n\r\n\t/**\r\n\t * A reference to the Iterator for Axis' data items.\r\n\t */\r\n\tprotected _dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A name of the data field this Axis looks for its data in, e.g. \"category\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisFieldName: string;\r\n\r\n\t// we save these values so that cursur could use them if axis line is a fill\r\n\r\n\t/**\r\n\t * [currentItemStartPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemStartPoint: IPoint;\r\n\r\n\t/**\r\n\t * [currentItemEndPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemEndPoint: IPoint;\r\n\r\n\tprotected _tooltipPosition: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic relativePositionSprite?: Sprite;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem and its index as\r\n\t * parameters.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t *\r\n\t * For example, you can set it up to highlight only weekends on a\r\n\t * [[DateAxis]].\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"], index?: number): void {\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = dataItem.index;\r\n\t\t}\r\n\t\tif (index / 2 == Math.round(index / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\tdataItem.axisFill.opacity = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.opacity = 1;\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Full length of the axis, in pixels.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisFullLength: number;\r\n\r\n\t/**\r\n\t * Ghost label is used to prevent chart shrinking/expanding when zooming or\r\n\t * when data is invalidated. You can set custom text on it so that it would\r\n\t * be bigger/smaller,\r\n\t */\r\n\tpublic ghostLabel: AxisLabel;\r\n\r\n\t/**\r\n\t * Specifies if axis should be automatically disposed when removing from\r\n\t * chart's axis list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _axisItemCount: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tif (this.constructor === Axis) {\r\n\t\t\tthrow new Error(\"'Axis' cannot be instantiated directly. Please use a specific axis type.\");\r\n\t\t}\r\n\r\n\t\tthis.hideTooltipWhileZooming = true;\r\n\t\tthis.minWidth = 0.0001;\r\n\t\tthis.minHeight = 0.0001;\r\n\t\tthis.className = \"Axis\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", true);\r\n\t\tthis.toggleZoomOutButton = true;\r\n\t\tthis.zoomable = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create title\r\n\t\tthis.title = new Label();\r\n\t\tthis.title.shouldClone = false;\r\n\t\tthis._disposers.push(this.title);\r\n\t\tthis.setPropertyValue(\"startLocation\", 0);\r\n\t\tthis.setPropertyValue(\"endLocation\", 1);\r\n\r\n\t\t// Data item iterator\r\n\t\tthis._dataItemsIterator = new $iter.ListIterator<this[\"_dataItem\"]>(this.dataItems, () => this.dataItems.create());\r\n\t\tthis._dataItemsIterator.createNewItems = true;\r\n\r\n\t\t// Create tooltip\r\n\t\tlet tooltip: Tooltip = new Tooltip();\r\n\t\tthis._disposers.push(tooltip);\r\n\t\ttooltip.label.padding(5, 10, 5, 10);\r\n\t\ttooltip.background.pointerLength = 5;\r\n\t\ttooltip.fitPointerToBounds = true;\r\n\t\ttooltip.background.filters.clear();\r\n\r\n\t\t// Set virtual parentfor the tooltip so that it can properly inheirt\r\n\t\t// formatters from the axis.\r\n\t\ttooltip.virtualParent = this;\r\n\r\n\t\t// Create background element for the tooltip\r\n\t\tlet background: PointedRectangle = <PointedRectangle>tooltip.background;\r\n\t\tbackground.cornerRadius = 0;\r\n\t\tbackground.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tbackground.stroke = background.fill;\r\n\t\tbackground.strokeWidth = 1;\r\n\t\tbackground.fillOpacity = 1;\r\n\t\ttooltip.label.fill = interfaceColors.getFor(\"alternativeText\");\r\n\r\n\t\tthis.tooltip = tooltip;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.readerHidden = true;\r\n\r\n\t\tthis.events.on(\"rangechangestarted\", () => {\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.hideTooltipWhileZooming) {\r\n\t\t\t\t\tseries.tooltip.hide();\r\n\t\t\t\t\tseries.tooltip.preventShow = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (this.hideTooltipWhileZooming) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t\tthis.tooltip.preventShow = true;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.events.on(\"rangechangeended\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.hideTooltipWhileZooming) {\r\n\t\t\t\t\tseries.tooltip.hide();\r\n\t\t\t\t\tseries.tooltip.preventShow = false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (this.hideTooltipWhileZooming) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t\tthis.tooltip.preventShow = false;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new AxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates layout.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLayout(): void {\r\n\t\tsuper.invalidateLayout();\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidateLayout();\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates series of this axis.\r\n\t */\r\n\tpublic invalidateSeries(): void {\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Override to cancel super call for data element validation.\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tthis._axisItemCount = 0;\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tthis.renderer.updateLabelElement(this.ghostLabel, this.start, this.end);\r\n\t\t\tthis.ghostLabel.validate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the number of grid items on the axis.\r\n\t */\r\n\tprotected updateGridCount() {\r\n\t\tif (this.renderer) {\r\n\t\t\tlet gridCount = this.axisLength / this.renderer.minGridDistance;\r\n\t\t\tif (gridCount != this._gridCount) {\r\n\t\t\t\tthis._gridCount = gridCount;\r\n\t\t\t\tthis.clearCache();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\r\n\t\tthis.axisFullLength = this.axisLength / (this.end - this.start);\r\n\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateGridCount();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\trenderer.updateAxisLine();\r\n\t\t\trenderer.updateTooltip();\r\n\t\t\trenderer.updateBaseGridElement();\r\n\t\t}\r\n\r\n\t\tif (this._prevLength != this.axisLength) {\r\n\t\t\tthis.dispatchImmediately(\"lengthchanged\");\r\n\t\t\tthis._prevLength = this.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a data item to the Axis.\r\n\t *\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic appendDataItem(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\r\n\t\tlet tick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\tif (tick.above) {\r\n\t\t\t\ttick.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.label) {\r\n\t\t\tdataItem.label.parent = renderer;\r\n\t\t}\r\n\r\n\t\tlet axisFill = dataItem.axisFill;\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.above) {\r\n\t\t\t\taxisFill.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\taxisFill.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\tif (grid.above) {\r\n\t\t\t\tgrid.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgrid.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\tdataItem.bullet.parent = renderer.bulletsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws Axis' related items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.validateLayout();\r\n\r\n\t\tthis.renderer.updateGridContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Redars Axis ranges.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateAxisRanges(): void {\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tthis.appendDataItem(axisRange);\r\n\t\t\tthis.validateDataElement(axisRange);\r\n\t\t\tif (axisRange.grid) {\r\n\t\t\t\taxisRange.grid.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.tick) {\r\n\t\t\t\taxisRange.tick.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.axisFill) {\r\n\t\t\t\taxisRange.axisFill.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.label) {\r\n\t\t\t\taxisRange.label.validate();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis breaks, so they are redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateBreaks(): void {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\t$iter.each(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\taxisBreak.invalidate();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Associates an Axis break with this Axis, after it is inserted into\r\n\t * `axisBreaks`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic processBreak(event: IListEvents<this[\"_axisBreak\"]>[\"inserted\"]) {\r\n\t\tlet axisBreak: this[\"_axisBreak\"] = event.newValue;\r\n\t\taxisBreak.parent = this.renderer.breakContainer;\r\n\t\taxisBreak.axis = this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a [[XYSeries]] element with this Axis.\r\n\t *\r\n\t * Returns a [[Disposer]] for all events, added to Series for watching\r\n\t * changes in Axis, and vice versa.\r\n\t * @ignore\r\n\t * @param series  Series\r\n\t * @return Event disposer\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\tthis.series.moveValue(series);\r\n\r\n\t\treturn new MultiDisposer([\r\n\t\t\tnew Disposer(() => {\r\n\t\t\t\tthis.series.removeValue(series);\r\n\t\t\t}),\r\n\r\n\t\t\tthis.events.on(\"lengthchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"lengthchanged\", series.createMask, series, false),\r\n\t\t\tthis.events.on(\"startchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"endchanged\", series.invalidate, series, false),\r\n\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\t\t\t\r\n\r\n\t\t\t// TODO should these be disposed of ?\r\n\t\t\t//series.events.on(\"datavalidated\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"visibilitychanged\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"hidden\", this.processSeriesDataItems, this)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisRenderer]] to be used to render this Axis.\r\n\t *\r\n\t * Please note that most of the settings, related to Axis' appearance are set\r\n\t * via its renderer. Not directly on the Axis.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info\r\n\t * @param renderer  Renderer\r\n\t */\r\n\tpublic set renderer(renderer: this[\"_renderer\"]) {\r\n\t\tif (renderer != this._renderer) {\r\n\t\t\tthis._renderer = renderer;\r\n\t\t\trenderer.chart = this.chart;\r\n\t\t\trenderer.axis = this;\r\n\t\t\trenderer.parent = this;\r\n\t\t\tthis.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only\r\n\t\t\tthis.initRenderer();\r\n\r\n\t\t\tthis._disposers.push(renderer.gridContainer.events.on(\"maxsizechanged\", this.invalidate, this, false));\r\n\r\n\t\t\tlet ghostLabel = this.renderer.labels.create();\r\n\t\t\tthis._disposers.push(ghostLabel);\r\n\t\t\tghostLabel.dataItem = this.dataItems.template.clone(); // just for the adapters not to fail\r\n\t\t\tghostLabel.text = \"L\";\r\n\t\t\tghostLabel.parent = this.renderer;\r\n\t\t\tghostLabel.shouldClone = false;\r\n\t\t\tghostLabel.fillOpacity = 0;\r\n\t\t\tghostLabel.opacity = 0;\r\n\t\t\tghostLabel.strokeOpacity = 0;\r\n\t\t\tghostLabel.interactionsEnabled = false;\r\n\t\t\tghostLabel.validate();\r\n\r\n\t\t\tthis.ghostLabel = ghostLabel;\r\n\r\n\t\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\t\tghostLabel.text = \"L\";\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Renderer\r\n\t */\r\n\tpublic get renderer(): this[\"_renderer\"] {\r\n\t\treturn this._renderer;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a relative position to angle. (for circular axes)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\treturn this.renderer.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\treturn this.renderer.pointToPosition(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position to coordinate.\r\n\t *\r\n\t * @since 4.7.15\r\n\t * @param position (0-1)\r\n\t * @return coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\treturn this.renderer.positionToCoordinate(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start  [description]\r\n\t * @param end    [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: any, end: any): string {\r\n\t\treturn this.renderer.getPositionRangePath(start, end);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic anyToPosition(value: any): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: any): IOrientationPoint {\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition [description]\r\n\t * @param endPosition   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tif (this.renderer) {\r\n\t\t\treturn this.renderer.getPositionRangePath(startPosition, endPosition);\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Actual axis length in pixels.\r\n\t *\r\n\t * @return Axis length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tif (this.renderer) {\r\n\t\t\treturn this.renderer.axisLength;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if axis should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"cursorTooltipEnabled\", value)) {\r\n\t\t\tif (value && this.renderer) {\r\n\t\t\t\tthis.renderer.updateTooltip();\r\n\t\t\t}\r\n\t\t\telse if (this.tooltip) {\r\n\t\t\t\tthis.tooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n\t * and vice versa: when axis is zoomed out completely, zoom out button is\r\n\t * hidden.\r\n\t *\r\n\t * Setting this to `false` will disable this behavior. Zooming in our out\r\n\t * this axis will not reveal or hide zoom out button.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.6.2\r\n\t * @param  value  Toggle zoom out button?\r\n\t */\r\n\tpublic set toggleZoomOutButton(value: boolean) {\r\n\t\tthis.setPropertyValue(\"toggleZoomOutButton\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Toggle zoom out button?\r\n\t */\r\n\tpublic get toggleZoomOutButton(): boolean {\r\n\t\treturn this.getPropertyValue(\"toggleZoomOutButton\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip(duration?: number): void {\r\n\t\tsuper.hideTooltip(duration);\r\n\t\tthis._tooltipPosition = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\r\n\t\tif (!tooltip || this.dataItems.length <= 0) {\r\n\t\t\tthis._tooltipPosition = undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!local) {\r\n\t\t\t\tposition = this.toAxisPosition(position);\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(position) || position < this.start || position > this.end) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t\tthis._tooltipPosition = undefined;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.renderer;\r\n\r\n\t\t\t//@todo: think of how to solve this better\r\n\t\t\tif (!tooltip.parent) {\r\n\t\t\t\ttooltip.parent = this.tooltipContainer;\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltipLocation = renderer.tooltipLocation;\r\n\r\n\t\t\tlet startPosition: number = this.getCellStartPosition(position);\r\n\t\t\tlet endPosition: number = this.getCellEndPosition(position);\r\n\r\n\t\t\tif (this.tooltipPosition == \"fixed\") {\r\n\t\t\t\tposition = startPosition + (endPosition - startPosition) * tooltipLocation;\r\n\t\t\t}\r\n\r\n\t\t\tposition = $math.fitToRange(position, this.start, this.end);\r\n\r\n\t\t\tif (this._tooltipPosition != position) {\r\n\t\t\t\tthis._tooltipPosition = position;\r\n\r\n\t\t\t\tlet tooltipLocation2 = renderer.tooltipLocation2;\r\n\r\n\t\t\t\tlet startPoint: IPoint = renderer.positionToPoint(startPosition, tooltipLocation2);\r\n\t\t\t\tlet endPoint: IPoint = renderer.positionToPoint(endPosition, tooltipLocation2);\r\n\r\n\t\t\t\t// save values so cursor could use them\r\n\t\t\t\tthis.currentItemStartPoint = startPoint;\r\n\t\t\t\tthis.currentItemEndPoint = endPoint;\r\n\r\n\t\t\t\tif (renderer.fullWidthTooltip) {\r\n\t\t\t\t\ttooltip.width = endPoint.x - startPoint.x;\r\n\t\t\t\t\ttooltip.height = endPoint.y - startPoint.y;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet point: IPoint = renderer.positionToPoint(position, tooltipLocation2);\r\n\t\t\t\tlet globalPoint: IPoint = $utils.spritePointToSvg(point, this.renderer.line);\r\n\t\t\t\ttooltip.text = this.getTooltipText(position);\r\n\r\n\t\t\t\tif (tooltip.text) {\r\n\t\t\t\t\ttooltip.delayedPointTo(globalPoint);\r\n\t\t\t\t\ttooltip.show();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.cursorTooltipEnabled || this.tooltip.disabled) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) to Axis position with zoom level and\r\n\t * inversed taken into account.\r\n\t *\r\n\t * @param position Global position (0-1)\r\n\t * @return Position within Axis (0-1)\r\n\t */\r\n\tpublic toAxisPosition(position: number): number {\r\n\r\n\t\tposition = this.renderer.toAxisPosition(position);\r\n\r\n\t\tif (position == undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tposition = position * (this.end - this.start);\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = this.start + position;\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts position on the axis with zoom level and\r\n\t * inversed taken into account to global position.\r\n\t *\r\n\t * @param position Axis position (0-1)\r\n\t * @return Global position (0-1)\r\n\t */\r\n\tpublic toGlobalPosition(position: number): number {\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = position - this.start;\r\n\t\t}\r\n\r\n\t\treturn position / (this.end - this.start);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to be used for cursor's Axis tooltip.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position coordinate (px)\r\n\t * @return Label text\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip's position and possibly size, and pointer (stem)\r\n\t * place.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointerOrientation  Pointer (stem) orientation\r\n\t * @param boundingRectangle   A rectangle for tooltip to fit within\r\n\t */\r\n\tpublic updateTooltip(pointerOrientation: PointerOrientation, boundingRectangle: IRectangle): void {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\t\tif (tooltip) {\r\n\t\t\ttooltip.fixDoc = false;\r\n\t\t\ttooltip.pointerOrientation = pointerOrientation;\r\n\t\t\ttooltip.setBounds($utils.spriteRectToSvg(boundingRectangle, this.renderer.line));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [roundPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position  Relative position\r\n\t * @param location  Location on axis\r\n\t * @return Rounded position\r\n\t */\r\n\tpublic roundPosition(position: number, location: AxisItemLocation, axisLocation?: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellStartPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellEndPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis ranges for this Axis.\r\n\t *\r\n\t * @return Axis ranges\r\n\t */\r\n\tpublic get axisRanges(): ListTemplate<this[\"_dataItem\"]> {\r\n\t\tif (!this._axisRanges) {\r\n\t\t\tlet dataItem: AxisDataItem = this.createDataItem();\r\n\t\t\tdataItem.isRange = true;\r\n\t\t\tdataItem.axisFill = this.renderer.axisFills.template.clone();\r\n\t\t\tdataItem.grid = this.renderer.grid.template.clone();\r\n\t\t\tdataItem.tick = this.renderer.ticks.template.clone();\r\n\t\t\tdataItem.label = this.renderer.labels.template.clone();\r\n\r\n\t\t\tdataItem.isTemplate = true;\r\n\t\t\tdataItem.component = this;\r\n\t\t\tdataItem.axisFill.disabled = false;\r\n\t\t\tdataItem.tick.disabled = false;\r\n\t\t\tdataItem.grid.disabled = false;\r\n\t\t\tdataItem.label.disabled = false;\r\n\r\n\t\t\tthis._axisRanges = new ListTemplate<this[\"_dataItem\"]>(dataItem);\r\n\t\t\tthis._axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisRanges));\r\n\t\t\tthis._disposers.push(this._axisRanges.template);\r\n\t\t}\r\n\t\treturn this._axisRanges;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an axis range after it has been added to the axis range list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<this[\"_dataItem\"]>[\"inserted\"]) {\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\taxisRange.component = this;\r\n\t\taxisRange.isRange = true;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis breaks on this Axis.\r\n\t *\r\n\t * @return Axis breaks.\r\n\t */\r\n\tpublic get axisBreaks(): SortedListTemplate<this[\"_axisBreak\"]> {\r\n\t\tif (!this._axisBreaks) {\r\n\t\t\tthis._axisBreaks = new SortedListTemplate<this[\"_axisBreak\"]>(this.createAxisBreak(), (a, b) => {\r\n\t\t\t\treturn $number.order(a.adjustedStartValue, b.adjustedStartValue);\r\n\t\t\t});\r\n\r\n\t\t\tthis._axisBreaks.events.on(\"inserted\", this.processBreak, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisBreaks));\r\n\t\t\tthis._disposers.push(this._axisBreaks.template);\r\n\t\t}\r\n\t\treturn this._axisBreaks;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new axis break.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new AxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Series currently associated with this Axis.\r\n\t *\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic postProcessSeriesDataItems(series?: XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\t/**\r\n\t * Updates Axis based on all Series that might influence it.\r\n\t *\r\n\t * Called by Series after Series data is validated.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisBySeries(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Hides unused data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hideUnusedDataItems(): void {\r\n\t\t// hide all unused\r\n\t\tlet dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]> = this._dataItemsIterator;\r\n\r\n\t\tdataItemsIterator.createNewItems = false;\r\n\r\n\t\t$iter.each(dataItemsIterator.iterator(), (dataItem) => {\r\n\t\t\tthis.validateDataElement(dataItem); // solves shrinking\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t});\r\n\r\n\t\tdataItemsIterator.clear();\r\n\t\tdataItemsIterator.createNewItems = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series' data item that corresponds to specific position on Axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series    Series\r\n\t * @param position  Position (0-1)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle that corresponds to specific position on axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       ???\r\n\t * @param location  Location\r\n\t * @param stackKey  ???\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point coordinates\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes axis breaks that fall between `min` and `max` (???)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param min  Start value\r\n\t * @param max  End value\r\n\t * @return Spread o\r\n\t */\r\n\tprotected adjustDifference(min: number, max: number): number {\r\n\t\tlet difference: number = max - min;\r\n\t\tif ($type.isNumber(difference)) {\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\t$iter.eachContinue(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t// breaks are sorted, we don't need go further anymore\r\n\t\t\t\t\t\tif (startValue > max) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (endValue >= min) {\r\n\t\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tlet intersection: IRange = $math.intersection({ start: startValue, end: endValue }, { start: min, end: max });\r\n\r\n\t\t\t\t\t\t\t\tif (intersection) {\r\n\t\t\t\t\t\t\t\t\tdifference -= (intersection.end - intersection.start) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn difference;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if specific value falls within a break.\r\n\t *\r\n\t * Returns [[AxisBreak]] the value falls into.\r\n\t *\r\n\t * @param value  Value to check\r\n\t * @return Axis break\r\n\t */\r\n\tprotected isInBreak(value: number): this[\"_axisBreak\"] {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\treturn $iter.find(this._axisBreaks.iterator(), (axisBreak) =>\r\n\t\t\t\tvalue >= axisBreak.adjustedStartValue &&\r\n\t\t\t\tvalue <= axisBreak.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixAxisBreaks description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected fixAxisBreaks(): void {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks: SortedListTemplate<this[\"_axisBreak\"]> = this._axisBreaks;\r\n\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t// first make sure that startValue is <= end value\r\n\t\t\t\t// This needs to make a copy of axisBreaks because it mutates the list while traversing\r\n\t\t\t\t// TODO very inefficient\r\n\t\t\t\t$array.each($iter.toArray(axisBreaks.iterator()), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = $math.min(axisBreak.startValue, axisBreak.endValue);\r\n\t\t\t\t\tlet endValue: number = $math.max(axisBreak.startValue, axisBreak.endValue);\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\r\n\t\t\t\t\tthis._axisBreaks.update(axisBreak);\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t\tlet firstAxisBreak: this[\"_axisBreak\"] = axisBreaks.first;\r\n\t\t\t\tlet previousEndValue: number = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);\r\n\r\n\t\t\t\t// process breaks\r\n\t\t\t\t// TODO does this need to call axisBreaks.update ?\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t// breaks can't overlap\r\n\t\t\t\t\t// if break starts before previous break ends\r\n\t\t\t\t\tif (startValue < previousEndValue) {\r\n\t\t\t\t\t\tstartValue = previousEndValue;\r\n\r\n\t\t\t\t\t\tif (endValue < previousEndValue) {\r\n\t\t\t\t\t\t\tendValue = previousEndValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * We need start/end indexes of axes to be 0 - `dataItems.length`.\r\n\t *\r\n\t * Yes, also for category axis, this helps to avoid jumping of categories\r\n\t * while scrolling and does not do a lot of extra work as we use\r\n\t * protected `_startIndex` and `_endIndex` when working with items.\r\n\t *\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * [startIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [endIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set endIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get endIndex(): number {\r\n\t\treturn this.dataItems.length;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a formatted label based on position.\r\n\t *\r\n\t * Individual axis types should override this method to generate a label\r\n\t * that is relevant to axis type.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\treturn Math.round(position * 100) + \"%x\";\r\n\t}\r\n\r\n\t/**\r\n\t * A Chart this Axis belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a data item for a Series range.\r\n\t *\r\n\t * @param series  Target Series\r\n\t * @return Range data item\r\n\t */\r\n\tpublic createSeriesRange(series: XYSeries): this[\"_dataItem\"] {\r\n\t\tlet range = this.axisRanges.create();\r\n\t\trange.component = this;\r\n\t\trange.axisFill = this.renderer.axisFills.template.clone();\r\n\t\trange.axisFill.disabled = false;\r\n\t\trange.axisFill.fillOpacity = 0;\r\n\r\n\t\trange.grid = this.renderer.grid.template.clone();\r\n\t\trange.grid.disabled = true;\r\n\r\n\t\trange.tick = this.renderer.ticks.template.clone();\r\n\t\trange.tick.disabled = true;\r\n\r\n\t\trange.label = this.renderer.labels.template.clone();\r\n\t\trange.label.disabled = true;\r\n\r\n\t\trange.addDisposer(new Disposer(() => {\r\n\t\t\tseries.axisRanges.removeValue(range);\r\n\t\t}))\r\n\r\n\t\tseries.axisRanges.push(range);\r\n\t\treturn range;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.copyFrom(source.renderer);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (source.renderer) {\r\n\t\t\t\tthis.renderer = source.renderer.clone();\r\n\t\t\t\tthis._disposers.push(this.renderer);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (source.title) {\r\n\t\t\tif (!this.title) {\r\n\t\t\t\tthis.title = source.title.clone();\r\n\t\t\t\tthis.title.parent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.title.copyFrom(source.title);\r\n\t\t\t}\r\n\t\t\tthis._disposers.push(this.title);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t */\r\n\tprotected resetIterators(): void {\r\n\t\tthis._dataItemsIterator.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\r\n\t\t\t\t\t// If `series` is set, we know it's a series range\r\n\t\t\t\t\tif ($type.hasValue(range[\"series\"])) {\r\n\t\t\t\t\t\tif ($type.isString(range[\"series\"])) {\r\n\t\t\t\t\t\t\tif (this.map.hasKey(range[\"series\"])) {\r\n\t\t\t\t\t\t\t\t//range[\"series\"] = this.map.getKey(range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i] = this.createSeriesRange(this.map.getKey(range[\"series\"]));\r\n\t\t\t\t\t\t\t\tdelete (range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i].config = range;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Ordering function used in JSON setup.\r\n\t *\r\n\t * @param a  Item A\r\n\t * @param b  Item B\r\n\t * @return Order\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// last\r\n\t\telse if (a == \"title\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"title\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t// first\r\n\t\telse if (a == \"component\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"component\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n\r\n\tprotected setDisabled(value: boolean) {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.gridContainer.disabled = value;\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Label]] element which serves as a title to the axis.\r\n\t *\r\n\t * When axis is created it aleready has an element, so you can just modify\r\n\t * it.\r\n\t *\r\n\t * Or you can replace it with your own instance of `Label`.\r\n\t * \r\n\t * @param  value  Title label\r\n\t */\r\n\tpublic set title(value: Label) {\r\n\t\tif (this._title && this._title != value) {\r\n\t\t\tthis._title.dispose();\r\n\t\t}\r\n\t\tif (value) {\r\n\t\t\tthis._title = value;\r\n\t\t\tvalue.parent = this;\r\n\t\t\tvalue.shouldClone = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Title label\r\n\t */\r\n\tpublic get title(): Label {\r\n\t\treturn this._title;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if axis' tooltip should be hidden while axis range is animating\r\n\t * (zooming)\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.16\r\n\t * @param  value  Hide tooltip while zooming?\r\n\t */\r\n\tpublic set hideTooltipWhileZooming(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideTooltipWhileZooming\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide tooltip while zooming?\r\n\t */\r\n\tpublic get hideTooltipWhileZooming(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideTooltipWhileZooming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the axis be zoomed with scrollbar/cursor?\r\n\t *\r\n\t * @default true\r\n\t * @since 4.9.28\r\n\t * @param  value  Zoomable?\r\n\t */\r\n\tpublic set zoomable(value: boolean) {\r\n\t\tthis.setPropertyValue(\"zoomable\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoomable?\r\n\t */\r\n\tpublic get zoomable(): boolean {\r\n\t\treturn this.getPropertyValue(\"zoomable\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Axis\"] = Axis;\r\nregistry.registeredClasses[\"AxisDataItem\"] = AxisDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable axis tooltips.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Axis && target.tooltip) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.cursorTooltipEnabled = false;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLine]].\r\n */\r\nexport interface IAxisLineProperties extends ISpriteProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisLine]].\r\n */\r\nexport interface IAxisLineEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLineAdapters extends ISpriteAdapters, IAxisLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw Axis line.\r\n *\r\n * @see {@link IAxisLineEvents} for a list of available events\r\n * @see {@link IAxisLineAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLine extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLineEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLine\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.strokeOpacity = 0.15;\r\n\t\tthis.pixelPerfect = true;\r\n\t\tthis.fill = color();\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.interactionsEnabled = false;\r\n\r\n\t\t//this.element.moveTo({ x: 0, y: 0 });\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLine\"] = AxisLine;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Axis, AxisItemLocation, AxisDataItem } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFill]].\r\n */\r\nexport interface IAxisFillProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Start position. (0-1)\r\n\t */\r\n\tstartPosition?: number;\r\n\r\n\t/**\r\n\t * End position. (0-1)\r\n\t */\r\n\tendPosition?: number;\r\n\r\n\t/**\r\n\t * Location within the axis.\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFill]].\r\n */\r\nexport interface IAxisFillEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFill]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillAdapters extends ISpriteAdapters, IAxisFillProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisFill extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillEvents;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * [_dataItem description]\r\n\t *\r\n\t * Not sure what this is doing here?\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper();\r\n\t\tthis.axis = axis;\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.className = \"AxisFill\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.location = 0;\r\n\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.__disabled || this.disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\r\n\t\t\tthis.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t\tif (this.isMeasured) {\r\n\t\t\t\tthis.measure();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An actual starting position of the fill.\r\n\t *\r\n\t * @param value  Starting position\r\n\t */\r\n\tpublic set startPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"startPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn this.getPropertyValue(\"startPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * An actual end position of the fill.\r\n\t *\r\n\t * @param value End position\r\n\t */\r\n\tpublic set endPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"endPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn this.getPropertyValue(\"endPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the fill. (0-1)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setPath(value: string): boolean {\r\n\t\tif (this.setPropertyValue(\"path\", value)) {\r\n\t\t\tthis.element.attr({ \"d\": value });\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;\r\n","/**\r\n * A module defining functionality for axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteEvents, ISpriteAdapters } from \"../../core/Sprite\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Grid]].\r\n */\r\nexport interface IGridProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Location of the grid item within cell. (0-1)\r\n\t */\r\n\tlocation?: AxisItemLocation;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Grid]].\r\n */\r\nexport interface IGridEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters  for [[Grid]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridAdapters extends ISpriteAdapters, IGridProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Displays an axis grid line.\r\n *\r\n * @see {@link IGridEvents} for a list of available events\r\n * @see {@link IGridAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements\r\n * @important\r\n */\r\nexport class Grid extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridEvents;\r\n\r\n\t/**\r\n\t * An axis data item that corresponds to the this grid element.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Grid\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.location = 0.5;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\r\n\t\tthis.pixelPerfect = true;\r\n\t\tthis.strokeOpacity = 0.15;\r\n\t\tthis.fill = color(); // \"none\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to place grid line on.\r\n\t *\r\n\t * * 0 - start\r\n\t * * 0.5 - middle\r\n\t * * 1 - end\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grid\"] = Grid;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable grid on smaller charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Grid) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Label, ILabelProperties, ILabelAdapters, ILabelEvents } from \"../../core/elements/Label\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabel]].\r\n */\r\nexport interface IAxisLabelProperties extends ILabelProperties {\r\n\r\n\t/**\r\n\t * Relative location of the label. (0-1)\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw the label on the inside of the Axis?\r\n\t */\r\n\tinside?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabel]].\r\n */\r\nexport interface IAxisLabelEvents extends ILabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabel]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelAdapters extends ILabelAdapters, IAxisLabelProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on Axis.\r\n *\r\n * @see {@link IAxisLabelEvents} for a list of available events\r\n * @see {@link IAxisLabelAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisLabel extends Label {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLabelProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLabelAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLabelEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabel\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.padding(10, 10, 10, 10);\r\n\t\tthis.location = 0.5;\r\n\t\t//this.nonScaling = true; // not good for perf\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the label. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if label should be drawn inside axis.\r\n\t *\r\n\t * @param value  Inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inside\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if label is set to be drawn inside axis.\r\n\t *\r\n\t * @return Inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean):boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif(this.axis){\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabel\"] = AxisLabel;\r\n","/**\r\n * Tick module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Tick]].\r\n */\r\nexport interface ITickProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Length of the tick (px).\r\n\t */\r\n\tlength?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Tick]].\r\n */\r\nexport interface ITickEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Tick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITickAdapters extends ISpriteAdapters, ITickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A basic Tick class.\r\n *\r\n * A tick is a short dash, mainly connecting an object like axis or slice to\r\n * it's textual label.\r\n *\r\n * @see {@link ITickEvents} for a list of available events\r\n * @see {@link ITickAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class Tick extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITickEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Tick\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fillOpacity = 0;\r\n\t\tthis.length = 6;\r\n\t\tthis.strokeOpacity = 0.2;\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Length of the tick in pixels.\r\n\t *\r\n\t * @param value  Length (px)\r\n\t */\r\n\tpublic set length(value: number) {\r\n\t\tthis.setPropertyValue(\"length\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get length(): number {\r\n\t\tif (this.disabled) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn this.getPropertyValue(\"length\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Tick\"] = Tick;\r\n","/**\r\n * Axis Tick module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisTick]].\r\n */\r\nexport interface IAxisTickProperties extends ITickProperties {\r\n\t/**\r\n\t * Relative location of the tick. (0-1)\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw the tick on the inside of the Axis?\r\n\t */\r\n\tinside?: boolean;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisTick]].\r\n */\r\nexport interface IAxisTickEvents extends ITickEvents {\r\n\r\n}\r\n\r\n/**\r\n * Defines adapter for [[AxisTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisTickAdapters extends ITickAdapters, IAxisTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an axis tick\r\n * @see {@link IAxisTickEvents} for a list of available events\r\n * @see {@link IAxisTickAdapters} for a list of available Adapters\r\n */\r\nexport class AxisTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisTickEvents;\r\n\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referece to Axis element this tick is placed on.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisTick\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.location = 0.5;\r\n\r\n\t\tthis.above = false;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.pixelPerfect = true;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\tthis.length = 5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the tick. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if tick should be drawn inside axis.\r\n\t *\r\n\t * @param value  Inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inside\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if label is set to be drawn inside axis.\r\n\t *\r\n\t * @return Inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\t/**\r\n\t * Normally tick goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisTick\"] = AxisTick;\r\n","/**\r\n * Module, defining base Axis Renderer.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisLine } from \"./AxisLine\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { Chart } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t */\r\n\tminGridDistance?: number;\r\n\r\n\t/**\r\n\t * Draw axis labels inside axis.\r\n\t */\r\n\tinside?: boolean;\r\n\r\n\t/**\r\n\t * Draw axis on opposite side of the plot area?\r\n\t */\r\n\topposite?: boolean;\r\n\r\n\t/**\r\n\t * Inverse the order of the scale for the Axis.\r\n\t */\r\n\tinversed?: boolean;\r\n\r\n\t/**\r\n\t * Location of the cell start. (0-1)\r\n\t */\r\n\tcellStartLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the cell end. (0-1)\r\n\t */\r\n\tcellEndLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the axis tooltip. (0-1)\r\n\t */\r\n\ttooltipLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the tooltip relative secondary axis cell. (0-1)\r\n\t */\r\n\ttooltipLocation2?: number;\t\r\n\r\n\t/**\r\n\t * Resize axis tooltip to the full width of the cell.\r\n\t */\r\n\tfullWidthTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Labels with position less than this will be hidden.\r\n\t */\r\n\tminLabelPosition?: number;\r\n\r\n\t/**\r\n\t * Labels with position bigger than this will be hidden.\r\n\t */\r\n\tmaxLabelPosition?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererAdapters extends IContainerAdapters, IAxisRendererProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all axis renderers.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRenderer extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererEvents;\r\n\r\n\t/**\r\n\t * A related Axis.\r\n\t */\r\n\tprotected _axis: Axis;\r\n\r\n\t/**\r\n\t * A line object of the related axis.\r\n\t */\r\n\tpublic line: AxisLine;\r\n\r\n\t/**\r\n\t * Base grid element. ([[Sprite]])\r\n\t *\r\n\t * For value axes base grid is at value 0.\r\n\t *\r\n\t * For category/date axis it is added at the end of the last item/date.\r\n\t *\r\n\t */\r\n\tpublic baseGrid: Sprite;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[Grid]] elements.\r\n\t */\r\n\tpublic gridContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the axis bullets.\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[AxisBreak]] elements.\r\n\t */\r\n\tpublic breakContainer: Container;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<Chart>();\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: Grid;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFill;\r\n\r\n\t/**\r\n\t * Defines type for tick elements.\r\n\t */\r\n\tpublic _tickType: AxisTick;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabel;\r\n\r\n\t/**\r\n\t * A list of grid elements.\r\n\t */\r\n\tprotected _grid: ListTemplate<this[\"_gridType\"]>;\r\n\r\n\t/**\r\n\t * A list of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tickType\"]>;\r\n\r\n\t/**\r\n\t * A list of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_labelType\"]>;\r\n\r\n\t/**\r\n\t * A list of fill elements.\r\n\t */\r\n\tprotected _axisFills: ListTemplate<this[\"_fillType\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRenderer\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.minGridDistance = 50;\r\n\t\tthis.inside = false;\r\n\t\tthis.inversed = false;\r\n\t\tthis.tooltipLocation = 0.5;\r\n\t\tthis.fullWidthTooltip = false;\r\n\t\tthis.cellStartLocation = 0;\r\n\t\tthis.cellEndLocation = 1;\r\n\r\n\t\tthis.minLabelPosition = 0;\r\n\t\tthis.maxLabelPosition = 1;\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tlet gridContainer = this.createChild(Container);\r\n\t\tgridContainer.shouldClone = false;\r\n\t\tgridContainer.layout = \"none\";\r\n\t\t//\tgridContainer.isMeasured = false;\r\n\t\tgridContainer.virtualParent = this;\r\n\t\tgridContainer.width = percent(100);\r\n\t\tgridContainer.height = percent(100);\r\n\r\n\t\tthis.gridContainer = gridContainer;\r\n\t\t// not good without this\r\n\t\tgridContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis.invalidateAxisItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tlet breakContainer = this.createChild(Container);\r\n\t\tbreakContainer.shouldClone = false;\r\n\t\tbreakContainer.isMeasured = false;\r\n\t\tbreakContainer.layout = \"none\";\r\n\t\tbreakContainer.width = percent(100);\r\n\t\tbreakContainer.height = percent(100);\r\n\t\tthis.breakContainer = breakContainer;\r\n\r\n\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.line = this.createChild(AxisLine);\r\n\t\tthis.line.shouldClone = false;\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tlet baseGrid: Grid = this.createChild(Grid);\r\n\t\tbaseGrid.shouldClone = false;\r\n\t\tthis.baseGrid = baseGrid;\r\n\r\n\t\t// Make elements disposable\r\n\t\tlet disposers = this._disposers;\r\n\t\tdisposers.push(baseGrid);\r\n\t\tdisposers.push(this.line);\r\n\t\tdisposers.push(gridContainer);\r\n\t\tdisposers.push(breakContainer);\r\n\t\tdisposers.push(bulletsContainer);\r\n\t\tdisposers.push(this._chart);\r\n\r\n\t\tthis.ticks.template.disabled = true;\r\n\t\tthis.axisFills.template.disabled = true;\r\n\t\tthis.axisFills.template.interactionsEnabled = false;\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Axis of a renderer\r\n\t * @param axis Axis\r\n\t */\r\n\tset axis(axis: Axis) {\r\n\t\tthis.setAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Axis of a renderer\r\n\t * @return axis Axis\r\n\t */\r\n\tget axis(): Axis {\r\n\t\treturn this._axis;\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tthis._axis = axis;\r\n\t\tthis.baseGrid.parent = axis;\r\n\t\tthis.line.parent = axis;\r\n\t\tthis.gridContainer.bind(\"opacity\", axis);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tthis.events.on(\"sizechanged\", this.updateTooltip, this, false);\r\n\t\tthis.events.on(\"positionchanged\", this.updateTooltip, this, false);\r\n\t\tthis.labels.template.inside = this.inside;\r\n\t\tthis.ticks.template.inside = this.inside;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-positions an element to new coordinates.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item   A target element\r\n\t * @param point  New coordinates\r\n\t */\r\n\tpublic positionItem(item: Sprite, point: IPoint): void {\r\n\t\tif (item) {\r\n\t\t\titem.moveTo(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?:number): IPoint {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review / units)\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to a pixel coordinate.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate;\r\n\t}\r\n\r\n\tpublic updateGridContainer() {\r\n\r\n\t}\r\n\r\n\r\n\tprotected getHeight(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelHeight;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelHeight || 0;\r\n\t}\r\n\r\n\tprotected getWidth(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelWidth;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelWidth || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis data items, effectively causing them re-evaluated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic invalidateAxisItems(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fill         Fill element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateFillElement(fill: AxisFill, position: number, endPosition: number): void {\r\n\t\tfill.startPosition = position;\r\n\t\tfill.endPosition = endPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tthis.positionItem(axisBreak.startLine, axisBreak.startPoint);\r\n\t\tthis.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\r\n\t\tthis.positionItem(axisBreak.endLine, axisBreak.endPoint);\r\n\t\tthis.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t *\r\n\t * Use it to control density of the grid/labels on the axis.element.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} for more info\r\n\t * @param value  Min distance (px)\r\n\t */\r\n\tpublic set minGridDistance(value: number) {\r\n\t\tif (this.setPropertyValue(\"minGridDistance\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min distance (px)\r\n\t */\r\n\tpublic get minGridDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minGridDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles visibility of an element, based on its current position and\r\n\t * min/max position settings.\r\n\t *\r\n\t * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite       An element to toggle\r\n\t * @param position     Elements current position\r\n\t * @param minPosition  Min position setting\r\n\t * @param maxPosition  Max position setting\r\n\t */\r\n\tprotected toggleVisibility(sprite: Sprite, position: number, minPosition: number, maxPosition: number): void {\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tlet dataItem = sprite.dataItem;\r\n\t\tif(dataItem && dataItem instanceof AxisDataItem){\r\n\t\t\tif($type.isNumber(dataItem.minPosition)){\r\n\t\t\t\tminPosition = dataItem.minPosition;\r\n\t\t\t}\r\n\t\t\tif($type.isNumber(dataItem.maxPosition)){\r\n\t\t\t\tmaxPosition = dataItem.maxPosition;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet updatedStart = axis.start + (axis.end - axis.start) * (minPosition - 0.0001);\r\n\t\tlet updatedEnd = axis.start + (axis.end - axis.start) * (maxPosition + 0.0001);\r\n\r\n\t\tif (!sprite.disabled) {\r\n\t\t\tif (position < updatedStart || position > updatedEnd) {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Fill elements.\r\n\t *\r\n\t * Those are fill elements that cover the space between every second set\r\n\t * of grid lines, and can be configured to create striped charts.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable them, set\r\n\t * template to true.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"axisFills\": {\r\n\t *         \"disabled\": false\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/alternated-axis-fills/} this tutorial for more info.\r\n\t * @return Fill elements\r\n\t */\r\n\tpublic get axisFills(): ListTemplate<this[\"_fillType\"]> {\r\n\t\tif (!this._axisFills) {\r\n\t\t\tlet fill = this.createFill(this.axis);\r\n\t\t\tthis._axisFills = new ListTemplate<AxisFill>(fill);\r\n\t\t\tfill.applyOnClones = true;\r\n\t\t\tfill.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisFills));\r\n\t\t\tthis._disposers.push(this._axisFills.template);\r\n\t\t}\r\n\t\treturn this._axisFills;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFill(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Grid elements.\r\n\t *\r\n\t * @return Grid elements\r\n\t */\r\n\tpublic get grid(): ListTemplate<this[\"_gridType\"]> {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet grid = this.createGrid();\r\n\t\t\tthis._grid = new ListTemplate<Grid>(grid);\r\n\t\t\tgrid.applyOnClones = true;\r\n\t\t\tgrid.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._grid));\r\n\t\t\tthis._disposers.push(this._grid.template);\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new Grid();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Tick elements.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable ticks, you'll\r\n\t * need to set `disabled` and `strokeOpacity` properties of the tick template.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * categoryAxis.renderer.ticks.template.strokeOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"ticks\": {\r\n\t *         \"disabled\": false,\r\n\t *         \"strokeOpacity\": 0.5\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Tick elements\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tickType\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick: AxisTick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\ttick.isMeasured = false;\r\n\t\t\ttick.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._ticks = new ListTemplate<AxisTick>(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t\tthis._disposers.push(this._ticks.template);\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new tick element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Tick element\r\n\t */\r\n\tpublic createTick(): this[\"_tickType\"] {\r\n\t\treturn new AxisTick();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Label elements.\r\n\t *\r\n\t * @return Label elements\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_labelType\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tthis._labels = new ListTemplate<AxisLabel>(label);\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tlabel.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t\tthis._disposers.push(this._labels.template);\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabel();\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis' labels and ticks should be drawn inside Plot area.\r\n\t *\r\n\t * Does not work with all renderers, like AxisRendererRadial.\r\n\t *\r\n\t * @param value  Labels inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\r\n\t\tif (this.setPropertyValue(\"inside\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.width = 0;\r\n\t\t\tthis.height = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.height = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis should be drawn on the opposite side of the plot\r\n\t * area than it would normally be drawn based on chart's settings.\r\n\t *\r\n\t * Does not work with all renderers, like [[AxisRendererRadial]] and\r\n\t * [[AxisRenderer Circular].\r\n\t *\r\n\t * @param value  Draw axis on opposite side?\r\n\t */\r\n\tpublic set opposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"opposite\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw axis on opposite side?\r\n\t */\r\n\tpublic get opposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"opposite\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if Axis tooltip should take the whole width of the axis cell.\r\n\t * (between two grid lines)\r\n\t *\r\n\t * NOTE: this setting is ignored on circular axis types.\r\n\t *\r\n\t * @param value Full width tooltip?\r\n\t */\r\n\tpublic set fullWidthTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width tooltip?\r\n\t */\r\n\tpublic get fullWidthTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthTooltip\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within secondary axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation2(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation2\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation2(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation2\");\r\n\t}\t\r\n\r\n\t/**\r\n\t * Location for the cell start.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellStartLocation` identifies where, within available space, the actual\r\n\t * cell starts.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell start (0-1)\r\n\t */\r\n\tpublic set cellStartLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellStartLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell start (0-1)\r\n\t */\r\n\tpublic get cellStartLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellStartLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location for the cell end.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellEndLocation` identifies where, within available space, the actual\r\n\t * cell ends.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell end (0-1)\r\n\t */\r\n\tpublic set cellEndLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellEndLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell end (0-1)\r\n\t */\r\n\tpublic get cellEndLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellEndLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the scale of the axis should be flipped.\r\n\t *\r\n\t * @param value Flip axis?\r\n\t */\r\n\tpublic set inversed(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inversed\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Flip axis?\r\n\t */\r\n\tpublic get inversed(): boolean {\r\n\t\treturn this.getPropertyValue(\"inversed\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the start of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.05 (5% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near start of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Min label position (0-1)\r\n\t */\r\n\tpublic set minLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"minLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min label position (0-1)\r\n\t */\r\n\tpublic get minLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"minLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the and of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.95 (95% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near end of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Max label position (0-1)\r\n\t */\r\n\tpublic set maxLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max label position (0-1)\r\n\t */\r\n\tpublic get maxLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"maxLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all settings and related items from another object of the same\r\n\t * type.\r\n\t *\r\n\t * @param source  Source object\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.grid.template.copyFrom(source.grid.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.axisFills.template.copyFrom(source.axisFills.template);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.baseGrid.copyFrom(source.baseGrid);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRenderer\"] = AxisRenderer;\r\n","/**\r\n * Axis Bullet module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerAdapters, IContainerEvents, IContainerProperties } from \"../../core/Container\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisBullet]].\r\n */\r\nexport interface IAxisBulletProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Relative position within cell/range.\r\n\t *\r\n\t * Value range is from from `0` (beginning) to `1` (end).\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw inside plot area (`true`) or outside it (`false`).\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tinside?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisBullet]].\r\n */\r\nexport interface IAxisBulletEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapter for [[AxisBullet]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisBulletAdapters extends IContainerAdapters, IAxisBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a positioned bullet (element) on an Axis.\r\n *\r\n * ```TypeScript\r\n * let range = dateAxis.axisRanges.create();\r\n * range.date = new Date(2018, 0, 5);\r\n * \r\n * let flag = new am4plugins_bullets.FlagBullet();\r\n * flag.label.text = \"Hello\";\r\n *\r\n * range.bullet = flag;\r\n * ```\r\n * ```JavaScript\r\n * var range = dateAxis.axisRanges.create();\r\n * range.date = new Date(2018, 0, 5);\r\n * \r\n * var flag = new am4plugins_bullets.FlagBullet();\r\n * flag.label.text = \"Hello\";\r\n *\r\n * range.bullet = flag;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"xAxes\": [{\r\n *     \"type\": \"DateAxis\",\r\n *     // ...\r\n *     \"axisRanges\": [{\r\n *       \"date\": new Date(2018, 0, 5),\r\n *       \"bullet: {\r\n *         \"type\": \"FlagBullet\",\r\n *         \"label\": {\r\n *           \"text\": \"Hello\"\r\n *         }\r\n *       }\r\n *     }]\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.5.9\r\n * @see {@link IAxisBulletEvents} for a list of available events\r\n * @see {@link IAxisBulletAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisBullet extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisBulletEvents;\r\n\r\n\t/**\r\n\t * Data item.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisBullet\";\r\n\r\n\t\tthis.location = 0.5;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position within cell/range.\r\n\t *\r\n\t * Value range is from from `0` (beginning) to `1` (end).\r\n\t *\r\n\t * NOTE: `location` is relative to the parent axis range's scope, i.e.\r\n\t * between its `date` and `endDate` for [[DateAxis]], or `value`/`endValue`\r\n\t * ([[ValueAxis]]), or `category`/`endCategory` ([[categoryAxis]]).\r\n\t * \r\n\t * ```TypeScript\r\n\t * let range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * range.endDate = new Date(2018, 0, 6);\r\n\t * \r\n\t * let bullet = new am4charts.AxisBullet();\r\n\t * bullet.location = 1;\r\n\t * \r\n\t * let flag = bullet.createChild(am4plugins_bullets.FlagBullet);\r\n\t * flag.label.text = \"Hello\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * range.endDate = new Date(2018, 0, 6);\r\n\t * \r\n\t * var bullet = new am4charts.AxisBullet();\r\n\t * bullet.location = 1;\r\n\t * \r\n\t * var flag = bullet.createChild(am4plugins_bullets.FlagBullet);\r\n\t * flag.label.text = \"Hello\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     // ...\r\n\t *     \"axisRanges\": [{\r\n\t *       \"date\": new Date(2018, 0, 5),\r\n\t *       \"endDate\": new Date(2018, 0, 6),\r\n\t *       \"bullet: {\r\n\t *         \"type\": \"AxisBullet\",\r\n\t *         \"location\": 1,\r\n\t *         \"children\": [{\r\n\t *           \"type\": \"FlagBullet\",\r\n\t *           \"label\": {\r\n\t *             \"text\": \"Hello\"\r\n\t *           }\r\n\t *         }]\r\n\t *       }\r\n\t *     }]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0.5\r\n\t * @param  value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBullet\"] = AxisBullet;","/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { HorizontalCenter } from \"../../core/defs/HorizontalCenter\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererYAdapters extends IAxisRendererAdapters, IAxisRendererYProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererYProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererYAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererYEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY\";\r\n\t\tthis.minGridDistance = 40;\r\n\t\tthis.opposite = false;\r\n\t\tthis.height = percent(100);\r\n\t\tthis.labels.template.verticalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"horizontal\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.y = axis.pixelY;\r\n\t\t\tgridContainer.height = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet inversedPosition = 1 - value;\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet y = axis.pixelY;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\ty = $utils.spritePointToSprite({ x: 0, y: this.pixelY }, this.parent, relativePositionSprite).y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tlet relativeY = y / relativePositionSprite.innerHeight;\r\n\t\t\t\tlet relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\r\n\r\n\t\t\t\treturn 1 - (inversedPosition - relativeY) / relativeHeight;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.valign = \"middle\";\r\n\r\n\t\t\tif (!(axis.height instanceof Percent)) {\r\n\t\t\t\taxis.height = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\ttitle.rotation = 90;\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.rotation = -90;\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 2000;\r\n\t\t\tlet bbx: number = 0;\r\n\t\t\tlet bby: number = 0;\r\n\t\t\tlet bbw: number = bigNum;\r\n\t\t\tlet bbh: number = this.axisLength;\r\n\r\n\t\t\t// right\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// left\r\n\t\t\telse {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(\"horizontal\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom) || 0;\r\n\t}\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: 0, y: this.positionToCoordinate(position) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.y, point.x);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = (1 - axis.start) - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + (1 - axis.end);\r\n\t\t}\r\n\t\treturn $math.round(position, 5);\r\n\t}\t\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet y1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet y2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet h: number = Math.abs(y2 - y1);\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet y: number = Math.min(y1, y2);\r\n\t\tlet x: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.getWidth(), y: 0 });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\ttry {\r\n\t\t\t$utils.used(this.axis.title.measuredWidth);\r\n\t\t} catch {\r\n\t\t\t// void\r\n\t\t}\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tif (!this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength, y: 0 });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.axisLength });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet h: number = this.axisLength;\r\n\t\tlet y: number = axis.basePoint.y;\r\n\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tif (y < - 0.2 || y > h + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).x;\r\n\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet horizontalCenter: HorizontalCenter;\r\n\t\tlet deltaX = 0;\r\n\t\tlet maxWidth = this.gridContainer.maxWidth;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\tif (label.align == \"left\") {\r\n\t\t\t\t\tdeltaX = -maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = -maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = 0 + deltaX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\tif (label.align == \"right\") {\r\n\t\t\t\t\tdeltaX = maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = this.measuredWidth + deltaX;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.horizontalCenter = horizontalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet x1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet x2: number = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\r\n\r\n\t\tstartPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\r\n\t\tendPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet w = Math.abs(x2 - x1);\r\n\r\n\t\tstartLine.x = x1;\r\n\t\tstartLine.height = 0;\r\n\t\tstartLine.width = w;\r\n\r\n\t\tendLine.x = x1;\r\n\t\tendLine.height = 0;\r\n\t\tendLine.width = w;\r\n\r\n\t\tfillShape.width = w;\r\n\t\tfillShape.height = Math.abs(endPoint.y - startPoint.y);\r\n\t\tfillShape.x = x1;\r\n\t\tfillShape.y = endPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(true, false, true, false);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (!axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n * A module which defines functionality related to Value Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { ValueAxis } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ValueAxisBreak]].\r\n */\r\nexport interface IValueAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Value break starts on.\r\n\t */\r\n\tstartValue?: number;\r\n\r\n\t/**\r\n\t * Value break ends on.\r\n\t */\r\n\tendValue?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxisBreak]].\r\n */\r\nexport interface IValueAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ValueAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisBreakAdapters extends IAxisBreakAdapters, IValueAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" on value axis.\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * when comparing columns with relatively similar values, it would make sense\r\n * to cut out their mid section, so that their tip differences are more\r\n * prominent.\r\n *\r\n * @see {@link IValueAxisBreakEvents} for a list of available events\r\n * @see {@link IValueAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IValueAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IValueAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IValueAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: ValueAxis;\r\n\r\n\t/**\r\n\t * [adjustedStep description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedStep: number;\r\n\r\n\t/**\r\n\t * [adjustedMin description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedMin: number;\r\n\r\n\t/**\r\n\t * [adjustedMax description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedMax: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.valueToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.valueToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxisBreak\"] = ValueAxisBreak;\r\n","/**\r\n * Value Axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { IDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ValueAxisDataItem extends AxisDataItem {\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ValueAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.endValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A data point's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values[\"value\"].value;\r\n\t}\r\n\r\n\t/**\r\n\t * Data point's numeric end value.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tthis.setValue(\"endValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.values[\"endValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n */\r\nexport interface IMinMaxStep {\r\n\tmin: number;\r\n\tmax: number;\r\n\tstep: number;\r\n}\r\n\r\n/**\r\n * Defines data fields for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisDataFields extends IAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisProperties extends IAxisProperties {\r\n\tstrictMinMax?: boolean;\r\n\tlogarithmic?: boolean;\r\n\tmaxPrecision?: number;\r\n\tadjustLabelPrecision?: boolean;\r\n\textraTooltipPrecision?: number;\r\n\textraMin?: number;\r\n\textraMax?: number;\r\n\tkeepSelection?: boolean;\r\n\tincludeRangesInMinMax?: boolean;\r\n\tsyncWithAxis?: ValueAxis;\r\n\ttreatZeroAs?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisEvents extends IAxisEvents {\r\n\r\n\t/**\r\n\t * Invoked when selection/zoom on axis occurs and start/end coordinates\r\n\t * change.\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * Invoked when start/end coordinates of the axis change.\r\n\t */\r\n\textremeschanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[ValueAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisAdapters extends IAxisAdapters, IValueAxisProperties {\r\n\t/**\r\n\t * Applied to the base value of the axis\r\n\t */\r\n\tbaseValue: number,\r\n\r\n\t/**\r\n\t * Applied to the min value of the axis\r\n\t */\r\n\tmin: number\r\n\r\n\t/**\r\n\t * Applied to the max value of the axis\r\n\t */\r\n\tmax: number\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IValueAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IValueAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IValueAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: ValueAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: ValueAxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IValueAxisEvents;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: XYChart;\r\n\r\n\t/**\r\n\t * A list of Series that are using this Axis.\r\n\t */\r\n\tpublic series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * Minimum value for the axis scale.\r\n\t */\r\n\tprotected _min: number;\r\n\r\n\t/**\r\n\t * Maximum value for the axis scale.\r\n\t */\r\n\tprotected _max: number;\r\n\r\n\t/**\r\n\t * User-defined min value for axis.\r\n\t */\r\n\tprotected _minDefined: number;\r\n\r\n\t/**\r\n\t * User-defined max value for axis.\r\n\t */\r\n\tprotected _maxDefined: number;\r\n\r\n\t/**\r\n\t * [_minAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minAdjusted: number;\r\n\r\n\t/**\r\n\t * [_maxAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxAdjusted: number;\r\n\r\n\t/**\r\n\t * Min real value. (lowest value of all data points)\r\n\t */\r\n\tprotected _minReal: number;\r\n\r\n\t/**\r\n\t * Max real value. (highest value of all data points)\r\n\t */\r\n\tprotected _maxReal: number;\r\n\r\n\t/**\r\n\t * Min value within current zoom.\r\n\t */\r\n\tprotected _minZoomed: number;\r\n\r\n\t/**\r\n\t * Max value within current zoom.\r\n\t */\r\n\tprotected _maxZoomed: number\r\n\r\n\t/**\r\n\t * [_step description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _step: number;\r\n\r\n\t/**\r\n\t * [_stepDecimalPlaces description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _stepDecimalPlaces: number = 0;\r\n\tprotected _prevStepDecimalPlaces: number = 0;\r\n\tprotected _adjustLabelPrecision: boolean = true;\r\n\r\n\t/**\r\n\t * [_difference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _difference: number;\r\n\r\n\t/**\r\n\t * Base value for the axis.\r\n\t */\r\n\tprotected _baseValue: number = 0;\r\n\r\n\t/**\r\n\t * [_previousValue description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousValue: number;\r\n\r\n\t/**\r\n\t * [_previousPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousPoint: IPoint;\r\n\r\n\t/**\r\n\t * Adjusted start in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedStart: number = 0;\r\n\r\n\t/**\r\n\t * Adjusted end in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedEnd: number = 1;\r\n\r\n\tprotected _finalMin: number;\r\n\tprotected _finalMax: number;\r\n\r\n\tprotected _extremesChanged: boolean = false;\r\n\r\n\tprotected _deltaMinMax: number = 1;\r\n\r\n\tprotected _dsc: boolean = false;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem as parameter.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tif (!dataItem.axisFill.disabled) {\r\n\t\t\t// rounding in left to solve floating point number\r\n\t\t\tif ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\r\n\t\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * As calculating totals is expensive operation and not often needed, we\r\n\t * don't do it by default.\r\n\t *\r\n\t * In case you use `totalPercent` or `total` in your charts, this must be set\r\n\t * to `true`.\r\n\t *\r\n\t * @default false\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n\t */\r\n\tpublic calculateTotals: boolean = false;\r\n\r\n\r\n\tprotected _minMaxAnimation: Animation;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"value\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000);\r\n\t\tthis.setPropertyValue(\"extraMin\", 0);\r\n\t\tthis.setPropertyValue(\"extraMax\", 0);\r\n\t\tthis.setPropertyValue(\"strictMinMax\", false);\r\n\t\tthis.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\r\n\t\tthis.setPropertyValue(\"adjustLabelPrecision\", true);\r\n\t\tthis.setPropertyValue(\"extraTooltipPrecision\", 0);\r\n\t\tthis.keepSelection = false;\r\n\t\tthis.includeRangesInMinMax = false;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ValueAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new ValueAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tthis.clearCache();\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis._start = 0;\r\n\t\t\t\tthis._end = 1;\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._start != 0) {\r\n\t\t\t\tthis.dispatchImmediately(\"startchanged\");\r\n\t\t\t}\r\n\t\t\tif (this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"endchanged\");\r\n\r\n\t\t\t}\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._maxZoomed = this._maxDefined;\r\n\t\tthis._minZoomed = this._minDefined;\r\n\r\n\t\tthis._maxAdjusted = this._maxDefined;\r\n\t\tthis._minAdjusted = this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data items of the related Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\t\t// @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\r\n\t\tif (this.calculateTotals) {\r\n\t\t\tlet series: XYSeries = this.series.getIndex(0);\r\n\t\t\tlet startIndex: number = series.startIndex;\r\n\r\n\t\t\tif (series.dataItems.length > 0) {\r\n\r\n\t\t\t\tif (startIndex > 0) {\r\n\t\t\t\t\tstartIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tlet endIndex: number = series.endIndex;\r\n\t\t\t\tif (endIndex < series.dataItems.length) {\r\n\t\t\t\t\tendIndex++;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\tfor (let i: number = startIndex; i < endIndex; ++i) {\r\n\t\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\t\tconst total: { [index: string]: number } = {};\r\n\t\t\t\t\tconst sum: { [index: string]: number } = {};\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(total[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] = Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] += Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] = value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] += value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, total[key], \"total\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.getMinMax();\r\n\r\n\t\tif (!$type.isNumber(this._minAdjusted)) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tdataItem.value = null;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tthis.calculateZoom();\r\n\r\n\t\tthis.validateAxisElements();\r\n\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.validateBreaks();\r\n\r\n\t\tthis.hideUnusedDataItems();\r\n\r\n\t\tthis.renderer.invalidateLayout();\r\n\t\t// hide too close\r\n\t\t//this.hideTooCloseDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tif ($type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet min: number = this.positionToValue(this.start);\r\n\t\t\tlet max: number = this.positionToValue(this.end);\r\n\r\n\t\t\tlet differece: number = this.adjustDifference(min, max);\r\n\t\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\r\n\t\t\tlet stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\r\n\t\t\tthis._stepDecimalPlaces = stepDecimalPlaces;\r\n\r\n\t\t\tmin = $math.round(min, stepDecimalPlaces);\r\n\t\t\tmax = $math.round(max, stepDecimalPlaces);\r\n\r\n\t\t\tminMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\t\t\tlet step = minMaxStep.step;\r\n\r\n\t\t\tif (this.syncWithAxis) {\r\n\t\t\t\tlet calculated = this.getCache(min + \"-\" + max);\r\n\t\t\t\tif ($type.isNumber(calculated)) {\r\n\t\t\t\t\tstep = calculated;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = minMaxStep.min;\r\n\t\t\t\tmax = minMaxStep.max;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\r\n\t\t\t\tthis._dsc = false;\r\n\t\t\t\tthis._minZoomed = min;\r\n\t\t\t\tthis._maxZoomed = max;\r\n\r\n\t\t\t\tthis._step = step;\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected fixSmallStep(step: number): number {\r\n\t\tif (1 + step == 1) {\r\n\t\t\tstep *= 2;\r\n\t\t\treturn this.fixSmallStep(step);\r\n\t\t}\r\n\t\treturn step;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\t// first regular items\r\n\t\t\tlet value: number = this.minZoomed - this._step * 2;\r\n\r\n\t\t\tif (!this.logarithmic) {\r\n\t\t\t\tvalue = Math.floor(value / this._step) * this._step;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = Math.floor(this.minZoomed / this._step) * this._step;\r\n\t\t\t\t\tif (value == 0) {\r\n\t\t\t\t\t\tvalue = this.minZoomed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet maxZoomed = this._maxZoomed + this._step;\r\n\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\r\n\t\t\tif (this._step == 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._step = this.fixSmallStep(this._step);\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\tconst precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\r\n\t\t\tthis._prevStepDecimalPlaces = this._stepDecimalPlaces;\r\n\r\n\t\t\twhile (value <= maxZoomed) {\r\n\t\t\t\tlet axisBreak: ValueAxisBreak = <ValueAxisBreak>this.isInBreak(value);\r\n\r\n\t\t\t\tif (!axisBreak) {\r\n\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === value);\r\n\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tdataItem.axisBreak = undefined;\r\n\r\n\t\t\t\t\tif (dataItem.value != value || precisionChanged) {\r\n\t\t\t\t\t\tdataItem.value = value;\r\n\t\t\t\t\t\tdataItem.text = this.formatLabel(value);\r\n\r\n\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (dataItem.value >= this.min && dataItem.value <= this.max) {\r\n\t\t\t\t\t\t\tif (dataItem.label) {\r\n\t\t\t\t\t\t\t\tif ((this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\r\n\t\t\t\tlet oldValue = value;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\r\n\r\n\t\t\t\tif (stepPower < 1) {\r\n\t\t\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\t\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\r\n\t\t\t\t\tdecCount = Math.min(13, decCount);\r\n\t\t\t\t\t// round value to avoid floating point issues\r\n\t\t\t\t\tvalue = $math.round(value, decCount);\r\n\t\t\t\t\t// ceil causes problems: https://codepen.io/team/amcharts/pen/XWMjZwy?editors=1010\r\n\t\t\t\t\tif (oldValue == value) {\r\n\t\t\t\t\t\tvalue = maxZoomed;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// breaks later\r\n\t\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\t\tlet breakValue: number = axisBreak.adjustedMin;\r\n\r\n\t\t\t\t\t\t\twhile (breakValue <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\t\tif (breakValue >= axisBreak.adjustedStartValue && breakValue <= axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === breakValue);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\t\tif (dataItem.value != breakValue) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.value = breakValue;\r\n\t\t\t\t\t\t\t\t\t\tdataItem.text = this.formatLabel(breakValue);\r\n\t\t\t\t\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreakValue += axisBreak.adjustedStep;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tlet value: number = dataItem.value;\r\n\t\tlet endValue: number = dataItem.endValue;\r\n\r\n\t\tlet position: number = this.valueToPosition(value);\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet endPosition: number = position;\r\n\t\tlet fillEndPosition: number = this.valueToPosition(value + this._step);\r\n\r\n\t\tif ($type.isNumber(endValue)) {\r\n\t\t\tendPosition = this.valueToPosition(endValue);\r\n\t\t\tfillEndPosition = endPosition;\r\n\t\t}\r\n\r\n\t\t// this point is needed to calculate distance to satisfy minGridDistance\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, position, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[NumberFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\tif (this.adjustLabelPrecision && value != 0) {\r\n\t\t\treturn this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.numberFormatter.format(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\tlet baseValue: number = this.baseValue;\r\n\t\tlet position: number = this.valueToPosition(baseValue);\r\n\t\tlet basePoint: IPoint = this.renderer.positionToPoint(position);\r\n\r\n\t\treturn basePoint;\r\n\t}\r\n\r\n\t/**\r\n\t * A base value.\r\n\t *\r\n\t * This is a threshold value that will divide \"positive\" and \"negative\"\r\n\t * value ranges.\r\n\t *\r\n\t * Other scale-related functionality also depend on base value. E.g. stacks,\r\n\t * value-dependent coloring, etc.\r\n\t *\r\n\t * @param value Base value\r\n\t */\r\n\tpublic set baseValue(value: number) {\r\n\t\tthis._baseValue = value;\r\n\t\tthis.invalidateLayout();\r\n\t\tthis.invalidateSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\r\n\t\tlet baseValue = this._baseValue;\r\n\t\tif (this.logarithmic) {\r\n\t\t\tbaseValue = this.min;\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn baseValue;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"baseValue\", baseValue);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis\r\n\t *\r\n\t * An alias to `valueToPosition()`.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Position\r\n\t */\r\n\tpublic anyToPosition(value: number): number {\r\n\t\treturn this.valueToPosition(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic valueToPoint(value: number): IOrientationPoint {\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: number): IOrientationPoint {\r\n\t\treturn this.valueToPoint(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return relative position\r\n\t */\r\n\tpublic valueToPosition(value: number): number {\r\n\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t// todo: think if possible to take previous value and do not go through all previous breaks\r\n\t\t\tlet min: number = this.min;\r\n\t\t\tlet max: number = this.max;\r\n\r\n\t\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\t\t\t\tlet difference: number = this._difference;\r\n\r\n\t\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\r\n\t\t\t\t\t\t\tif (value < startValue) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: startValue, end: endValue }, { start: min, end: max })) { // todo: check this once and set some flag in axisBreak\r\n\t\t\t\t\t\t\t\tstartValue = Math.max(startValue, min);\r\n\t\t\t\t\t\t\t\tendValue = Math.min(endValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\t// value to the right of break end\r\n\t\t\t\t\t\t\t\tif (value > endValue) {\r\n\t\t\t\t\t\t\t\t\tmin += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value to the left of break start\r\n\t\t\t\t\t\t\t\telse if (value < startValue) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvalue = startValue + (value - startValue) * breakSize;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet position;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tposition = (value - min) / difference;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet treatZeroAs = this.treatZeroAs;\r\n\t\t\t\t\tif ($type.isNumber(treatZeroAs)) {\r\n\t\t\t\t\t\tif (value <= treatZeroAs) {\r\n\t\t\t\t\t\t\tvalue = treatZeroAs;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tposition = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//position = $math.round(position, 10);\r\n\r\n\t\t\t\treturn position;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n\t */\r\n\tpublic invalidateLabels() {\r\n\t\tsuper.invalidateLabels();\r\n\t\tif (this.dataItems) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tdataItem.value = undefined;\r\n\t\t\t})\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an relative position to a corresponding value within\r\n\t * axis' scale.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic positionToValue(position: number): number {\r\n\r\n\t\tlet min: number = this.min;\r\n\t\tlet max: number = this.max;\r\n\r\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet difference: number = max - min; //no need to adjust!\r\n\r\n\t\t\tlet value: number = null;\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// in case we have some axis breaks\r\n\t\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\t\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\t\t\t\tlet breakStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet breakEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\r\n\r\n\t\t\t\t\t\t\tif (breakStartValue > max) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {\r\n\r\n\t\t\t\t\t\t\t\tbreakStartValue = $math.max(breakStartValue, min);\r\n\t\t\t\t\t\t\t\tbreakEndValue = $math.min(breakEndValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tdifference -= (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\r\n\t\t\t\t\t\t\t\t// position to the right of break end\r\n\t\t\t\t\t\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\t\t\t\t\t\tmin += (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// position to the left of break start\r\n\t\t\t\t\t\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tlet breakPosition: number = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\t\t\t\t\t\tvalue = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(value)) {\r\n\t\t\t\tif (this.logarithmic) {\r\n\t\t\t\t\tvalue = Math.pow(Math.E, (position * ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E)) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = position * difference + min;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an X coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param x  X (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic xToValue(x: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: x, y: 0 }));\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an Y coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param y  Y (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic yToValue(y: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: 0, y: y }));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\tif (this.renderer instanceof AxisRendererY) {\r\n\t\t\treturn 1 - this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected animateMinMax(min: number, max: number): Animation {\r\n\t\treturn this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates smallest and biggest value for the axis scale.\r\n\t * @ignore\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic getMinMax() {\r\n\r\n\t\tthis.updateGridCount();\r\n\r\n\t\tlet min: number = Number.POSITIVE_INFINITY;\r\n\t\tlet max: number = Number.NEGATIVE_INFINITY;\r\n\r\n\t\t// only if min and max are not set from outside, we go through min and max influencers\r\n\t\tif (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (!series.ignoreMinMax) {\r\n\t\t\t\t\t// check min\r\n\t\t\t\t\tlet seriesMin: number = series.min(this);\r\n\t\t\t\t\tif ($type.isNumber(seriesMin) && (seriesMin < min)) {\r\n\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// check max\r\n\t\t\t\t\tlet seriesMax: number = series.max(this);\r\n\r\n\t\t\t\t\tif ($type.isNumber(seriesMax) && (seriesMax > max)) {\r\n\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.includeRangesInMinMax) {\r\n\t\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\r\n\t\t\t\t\t\tif (minValue < min || !$type.isNumber(min)) {\r\n\t\t\t\t\t\t\tmin = minValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (maxValue > max || !$type.isNumber(max)) {\r\n\t\t\t\t\t\t\tmax = maxValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.logarithmic) {\r\n\t\t\tlet treatZeroAs = this.treatZeroAs;\r\n\t\t\tif ($type.isNumber(treatZeroAs)) {\r\n\t\t\t\tif (min <= 0) {\r\n\t\t\t\t\tmin = treatZeroAs;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\tthis.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (min == 0 && max == 0) {\r\n\t\t\tmax = 0.9;\r\n\t\t\tmin = -0.9;\r\n\t\t}\r\n\r\n\t\t// if defined from outside\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._minReal = min;\r\n\t\tthis._maxReal = max;\r\n\r\n\t\tif (min == Number.POSITIVE_INFINITY) {\r\n\t\t\tmin = undefined;\r\n\t\t}\r\n\t\tif (max == Number.NEGATIVE_INFINITY) {\r\n\t\t\tmax = undefined;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(min, max); // previously it was max-min, but not worked well\r\n\r\n\r\n\t\tmin = this.fixMin(min);\r\n\t\tmax = this.fixMax(max);\r\n\r\n\t\t// this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\r\n\t\tif (max - min <= 1 / Math.pow(10, 15)) {\r\n\t\t\tif (max - min != 0) {\r\n\t\t\t\tthis._deltaMinMax = (max - min) / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// the number by which we need to raise 10 to get difference\r\n\t\t\t\tlet exponent: number = Math.log(Math.abs(max)) * Math.LOG10E;\r\n\r\n\t\t\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\t\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t\t\t// reduce this number by 10 times\r\n\t\t\t\tpower = power / 10;\r\n\r\n\t\t\t\tthis._deltaMinMax = power;\r\n\t\t\t}\r\n\t\t\tmin -= this._deltaMinMax;\r\n\t\t\tmax += this._deltaMinMax;\r\n\t\t}\r\n\r\n\t\tmin -= (max - min) * this.extraMin;\r\n\t\tmax += (max - min) * this.extraMax;\r\n\r\n\t\tlet strict = this.strictMinMax;\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tstrict = true;\r\n\t\t}\r\n\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\tdif = max - min;  //new\r\n\r\n\t\t// do it for the second time (importat!)\r\n\t\tminMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\t// return min max if strict\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\t\tmin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = this._minReal;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\t\tmax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmax = this._maxReal;\r\n\t\t\t}\r\n\r\n\t\t\tif (max - min <= 0.00000001) {\r\n\t\t\t\tmin -= this._deltaMinMax;\r\n\t\t\t\tmax += this._deltaMinMax;\r\n\t\t\t}\r\n\r\n\t\t\tmin -= (max - min) * this.extraMin;\r\n\t\t\tmax += (max - min) * this.extraMax;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tthis._step = minMaxStep.step;\r\n\r\n\t\tif (!$type.isNumber(min) && !$type.isNumber(max)) {\r\n\t\t\tthis.start = 0;\r\n\t\t\tthis.end = 1;\r\n\r\n\t\t\tthis.renderer.labels.each((label) => {\r\n\t\t\t\tlabel.dataItem.text = \"\";\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// checking isNumber is good when all series are hidden\r\n\t\tif ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet animation = this._minMaxAnimation;\r\n\r\n\t\t\tif (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tanimation = this.animateMinMax(min, max);\r\n\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.events.on(\"animationprogress\", this.validateDataItems, this);\r\n\r\n\t\t\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\t\t//this.validateDataItems();\r\n\t\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\t\tseries.validate();\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis._minMaxAnimation = animation;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\tseries.invalidate();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._minAdjusted = min;\r\n\t\t\t\t\tthis._maxAdjusted = max;\r\n\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tthis.invalidateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\r\n\t\t\t\t\tthis._saveMinMax(min, max);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._extremesChanged = false;\r\n\t\tthis._difference = this.adjustDifference(min, max);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\t// will fail if 0\r\n\t\tif (gridCount <= 1) {\r\n\t\t\tgridCount = 1;\r\n\t\t}\r\n\r\n\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\tlet initialMin: number = min;\r\n\t\tlet initialMax: number = max;\r\n\r\n\t\t// in case min and max is the same, use max\r\n\t\tif (difference === 0) {\r\n\t\t\tdifference = Math.abs(max);\r\n\t\t}\r\n\r\n\t\t// the number by which we need to raise 10 to get difference\r\n\t\tlet exponent: number = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\r\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t// reduce this number by 10 times\r\n\t\tpower = power / 10;\r\n\r\n\t\tlet extra: number = power;\r\n\t\tif (strictMode) {\r\n\t\t\textra = 0;\r\n\t\t}\r\n\r\n\t\tif (!this.logarithmic) {\r\n\r\n\t\t\t// round down min\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin = Math.floor(min / power) * power;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.ceil(max / power) * power;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.ceil(min / power) * power - extra;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.floor(max / power) * power + extra;\r\n\t\t\t}\r\n\r\n\t\t\t// don't let min go below 0 if real min is >= 0\r\n\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\tmin = 0;\r\n\t\t\t}\r\n\t\t\t// don't let max go above 0 if real max is <= 0\r\n\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\tmax = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\t//throw Error(\"Logarithmic value axis can not have values <= 0.\");\r\n\t\t\t\tmin = this.baseValue;\r\n\t\t\t}\r\n\r\n\t\t\t// @todo: think of a better way or to restrict zooming when no series are selected\r\n\t\t\tif (min == Infinity) {\r\n\t\t\t\tmin = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (max == -Infinity) {\r\n\t\t\t\tmax = 10;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tif (this._minDefined > 0) {\r\n\t\t\t\t\tmin = this._minDefined;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmin = min;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._maxDefined > 0) {\r\n\t\t\t\t\tmax = max;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\r\n\t\t\t\tmax = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\r\n\t\t\t}\r\n\t\t}\r\n\t\t// repeat diff, exponent and power again with rounded values\r\n\t\t//difference = this.adjustDifference(min, max);\r\n\t\t/*\r\n\r\n\t\t\t\tif(min > initialMin){\r\n\t\t\t\t\tmin = initialMin;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(max < initialMax){\r\n\t\t\t\t\tmax = initialMax;\r\n\t\t\t\t}\r\n\t\t*/\r\n\r\n\t\texponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\t\tpower = Math.pow(10, Math.floor(exponent));\r\n\t\tpower = power / 10;\r\n\r\n\t\t// approximate difference between two grid lines\r\n\t\tlet step = Math.ceil((difference / gridCount) / power) * power;\r\n\r\n\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\r\n\r\n\t\t// TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\r\n\t\t// the step should divide by  2, 5, and 10.\r\n\t\tlet stepDivisor: number = Math.ceil(step / stepPower); // number 0 - 10\r\n\r\n\r\n\t\tif (stepDivisor > 5) {\r\n\t\t\tstepDivisor = 10;\r\n\t\t}\r\n\t\telse if (stepDivisor <= 5 && stepDivisor > 2) {\r\n\t\t\tstepDivisor = 5;\r\n\t\t}\r\n\r\n\t\t// now get real step\r\n\t\tstep = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\r\n\r\n\t\tif (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\r\n\t\t\tstep = $math.ceil(step, this.maxPrecision);\r\n\t\t}\r\n\r\n\t\tlet decCount: number = 0;\r\n\t\t// in case numbers are smaller than 1\r\n\t\tif (stepPower < 1) {\r\n\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\tdecCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\r\n\t\t\t// round step\r\n\t\t\tstep = $math.round(step, decCount);\r\n\t\t}\r\n\t\tif (!this.logarithmic) {\r\n\t\t\t// final min and max\r\n\t\t\tlet minCount = Math.floor(min / step);\r\n\r\n\t\t\tmin = $math.round(step * minCount, decCount);\r\n\r\n\t\t\tlet maxCount: number;\r\n\r\n\t\t\tif (!strictMode) {\r\n\t\t\t\tmaxCount = Math.ceil(max / step);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxCount = Math.floor(max / step);\r\n\t\t\t}\r\n\r\n\t\t\tif (maxCount == minCount) {\r\n\t\t\t\tmaxCount++;\r\n\t\t\t}\r\n\r\n\t\t\tmax = $math.round(step * maxCount, decCount);\r\n\r\n\t\t\tif (max < initialMax) {\r\n\t\t\t\tmax = max + step;\r\n\t\t\t}\r\n\r\n\t\t\tif (min > initialMin) {\r\n\t\t\t\tmin = min - step;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * A minimum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Min value\r\n\t */\r\n\tpublic set min(value: number | undefined) {\r\n\t\tif (this._minDefined != value) {\r\n\t\t\tthis._minDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min value\r\n\t */\r\n\tpublic get min(): number | undefined {\r\n\t\tlet min = this._minAdjusted;\r\n\t\tif (!$type.isNumber(min)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\r\n\t/**\r\n\t * Min value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Min value\r\n\t */\r\n\tpublic get minDefined(): number {\r\n\t\treturn this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Max value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Man value\r\n\t */\r\n\tpublic get maxDefined(): number {\r\n\t\treturn this._maxDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting minimum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n\t * we asked to expand minimum value by 50% (0.5).\r\n\t *\r\n\t * NOTE: this setting is not compatible with `strictMinMax`.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMin(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMin\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get extraMin(): number {\r\n\t\treturn this.getPropertyValue(\"extraMin\");\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting maximum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n\t * we asked to expand maximum value by 50% (0.5).\r\n\t *\r\n\t * NOTE: this setting is not compatible with `strictMinMax`.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMax(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMax\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min multiplier\r\n\t */\r\n\tpublic get extraMax(): number {\r\n\t\treturn this.getPropertyValue(\"extraMax\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current calculated delta in values between two adjacent grid lines (step).\r\n\t *\r\n\t * This is a read-only value and cannot be used to set actual step.\r\n\t *\r\n\t * @readonly\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n\t * @return [description]\r\n\t */\r\n\tpublic get step(): number {\r\n\t\treturn this._step;\r\n\t}\r\n\r\n\t/**\r\n\t * A maximum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Max value\r\n\t */\r\n\tpublic set max(value: number | undefined) {\r\n\t\tif (this._maxDefined != value) {\r\n\t\t\tthis._maxDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max value\r\n\t */\r\n\tpublic get max(): number | undefined {\r\n\t\tlet max = this._maxAdjusted;\r\n\t\tif (!$type.isNumber(max)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\t\treturn max;\r\n\t}\r\n\r\n\t/**\r\n\t * By default the axis will adjust precision of all numbers to match number\r\n\t * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n\t *\r\n\t * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n\t * precision or number format settings are set.\r\n\t *\r\n\t * IMPORTANT: This setting will be ignored if your number format uses\r\n\t * modifiers, e.g. `\"#a\"`.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.9.14\r\n\t * @param  value  Adjust precision\r\n\t */\r\n\tpublic set adjustLabelPrecision(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Adjust precision\r\n\t */\r\n\tpublic get adjustLabelPrecision(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustLabelPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Used for the Series to register itself as the user of this Axis.\r\n\t *\r\n\t * This will also decorate both the Series and Axis with event handlers, used\r\n\t * to redraw on Axis position/zoom change.\r\n\t *\r\n\t * A disposer for those events is returned, so that they can be disposed\r\n\t * together with Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series  Series\r\n\t * @return Disposer for events\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\treturn new MultiDisposer([\r\n\t\t\tsuper.registerSeries(series),\r\n\r\n\t\t\tseries.events.on(\"extremeschanged\", this.handleExtremesChange, this, false),\r\n\t\t\tseries.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false),\r\n\t\t\tthis.events.on(\"extremeschanged\", series.invalidate, series, false)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * Perform tasks after Axis zoom.\r\n\t */\r\n\tprotected handleSelectionExtremesChange(): void {\r\n\r\n\t\tlet selectionMin: number;\r\n\t\tlet selectionMax: number;\r\n\r\n\t\tlet allHidden: boolean = true;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\r\n\r\n\t\t\t\tif (series.visible && !series.isHiding) {\r\n\t\t\t\t\tallHidden = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesSelectionMin: number = series.selectionMin(this);\r\n\t\t\t\tlet seriesSelectionMax: number = series.selectionMax(this);\r\n\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMin)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMin) || (seriesSelectionMin < selectionMin)) {\r\n\t\t\t\t\t\tselectionMin = seriesSelectionMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// check max\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMax)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMax) || (seriesSelectionMax > selectionMax)) {\r\n\t\t\t\t\t\tselectionMax = seriesSelectionMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (this.includeRangesInMinMax) {\r\n\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\t\t\t\t\tif (minValue < selectionMin) {\r\n\t\t\t\t\t\tselectionMin = minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (maxValue > selectionMax) {\r\n\t\t\t\t\t\tselectionMax = maxValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\r\n\t\t//$iter.each(this.series.iterator(), (series) => {\r\n\t\t//\tif (!series.appeared) {\r\n\t\t//\t\tallHidden = true;\r\n\t\t//\t}\r\n\t\t//})\r\n\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMin = this.min;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMin = this._minReal;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMax = this.max;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMax = this._maxReal;\r\n\t\t}\r\n\r\n\t\tif (selectionMin == selectionMax) {\r\n\r\n\t\t\tselectionMin -= this._deltaMinMax;\r\n\t\t\tselectionMax += this._deltaMinMax;\r\n\r\n\t\t\tlet minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\r\n\t\t\tselectionMin = minMaxStep2.min;\r\n\t\t\tselectionMax = minMaxStep2.max;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tselectionMin -= (selectionMax - selectionMin) * this.extraMin;\r\n\t\tselectionMax += (selectionMax - selectionMin) * this.extraMax;\r\n\r\n\t\tselectionMin = $math.fitToRange(selectionMin, this.min, this.max);\r\n\t\tselectionMax = $math.fitToRange(selectionMax, this.min, this.max);\r\n\r\n\t\t// do it for the second time !important\r\n\t\tdif = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tminMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tselectionMin = $math.max(selectionMin, this._minDefined);\r\n\t\t\tselectionMax = $math.min(selectionMax, this._maxDefined);\r\n\t\t}\r\n\t\tlet step = minMaxStep.step;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tminMaxStep = this.syncAxes(selectionMin, selectionMax, step)\r\n\t\t\tselectionMin = minMaxStep.min;\r\n\t\t\tselectionMax = minMaxStep.max;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t\tstep = minMaxStep.step;\r\n\r\n\t\t// needed because of grouping\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\r\n\t\tlet start: number = this.valueToPosition(selectionMin);\r\n\t\tlet end: number = this.valueToPosition(selectionMax);\r\n\r\n\t\t// in case all series are hidden or hiding, full zoomout\r\n\t\tif (allHidden && !this.syncWithAxis) {\r\n\t\t\tstart = 0;\r\n\t\t\tend = 1;\r\n\t\t}\r\n\r\n\t\tlet declination = 0;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tdeclination = 5;\r\n\t\t\tthis.setCache(selectionMin + \"-\" + selectionMax, step);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\r\n\t\t\t\tthis._dsc = true;\r\n\t\t\t}\r\n\t\t\tthis._step = step;\r\n\t\t\tthis._minZoomed = selectionMin;\r\n\t\t\tthis._maxZoomed = selectionMax;\r\n\t\t}\r\n\r\n\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tthis.zoom({ start: start, end: end }, false, false, declination);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether to blindly use exact `min` and `max` values set by user\r\n\t * when generating Axis scale.\r\n\t *\r\n\t * If not set, the Axis might slightly adjust those values to accomodate a\r\n\t * better looking grid.\r\n\t *\r\n\t * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n\t * will result in fixing the scale of the axis to actual lowest and highest\r\n\t * values in the series within currently selected scope.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use exact values?\r\n\t */\r\n\tpublic set strictMinMax(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"strictMinMax\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use exact values?\r\n\t */\r\n\tpublic get strictMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"strictMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this axis should use a logarithmic scale.\r\n\t *\r\n\t * Please note that logarithmic axis can **only** accommodate values bigger\r\n\t * than zero.\r\n\t *\r\n\t * Having zero or negative values will result in error and failure of the\r\n\t * whole chart.\r\n\t *\r\n\t * @param value Logarithmic scale?\r\n\t */\r\n\tpublic set logarithmic(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"logarithmic\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.invalidateDataItems();\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Logarithmic scale?\r\n\t */\r\n\tpublic get logarithmic(): boolean {\r\n\t\treturn this.getPropertyValue(\"logarithmic\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if a current selection (zoom) should be kept across data updates.\r\n\t *\r\n\t * If your axis is zoomed while chart's data is updated, the axis will try\r\n\t * to retain the same start and end values.\r\n\t *\r\n\t * You can also use this to initially pre-zoom axis:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"keepSelection\": true,\r\n\t *     \"start\": 0.5,\r\n\t *     \"end\": 0.7\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will start the chart zoomed from the middle of the actual scope\r\n\t * to 70%.\r\n\t *\r\n\t * @since 4.1.1\r\n\t * @default false\r\n\t * @param  value  Preseve zoom after data update?\r\n\t */\r\n\tpublic set keepSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"keepSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Preseve zoom after data update?\r\n\t */\r\n\tpublic get keepSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"keepSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, values of axis ranges will be included when calculating\r\n\t * range of values / scale of the [[ValueAxis]].\r\n\t *\r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Include ranges?\r\n\t */\r\n\tpublic set includeRangesInMinMax(value: boolean) {\r\n\t\tthis.setPropertyValue(\"includeRangesInMinMax\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Include ranges?\r\n\t */\r\n\tpublic get includeRangesInMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"includeRangesInMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of decimals to allow when placing grid lines and labels\r\n\t * on axis.\r\n\t *\r\n\t * Set it to `0` (zero) to force integer-only axis labels.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return max precision\r\n\t */\r\n\tpublic get maxPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"maxPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * This setting allows using bigger precision for numbers displayed in axis\r\n\t * tooltip.\r\n\t *\r\n\t * Please note that this setting indicates additional decimal places to\r\n\t * automatically-calculated axis number precision.\r\n\t *\r\n\t * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n\t * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n\t * like 0.12, 0.25, etc. (two decimal places).\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.8.3\r\n\t * @param  value  Extra decimals\r\n\t */\r\n\tpublic set extraTooltipPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Extra decimals\r\n\t */\r\n\tpublic get extraTooltipPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"extraTooltipPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tthis._extremesChanged = true;\r\n\t\tthis.getMinMax();\r\n\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tlet mw = 0;\r\n\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tif (dataItem.label && dataItem.label.pixelWidth > mw) {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  ?\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  ?\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueX\";\r\n\t\t}\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  Stack ID\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start     [description]\r\n\t * @param end       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: number, end: number, location?: number): string {\r\n\t\tlet startPosition: number = this.valueToPosition(start);\r\n\t\tlet endPosition: number = this.valueToPosition(end);\r\n\r\n\t\treturn this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\r\n\t\tlet valueStr = this.tooltip.numberFormatter.format(value);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t *\r\n\t * @param startValue      Start value\r\n\t * @param endValue        End value\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tlet start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\tlet end: number = (endValue - this.min) / (this.max - this.min);\r\n\r\n\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * A smallest value in axis scale within current zoom.\r\n\t *\r\n\t * @return Min zoom value\r\n\t */\r\n\tpublic get minZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.max(this.min, this._minZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._minZoomed\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A biggest value in axis scale within current zoom.\r\n\t * @return [description]\r\n\t */\r\n\tpublic get maxZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.min(this.max, this._maxZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._maxZoomed;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t// break difference\r\n\t\t\t\tlet axisBreakDif: number = endValue - startValue;\r\n\t\t\t\tlet axisBreakGridCount: number = Math.ceil(axisBreakDif * axisBreak.breakSize) * this._gridCount / (this.max - this.min);\r\n\r\n\t\t\t\t// calculate min, max and step for axis break\r\n\t\t\t\tlet breakMinMaxStep = this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\r\n\r\n\t\t\t\taxisBreak.adjustedStep = breakMinMaxStep.step;\r\n\t\t\t\taxisBreak.adjustedMin = breakMinMaxStep.min;\r\n\t\t\t\taxisBreak.adjustedMax = breakMinMaxStep.max;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\treturn this.numberFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific value\r\n\t *\r\n\t * @param value Value\r\n\t */\r\n\tpublic showTooltipAt(value: number) {\r\n\t\tthis.showTooltipAtPosition(this.valueToPosition(value));\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.min = source.min;\r\n\t\tthis.max = source.max;\r\n\t\tthis.calculateTotals = source.calculateTotals;\r\n\t\tthis._baseValue = source.baseValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Enables syncing of grid with another axis.\r\n\t *\r\n\t * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n\t * to maintain its scale in such way that its grid matches target axis grid.\r\n\t *\r\n\t * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n\t * own risk, as it may not work in 100% of the scenarios.\r\n\t *\r\n\t * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n\t * `sequencedInterpolation` settings.\r\n\t * \r\n\t * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n\t * you do not add a scrollbar in the same direction as synced axes. For\r\n\t * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n\t * your chart. It will create anomalies when used.\r\n\t *\r\n\t * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n\t * its `behavior` set to either `zoomY` or `zoomXY`.\r\n\t *\r\n\t * @since 4.8.1\r\n\t * @param  axis  Target axis\r\n\t */\r\n\tpublic set syncWithAxis(axis: ValueAxis) {\r\n\t\tif (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\r\n\t\t\tif (axis) {\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\r\n\t\t\t\tthis.events.on(\"maxsizechanged\", () => {\r\n\t\t\t\t\tthis.clearCache();\r\n\t\t\t\t\tthis._disposers.push(registry.events.once(\"exitframe\", () => {\r\n\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t}))\r\n\t\t\t\t}, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Target axis\r\n\t */\r\n\tpublic get syncWithAxis(): ValueAxis {\r\n\t\treturn this.getPropertyValue(\"syncWithAxis\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set, zero values will be treated as this value.\r\n\t *\r\n\t * It is useful if you need to use data with zero-values on a logarithmic\r\n\t * axis scale.\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @param  value  Zero replacement value\r\n\t */\r\n\tpublic set treatZeroAs(value: number) {\r\n\t\tthis.setPropertyValue(\"treatZeroAs\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zero replacement value\r\n\t */\r\n\tpublic get treatZeroAs(): number {\r\n\t\treturn this.getPropertyValue(\"treatZeroAs\");\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs with a target axis.\r\n\t *\r\n\t * @param  min  Min\r\n\t * @param  max  Max\r\n\t * @param  step Step\r\n\t */\r\n\tprotected syncAxes(min: number, max: number, step: number) {\r\n\t\tlet axis = this.syncWithAxis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tif (!$type.isNumber(min)) {\r\n\t\t\t\tmin = this.min;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(max)) {\r\n\t\t\t\tmax = this.max;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(step)) {\r\n\t\t\t\tstep = this._step;\r\n\t\t\t}\r\n\r\n\t\t\tlet count: number = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\r\n\t\t\tlet currentCount = Math.round((max - min) / step);\r\n\r\n\t\t\tif ($type.isNumber(count) && $type.isNumber(currentCount)) {\r\n\t\t\t\tlet synced = false;\r\n\t\t\t\tlet c = 0\r\n\t\t\t\tlet diff = (max - min) * 0.01;\r\n\t\t\t\tlet omin = min;\r\n\t\t\t\tlet omax = max;\r\n\t\t\t\tlet ostep = step;\r\n\r\n\t\t\t\twhile (synced != true) {\r\n\t\t\t\t\tsynced = this.checkSync(omin, omax, ostep, count);\r\n\t\t\t\t\tc++;\r\n\t\t\t\t\tif (c > 1000) {\r\n\t\t\t\t\t\tsynced = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!synced) {\r\n\t\t\t\t\t\t//omin = min - diff * c;\r\n\r\n\t\t\t\t\t\tif (c / 3 == Math.round(c / 3)) {\r\n\t\t\t\t\t\t\tomin = min - diff * c;\r\n\t\t\t\t\t\t\tif (min >= 0 && omin < 0) {\r\n\t\t\t\t\t\t\t\tomin = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tomax = max + diff * c;\r\n\t\t\t\t\t\t\tif (omax <= 0 && omax > 0) {\r\n\t\t\t\t\t\t\t\tomax = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\r\n\t\t\t\t\t\tomin = minMaxStep.min;\r\n\t\t\t\t\t\tomax = minMaxStep.max;\r\n\t\t\t\t\t\tostep = minMaxStep.step;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmin = omin;\r\n\t\t\t\t\t\tmax = omax;\r\n\t\t\t\t\t\tstep = ostep;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if axis needs to be resunced with some other axis.\r\n\t */\r\n\tprotected checkSync(min: number, max: number, step: number, count: number): boolean {\r\n\t\tlet currentCount = (max - min) / step;\r\n\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\tif ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.syncWithAxis)) {\r\n\t\t\t\t\tconfig.syncWithAxis = this.map.getKey(config.syncWithAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected _saveMinMax(_min: number, _max: number) {\r\n\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\r\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;\r\n","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { LineSeriesDataItem } from \"../series/LineSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { DateFormatter } from \"../../core/formatters/DateFormatter\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tskipEmptyPeriods?: boolean;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\ttooltipDateFormat?: string | Intl.DateTimeFormatOptions;\r\n\r\n\t/**\r\n\t * Indicates if data should be aggregated to composide data items if there\r\n\t * are more data items in selected range than `groupCount`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.7.0\r\n\t */\r\n\tgroupData?: boolean;\r\n\r\n\t/**\r\n\t * Indicates threshold of data items in selected range at which to start\r\n\t * aggregating data items if `groupData = true`.\r\n\t * \r\n\t * @default 200\r\n\t * @since 4.7.0\r\n\t */\r\n\tgroupCount?: number;\r\n\r\n\t/**\r\n\t * Disables automatic selection of data grouping intervals and always uses\r\n\t * `groupInterval` if set. Works only if `groupData = true`.\r\n\t * \r\n\t * @since 4.9.24\r\n\t */\r\n\tgroupInterval?: ITimeInterval;\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data by applying specific offset\r\n\t * in minutes.\r\n\t *\r\n\t * IMPORTANT: do not set `timezoneOffset` on both `DateAxis` and `dateFormatter`. It\r\n\t * will skew your results by applying offset twice.\r\n\t *\r\n\t * @since 4.8.5\r\n\t */\r\n\ttimezoneOffset?: number;\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data to specific named timezone,\r\n\t * e.g. `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`, etc.\r\n\t *\r\n\t * IMPORTANT: do not set `timezone` on both `DateAxis` and `dateFormatter`. It\r\n\t * will skew your results by applying timezone twice.\r\n\t * \r\n\t * @since 4.10.1\r\n\t */\r\n\ttimezone?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents {\r\n\t/**\r\n\t * Invoked when data grouping is on and grouping period is changed. You can find our the period via dateAxis.currentDataSetId property.\r\n\t */\r\n\tgroupperiodchanged: IDateAxisEvents;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/} got `DateAxis` documention\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\tprotected _gapBreaks: boolean = false;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * If data aggregation is enabled by setting Axis' `groupData = true`, the\r\n\t * chart will try to aggregate data items into grouped data items.\r\n\t *\r\n\t * If there are more data items in selected period than `groupCount`, it will\r\n\t * group data items into bigger period.\r\n\t *\r\n\t * For example seconds might be grouped into 10-second aggregate data items.\r\n\t *\r\n\t * This setting indicates what group intervals can the chart group to.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { timeUnit: \"millisecond\", count: 1},\r\n\t *   { timeUnit: \"millisecond\", count: 10 },\r\n\t *   { timeUnit: \"millisecond\", count: 100 },\r\n\t *   { timeUnit: \"second\", count: 1 },\r\n\t *   { timeUnit: \"second\", count: 10 },\r\n\t *   { timeUnit: \"minute\", count: 1 },\r\n\t *   { timeUnit: \"minute\", count: 10 },\r\n\t *   { timeUnit: \"hour\", count: 1 },\r\n\t *   { timeUnit: \"day\", count: 1 },\r\n\t *   { timeUnit: \"week\", count: 1 },\r\n\t *   { timeUnit: \"month\", count: 1 },\r\n\t *   { timeUnit: \"year\", count: 1 }\r\n\t * ]\r\n\t * ```\r\n\t * `groupData = true` does not work in combination with `skipEmptyPeriods = true`.\r\n\t * \r\n\t * @since 4.7.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t */\r\n\tpublic groupIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the appropriate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions> = new Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions> = new Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * This is base interval of the main data set.\r\n\t */\r\n\tprotected _mainBaseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * This is base interval of the currently selected data set.\r\n\t */\r\n\tprotected _groupInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t */\r\n\tprotected _prevSeriesTime: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _firstWeekDay: number = 1;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _df: DateFormatter;\r\n\r\n\t/**\r\n\t * A collection of start timestamps to use as axis' min timestamp for\r\n\t * particular data item item periods.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @readonly\r\n\t */\r\n\tpublic groupMin: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A collection of start timestamps to use as axis' max timestamp for\r\n\t * particular data item item periods.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @readonly\r\n\t */\r\n\tpublic groupMax: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * Date of the last shown axis tooltip.\r\n\t *\r\n\t * @since 4.9.7\r\n\t * @readonly\r\n\t */\r\n\tpublic tooltipDate: Date;\r\n\r\n\r\n\tprotected _intervalMax: { [index: string]: number } = {};\r\n\tprotected _intervalMin: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\t\tthis.snapTooltip = true;\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.setPropertyValue(\"groupData\", false);\r\n\t\tthis.groupCount = 200;\r\n\r\n\t\tthis.events.on(\"parentset\", this.getDFFormatter, this, false);\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\tthis.groupIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet baseDuration = this.baseDuration;\r\n\t\tlet periodCount: number = (this.max - this.min) / baseDuration;\r\n\r\n\t\tthis._firstWeekDay = this.getFirstWeekDay();\r\n\t\tthis.getDFFormatter();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tlet mainBaseDuration = $time.getDuration(this.mainBaseInterval.timeUnit, this.mainBaseInterval.count)\r\n\r\n\t\tthis.maxZoomFactor = Math.max(1, (this.max - this.min) / mainBaseDuration);\r\n\r\n\t\tthis._deltaMinMax = this.baseDuration / 2;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getIntervalMax(interval: ITimeInterval): number {\r\n\t\treturn this._intervalMax[interval.timeUnit + interval.count];\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getIntervalMin(interval: ITimeInterval): number {\r\n\t\treturn this._intervalMin[interval.timeUnit + interval.count];\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet difference = this.adjustDifference(this._minZoomed, this._maxZoomed);\r\n\t\tlet dataSetChanged = false;\r\n\r\n\t\t// if data has to be grouped, choose interval and set dataset\r\n\t\tif (this.groupData && $type.hasValue(difference)) {\r\n\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\r\n\t\t\tconst min = this.getIntervalMin(mainBaseInterval);\r\n\t\t\tconst max = this.getIntervalMax(mainBaseInterval);\r\n\r\n\t\t\tlet selectionMin = min + (max - min) * this.start;\r\n\t\t\tlet selectionMax = min + (max - min) * this.end;\r\n\t\t\tlet diff = this.adjustDifference(selectionMin, selectionMax);\r\n\r\n\t\t\tlet modifiedDifference = diff + (this.startLocation + (1 - this.endLocation)) * this.baseDuration;\r\n\t\t\tlet groupInterval: ITimeInterval;\r\n\t\t\tif (this.groupInterval) {\r\n\t\t\t\tgroupInterval = { ...this.groupInterval }\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgroupInterval = this.chooseInterval(0, modifiedDifference, this.groupCount, this.groupIntervals);\r\n\t\t\t\tif ($time.getDuration(groupInterval.timeUnit, groupInterval.count) < $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count)) {\r\n\t\t\t\t\tgroupInterval = { ...mainBaseInterval };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._groupInterval = groupInterval;\r\n\t\t\tlet newId = groupInterval.timeUnit + groupInterval.count;\r\n\t\t\tif (this._currentDataSetId != newId) {\r\n\t\t\t\tthis._currentDataSetId = newId;\r\n\t\t\t\tthis.dispatch(\"groupperiodchanged\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tif (series.setDataSet(this._currentDataSetId)) {\r\n\t\t\t\t\t\tdataSetChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, difference, this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tthis._gridDate = $time.round(\r\n\t\t\tnew Date(this.minZoomed - $time.getDuration(gridInterval.timeUnit, gridInterval.count)),\r\n\t\t\tgridInterval.timeUnit,\r\n\t\t\tgridInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tnew Date(this.min),\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\tlet minZoomed = $time.round(\r\n\t\t\t\t\tnew Date(this._minZoomed + this.baseDuration * 0.05),\r\n\t\t\t\t\tthis.baseInterval.timeUnit, this.baseInterval.count,\r\n\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\tundefined,\r\n\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t).getTime();\r\n\t\t\t\tlet minZoomedStr = minZoomed.toString();\r\n\t\t\t\tlet startDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(minZoomedStr + series.currentDataSetId);\r\n\r\n\t\t\t\tlet startIndex: number = 0;\r\n\t\t\t\tif (this.start != 0) {\r\n\t\t\t\t\tif (startDataItem) {\r\n\t\t\t\t\t\tstartDataItem = this.findFirst(startDataItem, minZoomed, field);\r\n\t\t\t\t\t\tstartIndex = startDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstartIndex = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet baseInterval = this.baseInterval;\r\n\t\t\t\tlet maxZoomed = $time.add(\r\n\t\t\t\t\t$time.round(\r\n\t\t\t\t\t\tnew Date(this._maxZoomed),\r\n\t\t\t\t\t\tbaseInterval.timeUnit,\r\n\t\t\t\t\t\tbaseInterval.count,\r\n\t\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t),\r\n\t\t\t\t\tbaseInterval.timeUnit,\r\n\t\t\t\t\tbaseInterval.count,\r\n\t\t\t\t\tthis._df.utc\r\n\t\t\t\t).getTime();\r\n\r\n\t\t\t\tlet maxZoomedStr = maxZoomed.toString();\r\n\t\t\t\tlet endDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(maxZoomedStr + series.currentDataSetId);\r\n\t\t\t\tlet endIndex: number = series.dataItems.length;\r\n\t\t\t\tif (this.end != 1) {\r\n\t\t\t\t\tif (endDataItem) {\r\n\t\t\t\t\t\tendIndex = endDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmaxZoomed -= 1;\r\n\t\t\t\t\t\tendIndex = series.dataItems.findClosestIndex(maxZoomed, (x) => <number>x[field], \"right\");\r\n\t\t\t\t\t\t// not good - if end is in the gap, indexes go like 5,4,3,4,2,1\r\n\t\t\t\t\t\t//if (endIndex < series.dataItems.length) {\r\n\t\t\t\t\t\tendIndex++;\r\n\t\t\t\t\t\t//}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.max(this) < minZoomed) {\r\n\t\t\t\t\tseries.startIndex = series.dataItems.length;\r\n\t\t\t\t\tseries.endIndex = series.dataItems.length;\r\n\t\t\t\t\tseries.outOfRange = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.min(this) > maxZoomed) {\r\n\t\t\t\t\tseries.startIndex = 0;\r\n\t\t\t\t\tseries.endIndex = 0;\r\n\t\t\t\t\tseries.outOfRange = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.outOfRange = false;\r\n\t\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//\tconsole.log(series.name, startIndex, endIndex);\r\n\r\n\t\t\t\tif (!dataSetChanged && series.dataRangeInvalid) {\r\n\t\t\t\t\tseries.validateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprotected findFirst(dataItem: XYSeriesDataItem, time: number, key: string): XYSeriesDataItem {\r\n\t\tlet index = dataItem.index;\r\n\r\n\t\tif (index > 0) {\r\n\t\t\tlet series = dataItem.component;\r\n\t\t\tlet previousDataItem = series.dataItems.getIndex(index - 1);\r\n\r\n\t\t\tlet previousDate = (<any>previousDataItem)[key];\r\n\r\n\t\t\tif (!previousDate || previousDate.getTime() < time) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.findFirst(previousDataItem, time, key);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference(): number {\r\n\t\tlet minDifference = Number.MAX_VALUE;\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (minDifference > this._minDifference[series.uid]) {\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n\t\t\tminDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(series?: XYSeries): void {\r\n\t\tthis._firstWeekDay = this.getFirstWeekDay();\r\n\t\tif (series) {\r\n\t\t\tthis.seriesGroupUpdate(series);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tthis.seriesGroupUpdate(series);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\tprotected seriesGroupUpdate(series: XYSeries) {\r\n\t\tif (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.mainBaseInterval)) {\r\n\r\n\t\t\tseries._baseInterval[this.uid] = this.mainBaseInterval;\r\n\r\n\t\t\tseries.mainDataSet.each((dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tif (this.groupData) {\r\n\t\t\t\tthis.groupSeriesData(series);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates series group data.\r\n\t * \r\n\t * @param  series  Series\r\n\t * @ignore\r\n\t */\r\n\tpublic groupSeriesData(series: XYSeries): void {\r\n\t\tif (series.baseAxis == this && series.dataItems.length > 0 && !series.dataGrouped) {\r\n\r\n\t\t\tseries.bulletsContainer.removeChildren();\r\n\r\n\t\t\t// make array of intervals which will be used;\r\n\t\t\tlet intervals: ITimeInterval[] = [];\r\n\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\t\t\tlet mainIntervalDuration = $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count);\r\n\r\n\t\t\tthis.groupIntervals.each((interval) => {\r\n\t\t\t\tlet intervalDuration = $time.getDuration(interval.timeUnit, interval.count);\r\n\t\t\t\tif ((intervalDuration > mainIntervalDuration && intervalDuration < (this.max - this.min)) || this.groupInterval) {\r\n\t\t\t\t\tintervals.push(interval);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (series._dataSets) {\r\n\t\t\t\tseries._dataSets.each((key, dataItems) => {\r\n\t\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.dispose();\r\n\t\t\t\t\t})\r\n\t\t\t\t\tdataItems.clear();\r\n\t\t\t\t})\r\n\t\t\t\tseries._dataSets.clear();\r\n\t\t\t}\r\n\r\n\t\t\tseries.dataGrouped = true;\r\n\r\n\t\t\t$array.each(intervals, (interval) => {\r\n\r\n\t\t\t\t//let mainBaseInterval = this._mainBaseInterval;\r\n\t\t\t\tlet key = \"date\" + this.axisLetter;\r\n\r\n\t\t\t\t// create data set\r\n\t\t\t\tlet dataSetId = interval.timeUnit + interval.count;\r\n\t\t\t\t// todo: check where this clone goes\r\n\t\t\t\tlet dataSet = new OrderedListTemplate(series.mainDataSet.template.clone());\r\n\r\n\t\t\t\tseries.dataSets.setKey(dataSetId, dataSet);\r\n\r\n\t\t\t\tlet dataItems = series.mainDataSet;\r\n\t\t\t\tlet previousTime: number = Number.NEGATIVE_INFINITY;\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\tlet newDataItem: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet dataFields: string[] = [];\r\n\r\n\t\t\t\t$object.each(series.dataFields, (dfkey, df) => {\r\n\t\t\t\t\tlet dfk = <string>dfkey;\r\n\t\t\t\t\tif (dfk != key && dfk.indexOf(\"Show\") == -1) {\r\n\t\t\t\t\t\tdataFields.push(dfk);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tlet roundedDate: Date;\r\n\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\tlet date = dataItem.getDate(key);\r\n\t\t\t\t\tif (date) {\r\n\t\t\t\t\t\tlet time = date.getTime();\r\n\t\t\t\t\t\troundedDate = $time.round(\r\n\t\t\t\t\t\t\tnew Date(time),\r\n\t\t\t\t\t\t\tinterval.timeUnit,\r\n\t\t\t\t\t\t\tinterval.count,\r\n\t\t\t\t\t\t\tthis._df.firstDayOfWeek,\r\n\t\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tlet currentTime = roundedDate.getTime();\r\n\t\t\t\t\t\t// changed period\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (previousTime < currentTime) {\r\n\r\n\t\t\t\t\t\t\tif (newDataItem && series._adapterO) {\r\n\t\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t\tnewDataItem.values[vkey].value = series._adapterO.apply(\"groupDataItem\", {\r\n\t\t\t\t\t\t\t\t\t\tdataItem: newDataItem,\r\n\t\t\t\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\t\t\t\tvalue: newDataItem.values[vkey].value\r\n\t\t\t\t\t\t\t\t\t}).value;\r\n\r\n\t\t\t\t\t\t\t\t\tnewDataItem.values[vkey].workingValue = newDataItem.values[vkey].value\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tnewDataItem = dataSet.create();\r\n\r\n\t\t\t\t\t\t\tnewDataItem.dataContext = {};\r\n\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"dateX\", series.dataItems.template.locations.dateX, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"openDateX\", series.dataItems.template.locations.openDateX, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"dateY\", series.dataItems.template.locations.dateY, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"openDateY\", series.dataItems.template.locations.openDateY, 0);\r\n\r\n\t\t\t\t\t\t\tnewDataItem.component = series;\r\n\t\t\t\t\t\t\t// other Dates?\r\n\t\t\t\t\t\t\tnewDataItem.setDate(key, roundedDate);\r\n\t\t\t\t\t\t\tnewDataItem._index = i;\r\n\t\t\t\t\t\t\ti++;\r\n\r\n\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t//let groupFieldName = vkey + \"Group\";\r\n\t\t\t\t\t\t\t\tlet dvalues = dataItem.values[vkey];\r\n\t\t\t\t\t\t\t\tif (dvalues) {\r\n\t\t\t\t\t\t\t\t\tlet value = dvalues.value;\r\n\r\n\t\t\t\t\t\t\t\t\tif (series._adapterO) {\r\n\t\t\t\t\t\t\t\t\t\tvalue = series._adapterO.apply(\"groupValue\", {\r\n\t\t\t\t\t\t\t\t\t\t\tdataItem: dataItem,\r\n\t\t\t\t\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t\t\t\t\t\t}).value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tlet values = newDataItem.values[vkey];\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tvalues.value = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.workingValue = value;\r\n\r\n\t\t\t\t\t\t\t\t\t\tvalues.open = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.close = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.low = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.high = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.sum = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.average = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.count = 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tvalues.count = 0;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\tthis.postProcessSeriesDataItem(newDataItem, interval);\r\n\r\n\t\t\t\t\t\t\t$object.each(series.propertyFields, (key, fieldValue) => {\r\n\t\t\t\t\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\t\t\t\t\tlet value: any = (<any>dataItem.properties)[key];\r\n\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\t\t\t\t\tnewDataItem.hasProperties = true;\r\n\t\t\t\t\t\t\t\t\tnewDataItem.setProperty(f, value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tnewDataItem.groupDataItems = [dataItem];\r\n\t\t\t\t\t\t\tpreviousTime = currentTime;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (newDataItem) {\r\n\t\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t\tlet groupFieldName = (<any>series.groupFields)[vkey];\r\n\t\t\t\t\t\t\t\t\tlet dvalues = dataItem.values[vkey];\r\n\t\t\t\t\t\t\t\t\tif (dvalues) {\r\n\t\t\t\t\t\t\t\t\t\tlet value = dvalues.value;\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (series._adapterO) {\r\n\t\t\t\t\t\t\t\t\t\t\tvalue = series._adapterO.apply(\"groupValue\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\tdataItem: dataItem,\r\n\t\t\t\t\t\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t\t\t\t\t\t\t}).value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet values = newDataItem.values[vkey];\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(values.open)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.open = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.close = value;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (values.low > value || !$type.isNumber(values.low)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.low = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif (values.high < value || !$type.isNumber(values.high)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.high = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(values.sum)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.sum += value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.sum = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.count++;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.average = values.sum / values.count;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(values[groupFieldName])) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.value = values[groupFieldName];\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.workingValue = values.value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(dataItem.properties, newDataItem.properties);\r\n\r\n\t\t\t\t\t\t\t\t$object.each(series.propertyFields, (key, fieldValue) => {\r\n\t\t\t\t\t\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\t\t\t\t\t\tlet value: any = (<any>dataItem.properties)[key];\r\n\t\t\t\t\t\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\t\t\t\t\t\tnewDataItem.hasProperties = true;\r\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setProperty(f, value);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tnewDataItem.groupDataItems.push(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (newDataItem) {\r\n\t\t\t\t\t\t$utils.copyProperties(dataItem.dataContext, newDataItem.dataContext);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (newDataItem && series._adapterO) {\r\n\r\n\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\tnewDataItem.values[vkey].value = series._adapterO.apply(\"groupDataItem\", {\r\n\t\t\t\t\t\t\tdataItem: newDataItem,\r\n\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\tvalue: newDataItem.values[vkey].value\r\n\t\t\t\t\t\t}).value;\r\n\r\n\t\t\t\t\t\tnewDataItem.values[vkey].workingValue = newDataItem.values[vkey].value;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.calculateZoom();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getDFFormatter() {\r\n\t\tthis._df = this.dateFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem, interval?: ITimeInterval): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet intervalID = \"\";\r\n\t\tif (interval) {\r\n\t\t\tintervalID = interval.timeUnit + interval.count;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinterval = this.mainBaseInterval;\r\n\t\t}\r\n\r\n\t\tlet series: XYSeries = dataItem.component;\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet time = date.getTime();\r\n\r\n\t\t\tlet startDate: Date = $time.round(\r\n\t\t\t\tnew Date(time),\r\n\t\t\t\tinterval.timeUnit,\r\n\t\t\t\tinterval.count,\r\n\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\tthis._df.utc,\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\tthis._df.timezone\r\n\t\t\t);\r\n\t\t\tlet startTime = startDate.getTime();\r\n\t\t\tlet endDate: Date = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startTime, \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\t\t\tdataItemsByAxis.setKey(startTime + intervalID, dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\tthis._axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\t\t\t}\r\n\r\n\t\t\tlet date: Date = $time.round(\r\n\t\t\t\tnew Date(this.min),\r\n\t\t\t\ttimeUnit,\r\n\t\t\t\tcount,\r\n\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\tthis._df.utc,\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\tthis._df.timezone\r\n\t\t\t);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr + series.currentDataSetId);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t\tthis._gapBreaks = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\tif (axisBreaks) {\r\n\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t// process breaks\r\n\t\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\t\t\tlet gridDate = $time.round(\r\n\t\t\t\t\t\tnew Date(axisBreak.adjustedStartValue),\r\n\t\t\t\t\t\taxisBreak.gridInterval.timeUnit,\r\n\t\t\t\t\t\taxisBreak.gridInterval.count,\r\n\t\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this._df.utc);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getFirstWeekDay(): number {\r\n\t\tif (this._df) {\r\n\t\t\treturn this._df.firstDayOfWeek;\r\n\t\t}\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param date           [description]\r\n\t * @param intervalCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(\r\n\t\t\tdate,\r\n\t\t\ttimeUnit,\r\n\t\t\t1,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount, this._df.utc).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak && axisBreak.endDate) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(\r\n\t\t\t\tnewDate,\r\n\t\t\t\ttimeUnit,\r\n\t\t\t\trealIntervalCount,\r\n\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\tthis._df.utc,\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\tthis._df.timezone\r\n\t\t\t);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount, this._df.utc);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axisBreak  [description]\r\n\t * @param timeUnit   [description]\r\n\t * @param count      [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(\r\n\t\t\tdate,\r\n\t\t\ttimeUnit,\r\n\t\t\tcount,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate($time.copy(prevGridDate), intervalCount);\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this._df.utc);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this._df.utc)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this._df.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\t$iter.each(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count, this._df.utc).getTime();\r\n\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this._df.utc);\r\n\r\n\t\t\t\t\t\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this._df.utc)) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tlet text: string = this._df.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\t\t\tlet fillEndPosition = endPosition;\r\n\r\n\t\t\tif (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.bullet) {\r\n\t\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param min  Min timestamp\r\n\t * @param max  Max timestamp\r\n\t * @return Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet interval = this.baseInterval;\r\n\r\n\t\tlet startTime = $time.round(\r\n\t\t\tnew Date(value),\r\n\t\t\tinterval.timeUnit,\r\n\t\t\tinterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet interval = this.baseInterval;\r\n\r\n\t\tlet startTime = $time.round(\r\n\t\t\tnew Date(value),\r\n\t\t\tinterval.timeUnit,\r\n\t\t\tinterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param index      [description]\r\n\t * @param duration   [description]\r\n\t * @param gridCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number, intervals?: List<ITimeInterval>): ITimeInterval {\r\n\t\tif (!intervals) {\r\n\t\t\tintervals = this.gridIntervals;\r\n\t\t}\r\n\r\n\t\tlet gridInterval: ITimeInterval = intervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = intervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...intervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...intervals.getIndex(index - 1) };\r\n\t\t}\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...intervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < intervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount, intervals);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...intervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this._df.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param date  Date\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param date  Date or a timestamp\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param date Date\r\n\t * @return IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param key       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tlet workingValue = dataItem.values[key].workingValue;\r\n\t\tlet value = dataItem.values[key].value;\r\n\r\n\t\tlet difference = value - workingValue;\r\n\t\tstartTime -= difference;\r\n\t\tendTime -= difference;\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\r\n\t\tif ($type.isNumber(this.timezoneOffset)) {\r\n\t\t\tdate.setTime(date.getTime() + (date.getTimezoneOffset() - this.timezoneOffset) * 60000)\r\n\t\t\tdataItem.setValue(\"date\" + axisLetter, date.getTime(), 0);\r\n\t\t}\r\n\t\telse if ($type.hasValue(this.timezone)) {\r\n\t\t\tdate = $time.setTimezone(date, this.timezone);\r\n\t\t\tdataItem.setValue(\"date\" + axisLetter, date.getTime(), 0);\r\n\t\t\t(<any>dataItem)[\"date\" + axisLetter] = date;\r\n\t\t}\r\n\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime[series.uid];\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime[series.uid] = time;\r\n\r\n\t\tif (series._baseInterval[this.uid]) {\r\n\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\r\n\t\t// handle short months\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\tif (baseInterval.timeUnit == \"month\") {\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 2) && baseInterval.count == 1) {\r\n\t\t\t\tbaseInterval.count = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 3) && baseInterval.count == 2) {\r\n\t\t\t\tbaseInterval.count = 3;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 6) && baseInterval.count == 5) {\r\n\t\t\t\tbaseInterval.count = 6;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\r\n\t\t\tbaseInterval.timeUnit = \"week\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\r\n\t\t\tbaseInterval.timeUnit = \"year\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\tthis._mainBaseInterval = baseInterval;\r\n\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * For best results, try to follow these values for `count`:\r\n\t *\r\n\t * When unit is \"month\", use 12 / count = round number\r\n\t * When unit is \"hour\", use 24 / count = round number\r\n\t * When unit is \"second\" and \"minute\", use 60 / count = round number\r\n\t *\r\n\t * @param timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tif (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n\t\t\tthis._baseInterval = timeInterval;\r\n\t\t\tthis._mainBaseInterval = timeInterval;\r\n\t\t\tif (!$type.isNumber(timeInterval.count)) {\r\n\t\t\t\ttimeInterval.count = 1;\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._groupInterval) {\r\n\t\t\treturn this._groupInterval;\r\n\t\t}\r\n\t\telse if (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates granularity of the data of source (unaggregated) data.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @return Granularity of the main data set\r\n\t */\r\n\tpublic get mainBaseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse if (this._mainBaseInterval) {\r\n\t\t\treturn this._mainBaseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t * * Some axis label overlapping might happen.\r\n\t * * This setting is not compatible with `groupData = true`.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._gapBreaks) {\r\n\t\t\t\tthis.axisBreaks.clear();\r\n\t\t\t\tthis._gapBreaks = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string | Intl.DateTimeFormatOptions) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string | Intl.DateTimeFormatOptions {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position\r\n\t * @return Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(\r\n\t\t\tdate,\r\n\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\tthis.baseInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tnew Date(this.min),\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tthis.tooltipDate = date;\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this._df.format(date, this.tooltipDateFormat, [\"day\", \"month\", \"week\", \"year\"].indexOf(this.baseInterval.timeUnit) == -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this._df.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn text;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", text);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position Source position\r\n\t * @param location  Location in the cell\r\n\t * @return Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation, axisLocation?: number): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(\r\n\t\t\tdate,\r\n\t\t\ttimeUnit,\r\n\t\t\tcount,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count, this._df.utc);\r\n\t\t}\r\n\r\n\t\tif (axisLocation > 0 && axisLocation < 1) {\r\n\t\t\tdate.setTime(date.getTime() + this.baseDuration * axisLocation);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\t\t\t\tif (!this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * If `findNearest` (third parameter) is set to `true`, the method will try\r\n\t * to locate nearest available data item if none is found directly under\r\n\t * `position`.\r\n\t *\r\n\t * @param series       Series\r\n\t * @param position     Position (px)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tlet value: number = this.positionToValue(position);\r\n\r\n\t\tlet location = 0.5;\r\n\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\tlocation = series.dataItems.template.locations.dateY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlocation = series.dataItems.template.locations.dateX;\r\n\t\t}\r\n\r\n\t\tlet deltaValue = value - location * this.baseDuration;\r\n\r\n\t\tlet date: Date = $time.round(\r\n\t\t\tnew Date(value),\r\n\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\tthis.baseInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\t\tlet nextDate: Date = $time.round(\r\n\t\t\tnew Date(value + this.baseDuration),\r\n\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\tthis.baseInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tif (nextDate.getTime() > date.getTime()) {\r\n\t\t\tif (Math.abs(nextDate.getTime() - deltaValue) < Math.abs(deltaValue - date.getTime())) {\r\n\t\t\t\tdate = nextDate;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\tlet dataItem = dataItemsByAxis.getKey(date.getTime() + series.currentDataSetId);\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\r\n\t\t\tlet key: \"dateX\" | \"dateY\";\r\n\r\n\t\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\t\tkey = \"dateY\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tkey = \"dateX\";\r\n\t\t\t}\r\n\r\n\t\t\tdataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), (x) => {\r\n\t\t\t\tif (x[key]) {\r\n\t\t\t\t\treturn <number>x[key].getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn -Infinity;\r\n\t\t\t\t}\r\n\t\t\t}, \"any\"));\r\n\t\t}\r\n\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\t// @todo Better format recognition\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this._df.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string | Intl.DateTimeFormatOptions {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected animateMinMax(min: number, max: number): Animation {\r\n\t\tlet animation = this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t\tanimation.events.on(\"animationprogress\", () => {\r\n\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tsuper.handleExtremesChange();\r\n\r\n\t\tif (this.groupData) {\r\n\t\t\tlet id = this.baseInterval.timeUnit + this.baseInterval.count;\r\n\t\t\tthis.groupMin[id] = this._finalMin;\r\n\t\t\tthis.groupMax[id] = this._finalMax;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param startDate       Start date\r\n\t * @param endValue        End date\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean, adjust?: boolean): void {\r\n\t\tstartDate = this._df.parse(startDate);\r\n\t\tendDate = this._df.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly, adjust);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t *\r\n\t * @param startValue      Start value\r\n\t * @param endValue        End value\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean, adjust?: boolean): void {\r\n\t\tif (!this.groupData) {\r\n\t\t\t//let start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\t\t//let end: number = (endValue - this.min) / (this.max - this.min);\r\n\r\n\t\t\tlet start = this.valueToPosition(startValue);\r\n\t\t\tlet end = this.valueToPosition(endValue);\r\n\r\n\t\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet difference = this.adjustDifference(startValue, endValue);\r\n\t\t\tlet isEnd = false;\r\n\t\t\tif (endValue == this.max) {\r\n\t\t\t\tisEnd = true;\r\n\t\t\t}\r\n\t\t\tlet isStart = false;\r\n\t\t\tif (startValue == this.min) {\r\n\t\t\t\tisStart = true;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(difference)) {\r\n\t\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\t\t\t\tlet groupInterval = this.chooseInterval(0, difference, this.groupCount, this.groupIntervals);\r\n\r\n\t\t\t\tif ((groupInterval.timeUnit == mainBaseInterval.timeUnit && groupInterval.count < mainBaseInterval.count) || $time.getDuration(groupInterval.timeUnit, 1) < $time.getDuration(mainBaseInterval.timeUnit, 1)) {\r\n\t\t\t\t\tgroupInterval = { ...mainBaseInterval };\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet id = groupInterval.timeUnit + groupInterval.count;\r\n\t\t\t\tlet min = this.groupMin[id];\r\n\t\t\t\tlet max = this.groupMax[id];\r\n\r\n\t\t\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\t\t\tmin = Number.POSITIVE_INFINITY;\r\n\t\t\t\t\tmax = Number.NEGATIVE_INFINITY;\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tlet seriesMin = series.min(this);\r\n\t\t\t\t\t\tlet seriesMax = series.max(this);\r\n\r\n\t\t\t\t\t\tif (series._dataSets) {\r\n\t\t\t\t\t\t\tlet ds = series._dataSets.getKey(groupInterval.timeUnit + groupInterval.count);\r\n\r\n\t\t\t\t\t\t\tif (ds) {\r\n\t\t\t\t\t\t\t\tlet mindi = ds.getIndex(0);\r\n\t\t\t\t\t\t\t\tlet maxdi = ds.getIndex(ds.length - 1);\r\n\r\n\t\t\t\t\t\t\t\tif (mindi) {\r\n\t\t\t\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMin = mindi.dateX.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMin = mindi.dateY.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (maxdi) {\r\n\t\t\t\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMax = maxdi.dateX.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMax = maxdi.dateY.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tseriesMax = $time.round(\r\n\t\t\t\t\t\t\t$time.add(new Date(seriesMax), groupInterval.timeUnit, 1, this._df.utc),\r\n\t\t\t\t\t\t\tgroupInterval.timeUnit,\r\n\t\t\t\t\t\t\t1,\r\n\t\t\t\t\t\t\tthis._df.firstDayOfWeek,\r\n\t\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t\t).getTime();\r\n\r\n\t\t\t\t\t\tif (seriesMin < min) {\r\n\t\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (seriesMax > max) {\r\n\t\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tthis.groupMin[id] = min;\r\n\t\t\t\t\tthis.groupMax[id] = max;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstartValue = $math.fitToRange(startValue, min, max);\r\n\t\t\t\tendValue = $math.fitToRange(endValue, min, max);\r\n\r\n\t\t\t\tif (adjust) {\r\n\t\t\t\t\tif (isEnd) {\r\n\t\t\t\t\t\tstartValue = endValue - difference;\r\n\t\t\t\t\t\tstartValue = $math.fitToRange(startValue, min, max);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isStart) {\r\n\t\t\t\t\t\tendValue = startValue + difference;\r\n\t\t\t\t\t\tendValue = $math.fitToRange(endValue, min, max);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet start: number = (startValue - min) / (max - min);\r\n\t\t\t\tlet end: number = (endValue - min) / (max - min);\r\n\r\n\t\t\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tthis.groupIntervals.clear();\r\n\t\tsource.groupIntervals.each((interval) => {\r\n\t\t\tthis.groupIntervals.push({ ...interval });\r\n\t\t})\r\n\r\n\t\tthis.gridIntervals.clear();\r\n\t\tsource.gridIntervals.each((interval) => {\r\n\t\t\tthis.gridIntervals.push({ ...interval });\r\n\t\t})\r\n\r\n\t\tif (source._baseInterval) {\r\n\t\t\tthis.baseInterval = source._baseInterval;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\r\n\t\tif (this.snapTooltip) {\r\n\t\t\t// rounding is not good, pen/aac4e7f66f019d36b2447f050c600c13 (no last tootltip shown)\r\n\t\t\tlet actualDate = this.positionToDate(position) //$time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc, undefined, this._df.timezoneMinutes, this._df.timezone);\r\n\r\n\t\t\tlet actualTime = actualDate.getTime();\r\n\t\t\tlet closestDate: Date;\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet dataItem = this.getSeriesDataItem(series, position, true);\r\n\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet date: Date;\r\n\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateY;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!closestDate) {\r\n\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (Math.abs(closestDate.getTime() - actualTime) > Math.abs(date.getTime() - actualTime)) {\r\n\t\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (closestDate) {\r\n\t\t\t\tlet closestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = $time.round(\r\n\t\t\t\t\tnew Date(closestTime),\r\n\t\t\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\t\t\tthis.baseInterval.count,\r\n\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\tundefined,\r\n\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t);\r\n\t\t\t\tclosestTime = closestDate.getTime();\r\n\r\n\t\t\t\tlet tooltipLocation = this.renderer.tooltipLocation;\r\n\t\t\t\tif (tooltipLocation == 0) {\r\n\t\t\t\t\ttooltipLocation = 0.0001;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclosestDate = new Date(closestDate.getTime() + this.baseDuration * tooltipLocation);\r\n\t\t\t\tposition = this.dateToPosition(closestDate);\r\n\r\n\t\t\t\tif (this.chart.cursor && this.chart.cursor.snapToSeries) {\r\n\t\t\t\t\t//void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\r\n\t\t\t\t\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(closestTime + series.currentDataSetId);\r\n\t\t\t\t\t\tlet point = series.showTooltipAtDataItem(dataItem);\r\n\t\t\t\t\t\tif (point) {\r\n\t\t\t\t\t\t\tthis.chart._seriesPoints.push({ series: series, point: point });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t// check, otherwise column tooltip will be hidden\r\n\t\t\t\t\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//this.chart.sortSeriesTooltips(seriesPoints);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.showTooltipAtPosition(position, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if data should be aggregated to composide data items if there\r\n\t * are more data items in selected range than `groupCount`.\r\n\t *\r\n\t * Grouping will occur automatically, based on current selection range, and\r\n\t * will change dynamically when user zooms in/out the chart.\r\n\t *\r\n\t * NOTE: This works only if [[DateAxis]] is base axis of an [[XYSeries]].\r\n\t *\r\n\t * The related [[XYSeries]] also needs to be set up to take advantage of, by\r\n\t * setting its [`groupFields`](https://www.amcharts.com/docs/v4/reference/xyseries/#groupFields_property).\r\n\t *\r\n\t * The group intervals to aggregate data to is defined by `groupIntervals`\r\n\t * property.\r\n\t *\r\n\t * ```TypeScript\r\n\t * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t * \r\n\t * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t * \r\n\t * let series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t * \r\n\t * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t * \r\n\t * var series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     \"groupData\": true\r\n\t *   }],\r\n\t *   \"yAxes\": [{\r\n\t *     \"type\": \"ValueAxis\"\r\n\t *   }],\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"LineSeries\",\r\n\t *     \"dataFields\": {\r\n\t *       \"dateX\": \"date\",\r\n\t *       \"valueY\": \"value\"\r\n\t *     },\r\n\t *     \"groupFields\": {\r\n\t *       \"valueY\": \"average\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default false\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t * @since 4.7.0\r\n\t * @param  value  Group data points?\r\n\t */\r\n\tpublic set groupData(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"groupData\", value)) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.setDataSet(\"\");\r\n\r\n\t\t\t\tif (value && !series.dataGrouped && series.inited) {\r\n\t\t\t\t\tseries._baseInterval[this.uid] = this.mainBaseInterval;\r\n\t\t\t\t\tthis.groupSeriesData(series);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._currentDataSetId = \"\"\r\n\t\t\tthis._groupInterval = undefined;\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Group data points?\r\n\t */\r\n\tpublic get groupData(): boolean {\r\n\t\treturn this.getPropertyValue(\"groupData\");\r\n\t}\r\n\r\n\t/**\r\n\t * Disables automatic selection of data grouping intervals and always uses\r\n\t * `groupInterval` if set. Works only if `groupData = true`.\r\n\t * \r\n\t * @since 4.9.24\r\n\t * @param  value  Interval\r\n\t */\r\n\tpublic set groupInterval(value: ITimeInterval) {\r\n\t\tif (this.setPropertyValue(\"groupInterval\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Interval\r\n\t */\r\n\tpublic get groupInterval(): ITimeInterval {\r\n\t\treturn this.getPropertyValue(\"groupInterval\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates threshold of data items in selected range at which to start\r\n\t * aggregating data items if `groupData = true`.\r\n\t * \r\n\t * @default 200\r\n\t * @since 4.7.0\r\n\t * @param  value  Number of data items\r\n\t */\r\n\tpublic set groupCount(value: number) {\r\n\t\tthis.setPropertyValue(\"groupCount\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number of data items\r\n\t */\r\n\tpublic get groupCount(): number {\r\n\t\treturn this.getPropertyValue(\"groupCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data by applying specific offset\r\n\t * in minutes.\r\n\t *\r\n\t * IMPORTANT: do not set `timezoneOffset` on both `DateAxis` and `dateFormatter`. It\r\n\t * will skew your results by applying offset twice.\r\n\t * \r\n\t * @since 4.8.5\r\n\t * @param  value Time zone offset in minutes\r\n\t */\r\n\tpublic set timezoneOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"timezoneOffset\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @todo Timezone offset in minutes\r\n\t */\r\n\tpublic get timezoneOffset(): number {\r\n\t\treturn this.getPropertyValue(\"timezoneOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data to specific named timezone,\r\n\t * e.g. `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`, etc.\r\n\t *\r\n\t * IMPORTANT: it is no longer recommended to use this setting. Please \r\n\t * set`timezone` on `dateFormatter`.\r\n\t *\r\n\t * @deprecated\r\n\t * @since 4.10.1\r\n\t * @param  value Time zone\r\n\t */\r\n\tpublic set timezone(value: string) {\r\n\t\tthis.setPropertyValue(\"timezone\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Timezone\r\n\t */\r\n\tpublic get timezone(): string {\r\n\t\treturn this.getPropertyValue(\"timezone\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current grid interval.\r\n\t *\r\n\t * @return Grid interval\r\n\t */\r\n\tpublic get gridInterval(): ITimeInterval {\r\n\t\treturn this._gridInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeGap(dataItem: LineSeriesDataItem, previous: LineSeriesDataItem): boolean {\r\n\t\tlet series = dataItem.component;\r\n\t\tif (dataItem && previous) {\r\n\t\t\tif (!series.connect && $type.isNumber(series.autoGapCount)) {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet date = dataItem.dates[\"date\" + this.axisLetter];\r\n\t\t\t\t\tlet prevDate = previous.dates[\"date\" + this.axisLetter];\r\n\r\n\t\t\t\t\tif (date && prevDate) {\r\n\t\t\t\t\t\tlet time = date.getTime();\r\n\t\t\t\t\t\tlet prevTime = prevDate.getTime();\r\n\r\n\t\t\t\t\t\tif (time - prevTime > series.autoGapCount * this.baseDuration) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\t\treturn this.min;\r\n\t}\r\n\r\n\tprotected _saveMinMax(min: number, max: number) {\r\n\t\tlet groupInterval = this.groupInterval;\r\n\r\n\t\tif (!groupInterval) {\r\n\t\t\tgroupInterval = this._mainBaseInterval;\r\n\t\t}\r\n\r\n\t\tlet id = groupInterval.timeUnit + groupInterval.count;\r\n\t\tthis._intervalMin[id] = min;\r\n\t\tthis._intervalMax[id] = max;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n","/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Grid } from \"./Grid\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { VerticalCenter } from \"../../core/defs/VerticalCenter\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererXAdapters extends IAxisRendererAdapters, IAxisRendererXProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererXProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererXAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererXEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisRendererX\";\r\n\r\n\t\tthis.minGridDistance = 120;\r\n\r\n\t\tthis.opposite = false;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.width = percent(100);\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"vertical\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.x = axis.pixelX;\r\n\t\t\tgridContainer.width = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\t// can not do this in init, as axis is set later\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tif (!(axis.width instanceof Percent)) {\r\n\t\t\t\taxis.width = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\t// @todo Is thi sneeded?\r\n\t\t\t$utils.used(this.line);\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.rotation = 0;\r\n\t\t\ttitle.align = \"center\";\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t\tthis.toBack();\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet bigNum: number = 1000;\r\n\t\t\tlet bbx: number = this.line.pixelX;\r\n\t\t\tlet bby: number = this.line.pixelY;\r\n\t\t\tlet bbw: number = this.axisLength;\r\n\r\n\t\t\tlet bbh: number = bigNum;\r\n\r\n\t\t\t// top\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// bottom\r\n\t\t\telse {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.axis.updateTooltip(\"vertical\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet deltaY = 0;\r\n\t\tlet verticalCenter: VerticalCenter;\r\n\t\tlet maxHeight = this.gridContainer.maxHeight;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\tif (label.valign == \"bottom\") {\r\n\t\t\t\t\tdeltaY = maxHeight;\r\n\t\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y = deltaY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\tif (label.valign == \"top\") {\r\n\t\t\t\t\tdeltaY = -maxHeight;\r\n\t\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = -maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y += deltaY;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.verticalCenter = verticalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: this.positionToCoordinate(position), y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.x, point.y);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet x1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet x2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet w: number = Math.abs(x2 - x1);\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet x: number = Math.min(x1, x2);\r\n\t\tlet y: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet y1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet y2: number = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\r\n\r\n\t\tstartPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\r\n\t\tendPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tstartLine.y = y1;\r\n\t\tstartLine.width = 0;\r\n\t\tstartLine.height = y2;\r\n\r\n\t\tendLine.y = y1;\r\n\t\tendLine.width = 0;\r\n\t\tendLine.height = y2;\r\n\r\n\t\tfillShape.height = y2;\r\n\t\tfillShape.width = Math.abs(endPoint.x - startPoint.x);\r\n\t\tfillShape.y = y1;\r\n\t\tfillShape.x = startPoint.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.getHeight() });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: tickLength });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.axisLength, y: 0 });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet w: number = this.axisLength;\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tlet x: number = axis.basePoint.x;\r\n\t\tif (x < -0.2 || x > w + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet y = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(false, true, false, true);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet inversedPosition = value;\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet x = axis.pixelX;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tx = $utils.spritePointToSprite({ x: this.pixelX, y: 0 }, this.parent, relativePositionSprite).x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif(relativePositionSprite){\r\n\t\t\t\tlet relativeX = x / relativePositionSprite.innerWidth;\r\n\t\t\t\tlet relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\r\n\r\n\t\t\t\treturn (inversedPosition - relativeX) / relativeWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t */\r\n\tendCategory?: string;\r\n\r\n\t/**\r\n\t * Location where break starts within cell (0-1).\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Location where break ends within cell (0-1).\r\n\t */\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.properties.startLocation = 0.5;\r\n\t\tthis.properties.endLocation = 0.5;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue, this.startLocation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue, this.endLocation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates where within starting category break should begin.\r\n\t *\r\n\t * Values range from `0` (start) to `1` (end), with default being `0.5` (middle).\r\n\t *\r\n\t * E.g. if you want to a break to fully encompass start and end categories,\r\n\t * you should set `startLocation = 0` and `endLocation = 1`.\r\n\t *\r\n\t * @since 4.9.17\r\n\t * @default 0.5\r\n\t * @param  value  Break start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Break start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates where within ending category break should end.\r\n\t *\r\n\t * Values range from `0` (start) to `1` (end), with default being `0.5` (middle).\r\n\t *\r\n\t * E.g. if you want to a break to fully encompass start and end categories,\r\n\t * you should set `startLocation = 0` and `endLocation = 1`.\r\n\t *\r\n\t * @since 4.9.17\r\n\t * @default 0.5\r\n\t * @param  value  Break end location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Break end location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents, IAxisDataItemAdapters } from \"./Axis\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererX } from \"./AxisRendererX\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { ColumnSeries } from \"../series/ColumnSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\tpublic seriesDataItems: { [index: string]: XYSeriesDataItem[] } = {};\r\n\r\n\tpublic deltaAnimation: Animation;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisDataItemAdapters;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.deltaPosition = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tlet oldCategory = this.properties.category;\r\n\t\tthis.setProperty(\"category\", value);\r\n\t\tif ($type.hasValue(oldCategory) && oldCategory != value) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\tif (this._adapterO) {\r\n\t\t\tif (this._adapterO.isEnabled(\"category\")) {\r\n\t\t\t\treturn this._adapterO.apply(\"category\", this.properties.category);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties.endCategory;\r\n\t}\r\n\r\n\tpublic set deltaPosition(value: number) {\r\n\t\tif (value != this.properties.deltaCoordinate) {\r\n\t\t\tthis.setProperty(\"deltaCoordinate\", value);\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t\tthis.component.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get deltaPosition(): number {\r\n\t\treturn this.properties.deltaCoordinate;\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisDataItemAdapters extends IAxisDataItemAdapters {\r\n\tcategory: string;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties {\r\n\tsortBySeries?: ColumnSeries;\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tlet dataItemsByCategory = this.dataItemsByCategory;\r\n\t\tthis.addDisposer(this.mainDataSet.events.on(\"removed\", function(event) {\r\n\t\t\tdataItemsByCategory.removeKey(event.oldValue.category);\r\n\t\t}))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\t\tsuper.processSeriesDataItem(dataItem, axisLetter);\r\n\t\tlet category: string = (<any>dataItem)[\"category\" + this.axisLetter];\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet categoryAxisDataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (categoryAxisDataItem) {\r\n\t\t\t\tlet seriesId = dataItem.component.uid;\r\n\t\t\t\tlet seriesDataItems = categoryAxisDataItem.seriesDataItems[seriesId];\r\n\t\t\t\tif (!seriesDataItems) {\r\n\t\t\t\t\tseriesDataItems = [];\r\n\t\t\t\t\tcategoryAxisDataItem.seriesDataItems[seriesId] = seriesDataItems;\r\n\t\t\t\t}\r\n\t\t\t\tseriesDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.component.dataItems.remove(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet startIndex = this.positionToIndex(this.start);\r\n\t\t\t\tlet endIndex = this.positionToIndex(this.end);\r\n\r\n\t\t\t\tif (endIndex >= this.dataItems.length) {\r\n\t\t\t\t\tendIndex--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesId = series.uid;\r\n\t\t\t\tlet minIndex: number;\r\n\t\t\t\tlet maxIndex: number;\r\n\r\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\r\n\t\t\t\t\tlet axisDataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (axisDataItem) {\r\n\t\t\t\t\t\tlet seriesDataItems = axisDataItem.seriesDataItems[seriesId];\r\n\r\n\t\t\t\t\t\tif (seriesDataItems) {\r\n\t\t\t\t\t\t\tfor (let i = 0; i < seriesDataItems.length; i++) {\r\n\t\t\t\t\t\t\t\tlet seriesDataItem = seriesDataItems[i];\r\n\t\t\t\t\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\t\t\t\t\tlet index = seriesDataItem.index;\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(minIndex) || index < minIndex) {\r\n\t\t\t\t\t\t\t\t\t\tminIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(maxIndex) || index > maxIndex) {\r\n\t\t\t\t\t\t\t\t\t\tmaxIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.isNumber(minIndex)) {\r\n\t\t\t\t\tseries.startIndex = minIndex;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.start = this.start;\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.isNumber(maxIndex)) {\r\n\t\t\t\t\tseries.endIndex = maxIndex + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.end = this.end;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this._axisBreaks && this._axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / Math.max(this.renderer.minGridDistance, 1 / Number.MAX_SAFE_INTEGER);\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tstartIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tendIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\t//this.validateDataElement(dataItem, itemIndex); // helps to solve shrinking // not good - creates all items\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b++) {\r\n\t\t\t\t\t\tlet dataItem = this.dataItems.getIndex(b);\r\n\t\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\t// TODO use iterator instead\r\n\t\t\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t\t\titemIndex++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.validateBreaks();\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t\tthis.renderer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem   [description]\r\n\t * @param itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" won't work, which is not intuitive.\r\n\t\t\tif (!dataItem.isRange || label.text == undefined) {\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\r\n\t\t\tif ((renderer instanceof AxisRendererY && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (renderer instanceof AxisRendererX && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\tif (dataItem.label.html) {\r\n\t\t\t\t\tthis.ghostLabel.html = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\t\tfillPosition = this.indexToPosition(index, fill.location);\r\n\t\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, fill.location);\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tthis.dataItemsByCategory.clear();\r\n\t\tsuper.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\tif (dataItem) {\r\n\t\t\t// creat a collection for fast access\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t\t// check if such category already exists\r\n\t\t\t//let existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\t\t//if (existingDataItem && existingDataItem != dataItem) {\r\n\t\t\t//\tthis.dataItems.remove(existingDataItem);\r\n\t\t\t//}\r\n\r\n\t\t\tif ($type.hasValue(dataItem.category)) {\r\n\t\t\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\tlet category: string = <string>(dataContext[this.dataFields.category]);\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.dataItems.create();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param index     Index\r\n\t * @param location  Location (0-1)\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\tif (index < startIndex || !$type.isNumber(breakStartIndex) || !$type.isNumber(breakEndIndex)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t// value to the right of break end\r\n\t\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// value to the left of break start\r\n\t\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// value within break\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tlet deltaPosition = 0;\r\n\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\t\tif (dataItem) {\r\n\t\t\tdeltaPosition = dataItem.deltaPosition;\r\n\t\t}\r\n\r\n\t\treturn $math.round(deltaPosition + (index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param category  Category\r\n\t * @return Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param startCategory  Start category\r\n\t * @param endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start         [description]\r\n\t * @param end           [description]\r\n\t * @param startLocation [description]\r\n\t * @param endLocation   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param position  Source position (px)\r\n\t * @param location  Location within category (0-1)\r\n\t * @return Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns first series data item with specific category\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getFirstSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = 0; i < series.dataItems.length; i++) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns last series data item with specific category.\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getLastSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = series.dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// todo: optimize\r\n\tpublic getSeriesDataItemByCategory(category: string, series: XYSeries): XYSeriesDataItem {\r\n\t\tlet seriesDataItem: XYSeriesDataItem;\r\n\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\tseriesDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\tseriesDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn seriesDataItem;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param series    Target series\r\n\t * @param position  Position (px)\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tif ($type.isNumber(position)) {\r\n\r\n\t\t\tlet index = this.positionToIndex(position);\r\n\r\n\t\t\tif (index >= this.dataItems.length) {\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet category = dataItem.category;\r\n\t\t\t\tlet sdi: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet seriesDataItem = series.dataItems.getIndex(index);\r\n\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryX == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryY == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//@todo\r\n\t\t\t\tif (findNearest) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn sdi;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position = this.getPositionX(dataItem, key, location, stackKey, range);\r\n\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Category\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\r\n\t\tlet position = this.getPositionY(dataItem, key, location, stackKey, range);\r\n\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Category\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack key (?)\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\r\n\t\tif (dataItem) {\r\n\t\t\tthis.tooltipDataItem = dataItem;\r\n\t\t\tthis.tooltip.dataItem = dataItem;\r\n\t\t\tif (this.tooltipText) {\r\n\t\t\t\treturn this.tooltipText;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\treturn dataItem.category;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._adapterO.apply(\"getTooltipText\", dataItem.category);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\t\tif (position < 0) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tif (position > 1) {\r\n\t\t\tposition = 1;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex - this.startLocation - (1 - this.endLocation);\r\n\r\n\t\tposition += 1 / difference * this.startLocation;\r\n\t\tlet index: number = null;\r\n\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\t// in case we have some axis breaks\r\n\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t\t// position to the right of break end\r\n\t\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// position to the left of break start\r\n\t\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= this.dataItems.length) {\r\n\t\t\tindex = this.dataItems.length - 1;\r\n\t\t}\r\n\t\t// not good, when panning out of bounds, each time one less item gets selected\r\n\t\t//if (index >= endIndex) {\r\n\t\t//\tindex--;\r\n\t\t//}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * This is a synonim of `getPositionLabel()` implemented here for consistentcy.\r\n\t *\r\n\t * @since 4.3.8\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic positionToCategory(position: number): string {\r\n\t\treturn this.getPositionLabel(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Current frequency of labels of the axis.\r\n\t *\r\n\t * Normally it would be 1, but when labels start to be hidden due\r\n\t * to `minGridDistance` this read-only property will increase.\r\n\t *\r\n\t * @readonly\r\n\t * @since 4.2.0\r\n\t * @return Label frequency\r\n\t */\r\n\tpublic get frequency(): number {\r\n\t\treturn this._frequency;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to a reference of [[ColumnSeries]] the categories will be sorted\r\n\t * by actual values.\r\n\t *\r\n\t * The categories are ordered in descending order (from highest values to\r\n\t * lowest). To reverse the order, use axis renderer's `inversed` setting.\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.sortBySeries = series;\r\n\t * categoryAxis.renderer.inversed = true;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.sortBySeries = series;\r\n\t * categoryAxis.renderer.inversed = true;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"sortBySeries\": \"s1\",\r\n\t *     \"renderer\": {\r\n\t *       // ...\r\n\t *       \"inversed\": true\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.8.7\r\n\t * @param  value  Sort categories?\r\n\t */\r\n\tpublic set sortBySeries(value: ColumnSeries) {\r\n\t\tthis.setPropertyValue(\"sortBySeries\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Sort categories?\r\n\t */\r\n\tpublic get sortBySeries(): ColumnSeries {\r\n\t\treturn this.getPropertyValue(\"sortBySeries\");\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.sortBySeries) && $type.isString(config.sortBySeries)) {\r\n\t\t\t\tif (this.map.hasKey(config.sortBySeries)) {\r\n\t\t\t\t\tconfig.sortBySeries = this.map.getKey(config.sortBySeries);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.addDelayedMap(\"sortBySeries\", config.sortBySeries);\r\n\t\t\t\t\tdelete config.sortBySeries;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { XYCursor } from \"../cursors/XYCursor\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * References to any aggregate data items this data item is part of.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic groupDataItems: this[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.customValue = {};\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's custom numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set customValue(value: number) {\r\n\t\tthis.setValue(\"customValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get customValue(): number {\r\n\t\treturn this.values.customValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setCategory(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setCategory(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for some custom data.\r\n\t */\r\n\tcustomValue?: string;\r\n}\r\n\r\n\r\n/**\r\n * Defines types of the aggregate value.\r\n *\r\n * @since 4.7.0\r\n */\r\nexport type GroupField = \"open\" | \"close\" | \"low\" | \"high\" | \"average\" | \"sum\";\r\n\r\n/**\r\n * Defines data fields that can be calculated for aggregate values.\r\n * \r\n * @since 4.7.0\r\n */\r\nexport interface IXYSeriesGroupFields {\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `valueX` data field.\r\n\t *\r\n\t * @default \"close\"\r\n\t */\r\n\tvalueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `valueY` data field.\r\n\t * \r\n\t * @default \"close\"\r\n\t */\r\n\tvalueY?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `customValue` value data field.\r\n\t * \r\n\t * @default \"close\"\r\n\t */\r\n\tcustomValue?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `openValueX` data field.\r\n\t * \r\n\t * @default \"open\"\r\n\t */\r\n\topenValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `openValueY` data field.\r\n\t * \r\n\t * @default \"open\"\r\n\t */\r\n\topenValueY?: GroupField;\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tcursorHoverEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t */\r\n\texcludeFromTotal?: boolean;\r\n\r\n\r\n\t/**\r\n\t * Indicates if series' tooltip should be hidden while series axis range is\r\n\t * animating (zooming)\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @default true\r\n\t */\r\n\thideTooltipWhileZooming?: boolean;\r\n\r\n\t/**\r\n\t * Should series bullets be masked?\r\n\t * @default true\r\n\t * @since 4.7.17\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [boolean description]\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @default true\r\n\t */\r\n\tstackToNegative?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Applied to a source value that is being used to calculate aggregate values\r\n\t * for a grouped data item.\r\n\t * \r\n\t * applied only if `groupData = true` is set on the related `DateAxis`.\r\n\t *\r\n\t * @since 4.9.35\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/using-custom-functions-for-data-item-grouping/} for more information\r\n\t */\r\n\tgroupValue: {\r\n\t\tdataItem: XYSeriesDataItem,\r\n\t\tinterval: ITimeInterval,\r\n\t\tdataField: IXYSeriesDataFields,\r\n\t\tdate: Date,\r\n\t\tvalue: number\r\n\t}\r\n\r\n\t/**\r\n\t * Applied to a calculated aggregate data item and its values, so that\r\n\t * specific logic can be applied to calculation of derivative values.\r\n\t *\r\n\t * User's code needs to modify specific value in `values` object, most\r\n\t * probably `close` as it's the default grouping field.\r\n\t * \r\n\t * Applied only * if `groupData = true` is set on the related `DateAxis`.\r\n\t *\r\n\t * @since 4.9.36\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/using-custom-functions-for-data-item-grouping/} for more information\r\n\t */\r\n\tgroupDataItem: {\r\n\t\tdataItem: XYSeriesDataItem,\r\n\t\tinterval: ITimeInterval,\r\n\t\tdataField: IXYSeriesDataFields,\r\n\t\tdate: Date,\r\n\t\tvalue: number\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines type of the group fields.\r\n\t * \r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic _groupFields: IXYSeriesGroupFields;\r\n\r\n\t/**\r\n\t * Indicates which of the series' `dataFields` to calculate aggregate values\r\n\t * for.\r\n\t *\r\n\t * Available data fields for all [[XYSeries]] are:\r\n\t * `valueX`, `valueY`, `openValueX`, and `openValueY`.\r\n\t *\r\n\t * [[CandlestickSeries]] adds:\r\n\t * `lowValueX`, `lowValueY`, `highValueX`, and `highValueY`.\r\n\t *\r\n\t * Available options:\r\n\t * `\"open\"`, `\"close\"`, `\"low\"`, `\"high\"`, `\"average\"`, `\"sum\"`.\r\n\t *\r\n\t * Defaults are as follows:\r\n\t * * `valueX`: `\"close\"`\r\n\t * * `valueY`: `\"close\"`\r\n\t * * `openValueX`: `\"open\"`\r\n\t * * `openValueY`: `\"open\"`\r\n\t * * `lowValueX`: `\"low\"`\r\n\t * * `lowValueY`: `\"low\"`\r\n\t * * `highValueX`: `\"high\"`\r\n\t * * `highValueY`: `\"high\"`\r\n\t *\r\n\t * Is required only if data being plotted on a `DateAxis` and\r\n\t * its `groupData` is set to `true`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t *\r\n\t * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t *\r\n\t * let series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t *\r\n\t * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t *\r\n\t * var series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     \"groupData\": true\r\n\t *   }],\r\n\t *   \"yAxes\": [{\r\n\t *     \"type\": \"ValueAxis\"\r\n\t *   }],\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"LineSeries\",\r\n\t *     \"dataFields\": {\r\n\t *       \"dateX\": \"date\",\r\n\t *       \"valueY\": \"value\"\r\n\t *     },\r\n\t *     \"groupFields\": {\r\n\t *       \"valueY\": \"average\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above setup will ensure, that if there are many data items within\r\n\t * selected range, they will be grouped into aggregated data points, using\r\n\t * average value of all the values.\r\n\t *\r\n\t * For example if we have 2 years worth of daily data (~700 data items), when\r\n\t * fully zoomed out, the chart would show ~100 data items instead: one for\r\n\t * each week in those two years.\r\n\t *\r\n\t * Grouping will occur automatically, based on current selection range, and\r\n\t * will change dynamically when user zooms in/out the chart.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic groupFields: this[\"_groupFields\"] = {};\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\t/**\r\n\t * Dataitem of previously shown tooltip, used to avoid multiple\r\n\t * tooltipshownat dispatches.\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _baseInterval: { [index: string]: ITimeInterval } = {};\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataGrouped = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic usesShowFields: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _dataSetChanged: boolean = false;\r\n\r\n\r\n\tprotected _maxxX: number = 100000;\r\n\tprotected _maxxY: number = 100000;\r\n\r\n\tprotected _propertiesChanged: boolean = false;\r\n\r\n\t/**\r\n\t * If this series was used to create a series for scrollbar, this is a reference to it.\r\n\t */\r\n\tpublic scrollbarSeries: this;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic outOfRange: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\r\n\t\tthis.groupFields.valueX = \"close\";\r\n\t\tthis.groupFields.valueY = \"close\";\r\n\t\tthis.groupFields.customValue = \"close\";\r\n\r\n\t\tthis.groupFields.openValueX = \"open\";\r\n\t\tthis.groupFields.openValueY = \"open\";\r\n\r\n\t\tthis.cursorTooltipEnabled = true;\r\n\r\n\t\tthis.cursorHoverEnabled = true;\r\n\t\tthis.excludeFromTotal = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis._showBullets = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.properties.stackToNegative = true;\r\n\r\n\t\tthis.hideTooltipWhileZooming = true;\r\n\t\tthis.setPropertyValue(\"maskBullets\", true);\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.observe(visualProperties, () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis._propertiesChanged = true;\r\n\t\t\t\tif (this.legendDataItem) {\r\n\t\t\t\t\tthis.legendDataItem.childrenCreated = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.chart && this.chart.legend) {\r\n\t\t\t\t\tthis.chart.legend.invalidateDataItems();\r\n\t\t\t\t}\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic resetExtremes() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis.dataGrouped = false;\r\n\t\tthis._baseInterval = {};\r\n\t\tthis._currentDataSetId = \"\";\r\n\r\n\t\tthis.resetExtremes();\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._baseInterval = {};\r\n\t\tlet dataFields = this.dataFields;\r\n\t\tif (dataFields.valueYShow || dataFields.openValueXShow || dataFields.openValueXShow || dataFields.openValueYShow) {\r\n\t\t\tthis.usesShowFields = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.usesShowFields = false;\r\n\t\t}\r\n\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\t\tif (this.chart) {\r\n\t\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 4.7.21 solves 51540\r\n\t\tif (this.inited && this.isHidden) {\r\n\t\t\tthis.hide(0);\r\n\t\t}\r\n\r\n\t\tthis.dataGrouped = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tif (this._chart) {\r\n\t\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * When validating raw data, instead of processing data item, we update it\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected updateDataItem(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.updateDataItem(dataItem);\r\n\r\n\t\t//dataItem.events.disable();\r\n\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\t\t//dataItem.events.enable();\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(xAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(yAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected clearCatAxis(axis: CategoryAxis) {\r\n\t\tlet uid = this.uid;\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.seriesDataItems[uid]) {\r\n\t\t\t\tdataItem.seriesDataItems[uid] = [];\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\t\tthis._xField = xField;\r\n\t\t\tthis._yField = yField;\r\n\r\n\t\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\t\tthis._xOpenField = xOpenField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\t\tthis._yOpenField = yOpenField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.dataFields[yOpenField] && this.baseAxis == yAxis) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.dataFields[xOpenField] && this.baseAxis == xAxis) {\r\n\t\t\t\tthis._xOpenField = xField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.stacked && this.baseAxis == xAxis) {\r\n\t\t\t\tthis._xOpenField = xField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.stacked && this.baseAxis == yAxis) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\r\n\t\t\tif ((xAxis instanceof CategoryAxis) && (yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tif (!this._yOpenField) {\r\n\t\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._xValueFields = [];\r\n\t\t\tthis._yValueFields = [];\r\n\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param axis    Axis\r\n\t * @param fields  Fields (?)\r\n\t * @param field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\t\theight: this.yAxis.axisLength\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param axis  Axis\r\n\t * @return Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tthis._maxxX = $math.max(100000, chart.plotContainer.maxWidth * 2);\r\n\t\t\tthis._maxxY = $math.max(100000, chart.plotContainer.maxHeight * 2);\r\n\t\t}\r\n\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\txAxis.updateAxisBySeries();\r\n\t\t\tyAxis.updateAxisBySeries();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\txAxis.postProcessSeriesDataItems(this);\r\n\t\t\tyAxis.postProcessSeriesDataItems(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (xAxis.dataRangeInvalid) {\r\n\t\t\t\txAxis.validateDataRange();\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis.dataRangeInvalid) {\r\n\t\t\t\tyAxis.validateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (xAxis.invalid) {\r\n\t\t\t\txAxis.validate();\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis.invalid) {\r\n\t\t\t\tyAxis.validate();\r\n\t\t\t}\r\n\r\n\t\t\tthis.y = yAxis.pixelY;\r\n\t\t\tthis.x = xAxis.pixelX;\r\n\r\n\r\n\t\t\tthis._showBullets = true;\r\n\t\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\t\tthis._showBullets = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.updateTooltip();\r\n\r\n\t\tif ((xAxis instanceof DateAxis && xAxis.groupData && !this.dataGrouped) || (yAxis instanceof DateAxis && yAxis.groupData && !this.dataGrouped)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet maskBullets = this.maskBullets;\r\n\t\tif (chart && maskBullets) {\r\n\t\t\tif (chart.className == \"XYChart\") {\r\n\t\t\t\tif (chart.leftAxesContainer.layout == \"vertical\" || chart.rightAxesContainer.layout == \"vertical\") {\r\n\t\t\t\t\tif (this.yAxis) {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = this.yAxis.renderer.gridContainer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (chart.topAxesContainer.layout == \"horizontal\" || chart.bottomAxesContainer.layout == \"horizontal\") {\r\n\t\t\t\t\tif (this.xAxis) {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = this.xAxis.renderer.gridContainer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tthis.setXAxis(axis);\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tthis.setYAxis(axis);\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tif (axis.chart instanceof XYChart) {\r\n\t\t\t\taxis.chart.handleYAxisSet(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!this._baseAxis && xAxis && yAxis) {\r\n\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number, skipRaw?: boolean): void {\r\n\t\tsuper.addData(rawDataItem, removeCount, skipRaw);\r\n\t\tconst scrollbarSeries = this.scrollbarSeries;\r\n\t\tif (scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.addData(rawDataItem, removeCount, true);\r\n\t\t\tthis.scrollbarSeries._parseDataFrom = this._parseDataFrom;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tsuper.setData(value);\r\n\t\tif (this.scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.setData(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the chart use particular data set.\r\n\t *\r\n\t * If `id` is not provided or there is no such data set, main data will be\r\n\t * used.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t * @param  id  Data set id\r\n\t */\r\n\tpublic setDataSet(id: string): boolean {\r\n\t\tlet changed = super.setDataSet(id);\r\n\r\n\t\tif (changed) {\r\n\r\n\t\t\tthis._dataSetChanged = true;\r\n\t\t\tlet dataItems = this.dataItems;\r\n\r\n\t\t\tthis.resetExtremes();\r\n\r\n\t\t\tif (dataItems && dataItems.length > 0) {\r\n\r\n\t\t\t\tlet xAxis = this.xAxis;\r\n\t\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\t\tthis._prevStartIndex = undefined;\r\n\t\t\t\tthis._prevEndIndex = undefined;\r\n\t\t\t\tthis._startIndex = undefined;\r\n\t\t\t\tthis._endIndex = undefined;\r\n\r\n\t\t\t\tif (!this.appeared) {\r\n\t\t\t\t\tthis.processValues(false); // this will slow down!\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (xAxis instanceof DateAxis && xAxis == this.baseAxis) {\r\n\t\t\t\t\tthis._tmin.setKey(xAxis.uid, dataItems.getIndex(0).dateX.getTime());\r\n\t\t\t\t\tthis._tmax.setKey(xAxis.uid, dataItems.getIndex(dataItems.length - 1).dateX.getTime());\r\n\t\t\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (yAxis instanceof DateAxis && yAxis == this.baseAxis) {\r\n\t\t\t\t\tthis._tmin.setKey(yAxis.uid, dataItems.getIndex(0).dateY.getTime());\r\n\t\t\t\t\tthis._tmax.setKey(yAxis.uid, dataItems.getIndex(dataItems.length - 1).dateY.getTime());\r\n\t\t\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!xAxis || !yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tlet workingStartIndex = startIndex;\r\n\t\tlet workingEndIndex = endIndex;\r\n\r\n\t\tif (!working) {\r\n\t\t\tstartIndex = 0;\r\n\t\t\tendIndex = this.dataItems.length;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tif (!working) {\r\n\t\t\t\tstackX = dataItem.getValue(\"valueX\", \"stackTrue\");\r\n\t\t\t\tstackY = dataItem.getValue(\"valueY\", \"stackTrue\");\r\n\t\t\t}\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\txAxis.processSeriesDataItems();\r\n\t\tyAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = xAxis.uid;\r\n\t\tlet yAxisId: string = yAxis.uid;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\r\n\t\t\tthis._smin.setKey(xAxisId, undefined);\r\n\t\t\tthis._smax.setKey(xAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\r\n\t\t\tthis._smin.setKey(yAxisId, undefined);\r\n\t\t\tthis._smax.setKey(yAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tlet stackedSeries = this.stackedSeries;\r\n\t\t\t\tif (stackedSeries) {\r\n\t\t\t\t\tif (stackedSeries.isDisposed()) {\r\n\t\t\t\t\t\tthis.stackedSeries = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstackedSeries.processValues(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (startIndex != workingStartIndex || endIndex != workingEndIndex) {\r\n\t\t\tminX = Infinity;\r\n\t\t\tmaxX = - Infinity;\r\n\r\n\t\t\tminY = Infinity;\r\n\t\t\tmaxY = - Infinity;\r\n\r\n\t\t\tfor (let i = workingStartIndex; i < workingEndIndex; i++) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\t\tif (!working) {\r\n\t\t\t\t\tstackX = dataItem.getValue(\"valueX\", \"stackTrue\");\r\n\t\t\t\t\tstackY = dataItem.getValue(\"valueY\", \"stackTrue\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\r\n\t\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\t\tif (this.stacked) {\r\n\t\t\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\r\n\t\t\tthis._smin.setKey(xAxisId, undefined);\r\n\t\t\tthis._smax.setKey(xAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\r\n\t\t\tthis._smin.setKey(yAxisId, undefined);\r\n\t\t\tthis._smax.setKey(yAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared || this.start != 0 || this.end != 1 || this.dataItems != this.mainDataSet) {\r\n\t\t\t\t/// new, helps to handle issues with change percent\r\n\t\t\t\tlet changed = false;\r\n\r\n\t\t\t\tif (yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\t\t\t\t\tlet tmin = this._tmin.getKey(yAxisId);\r\n\r\n\t\t\t\t\tif (!$type.isNumber(tmin) || ((this.usesShowFields || this._dataSetChanged || (xAxis instanceof DateAxis && xAxis.groupData && this.isShowing)) && minY < tmin) || (this.stackedSeries && !this.isHidden && !working)) {\r\n\t\t\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet tmax = this._tmax.getKey(yAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmax) || ((this.usesShowFields || this._dataSetChanged || (xAxis instanceof DateAxis && xAxis.groupData && this.isShowing)) && maxY > tmax) || (this.stackedSeries && !this.isHidden && !working)) {\r\n\t\t\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis)) {\r\n\t\t\t\t\tlet tmin = this._tmin.getKey(xAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmin) || ((this.usesShowFields || this._dataSetChanged || (yAxis instanceof DateAxis && yAxis.groupData && this.isShowing)) && minX < tmin) || (this.stackedSeries && !this.isHidden && !working)) {\r\n\t\t\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet tmax = this._tmax.getKey(xAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmax) || ((this.usesShowFields || this._dataSetChanged || (yAxis instanceof DateAxis && yAxis.groupData && this.isShowing)) && maxX > tmax) || (this.stackedSeries && !this.isHidden && !working)) {\r\n\t\t\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (changed) {\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.start == 0 && this.end == 1) {\r\n\t\t\t\t\t// yes, its ok. otherwise min/max won't be updated when zooming out\r\n\t\t\t\t\tthis._dataSetChanged = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!working && this.stacked) {\r\n\t\t\tthis.processValues(true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip(duration?: number) {\r\n\t\tsuper.hideTooltip(duration);\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding && !this.isShowing) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t}\r\n\r\n\t\t\tlet point = this.showTooltipAtDataItem(dataItem);\r\n\r\n\t\t\tif (point) {\r\n\t\t\t\treturn point;\r\n\t\t\t}\r\n\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText && !this.tooltipHTML) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationX?: number) {\r\n\t\treturn dataItem.locations[field];\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationY?: number) {\r\n\t\treturn dataItem.locations[field];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific dataItem.\r\n\t *\r\n\t * @param dataItem\r\n\t */\r\n\tpublic showTooltipAtDataItem(dataItem: this[\"_dataItem\"]): IPoint {\r\n\r\n\t\tlet cursor = <XYCursor>this.chart.cursor;\r\n\t\tif (cursor && cursor.hideSeriesTooltipsOnSelection && cursor.selection.visible && cursor.downPoint) {\r\n\t\t\tthis.hideTooltip();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.returnBulletDefaultState(dataItem);\r\n\t\tif (dataItem && dataItem.visible) {\r\n\r\n\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\tif (this.cursorTooltipEnabled) {\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, this.getAdjustedXLocation(dataItem, tooltipXField), this.getAdjustedYLocation(dataItem, tooltipYField));\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tif (this.chart.className == \"XYChart\" && (tooltipPoint.y < -1 || tooltipPoint.y > this.yAxis.pixelHeight + 1 || tooltipPoint.x < -1 || tooltipPoint.x > this.xAxis.pixelWidth + 1)) {\r\n\t\t\t\t\t\t\t// void\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\r\n\t\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (this.cursorHoverEnabled) {\r\n\t\t\t\t\t\t\t\tfor (let sprite of dataItem.sprites) {\r\n\t\t\t\t\t\t\t\t\tif (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tif (!sprite.interactions.isRealHover) {\r\n\t\t\t\t\t\t\t\t\t\t\tsprite.dispatchImmediately(\"over\");\r\n\t\t\t\t\t\t\t\t\t\t\tsprite.interactions.isRealHover = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tsprite.isHover = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLegendValue(dataItem, true);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Returns default state to bullets when tooltip is shown at some other data\r\n\t * item or hidden\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let sprite of this._prevTooltipDataItem.sprites) {\r\n\t\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\t\tconst fireEvent = sprite.interactions.isRealHover;\r\n\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t\tif (fireEvent) {\r\n\t\t\t\t\t\tsprite.dispatchImmediately(\"out\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Bullet): boolean {\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bulletTemplate.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bulletTemplate.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (bulletTemplate.disabled) {\r\n\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\tif (dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tif (!this.hideTooltipWhileZooming && this.tooltip && !this.tooltip.isHidden && !this.isHiding && !this.isHidden && this.tooltipDataItem) {\r\n\t\t\tthis.showTooltipAtDataItem(<this[\"_dataItem\"]>this.tooltipDataItem);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif ((xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet xOpenField = this.xOpenField;\r\n\t\t\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\t\t\tlet positionX: number;\r\n\t\t\t\tlet positionY: number;\r\n\r\n\r\n\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(xField);\r\n\r\n\t\t\t\t\tif (!xOpenField) {\r\n\t\t\t\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\t\t\t\topenValue = xAxis.baseValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openValue)) {\r\n\t\t\t\t\t\topenValue = closeValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tif (openValue == closeValue) {\r\n\t\t\t\t\t\tlet baseInterval = xAxis.baseInterval;\r\n\t\t\t\t\t\tlet dateFormatter = xAxis.dateFormatter;\r\n\t\t\t\t\t\topenValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc, undefined, dateFormatter.timezoneMinutes, dateFormatter.timezone).getTime();\r\n\t\t\t\t\t\tcloseValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet middleValue: number;\r\n\t\t\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * bulletLocationX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (xAxis instanceof ValueAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(xField);\r\n\r\n\t\t\t\t\tif (!xOpenField) {\r\n\t\t\t\t\t\topenValue = xAxis.baseValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\r\n\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (xAxis instanceof CategoryAxis) {\r\n\r\n\t\t\t\t\tlet rightLocation = this.getAdjustedXLocation(dataItem, xField, bullet.locationX);\r\n\t\t\t\t\tlet leftLocation = this.getAdjustedXLocation(dataItem, xOpenField, bullet.locationX);\r\n\r\n\t\t\t\t\tpositionX = xAxis.categoryToPosition((<any>dataItem)[xField], rightLocation);\r\n\t\t\t\t\tlet openPositionX: number;\r\n\r\n\r\n\t\t\t\t\tif (xOpenField) {\r\n\t\t\t\t\t\topenPositionX = xAxis.categoryToPosition((<any>dataItem)[xOpenField], leftLocation);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openPositionX)) {\r\n\t\t\t\t\t\topenPositionX = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionX = openPositionX + (positionX - openPositionX) * bulletLocationX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(yField);\r\n\r\n\t\t\t\t\tif (!yOpenField) {\r\n\t\t\t\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\t\t\t\topenValue = yAxis.baseValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openValue)) {\r\n\t\t\t\t\t\topenValue = closeValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueY\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tif (openValue == closeValue) {\r\n\t\t\t\t\t\tlet baseInterval = yAxis.baseInterval;\r\n\t\t\t\t\t\tlet dateFormatter = yAxis.dateFormatter;\r\n\t\t\t\t\t\topenValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc, undefined, dateFormatter.timezoneMinutes, dateFormatter.timezone).getTime();\r\n\t\t\t\t\t\tcloseValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet middleValue: number;\r\n\r\n\t\t\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * bulletLocationY;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (yAxis instanceof ValueAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(yField);\r\n\r\n\t\t\t\t\tif (!yOpenField) {\r\n\t\t\t\t\t\topenValue = yAxis.baseValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueY\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\r\n\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], bulletLocationY);\r\n\r\n\t\t\t\t\tlet topLocation = this.getAdjustedYLocation(dataItem, yField, bullet.locationY);\r\n\t\t\t\t\tlet bottomLocation = this.getAdjustedYLocation(dataItem, yOpenField, bullet.locationY);\r\n\r\n\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], topLocation);\r\n\t\t\t\t\tlet openPositionY: number;\r\n\r\n\t\t\t\t\tif (yOpenField) {\r\n\t\t\t\t\t\topenPositionY = yAxis.categoryToPosition((<any>dataItem)[yOpenField], bottomLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.isNumber(openPositionY)) {\r\n\t\t\t\t\t\topenPositionY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionY = openPositionY + (positionY - openPositionY) * bulletLocationY;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.visible = true;\r\n\t\t\t\tthis.positionBulletReal(bullet, positionX, positionY);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tbullet.x = this.xAxis.renderer.positionToPoint(positionX, positionY).x;\r\n\t\tbullet.y = this.yAxis.renderer.positionToPoint(positionY, positionX).y;\r\n\t}\r\n\r\n\t/**\r\n\t * returns bullet x location\r\n\t * @ignore\r\n\t */\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bullet x location\r\n\t * @ignore\r\n\t */\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * This method must be called if you update Series' data fields that might\r\n\t * affect stacking of the series.\r\n\t *\r\n\t * Since individual `dataField` changes are not being monitored, you need\r\n\t * todo it manually for changes to take affect.\r\n\t *\r\n\t * @since 4.7.21\r\n\t */\r\n\tpublic updateStacking(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this.baseAxis) {\r\n\t\t\t\t\tseries.stackedSeries = undefined;\r\n\t\t\t\t\tseries.invalidateDataItems();\r\n\t\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t * \r\n\t * Note: proper stacking is only possible if series have the same number\r\n\t * of data items. To ensure this, don't set data directly on series\r\n\t * but do this on chart instead.\r\n\t *\r\n\t * @default false\r\n\t * @param stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tif (this.setPropertyValue(\"stacked\", stacked, true)) {\r\n\t\t\tthis.updateStacking();\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (!stacked) {\r\n\t\t\t\tlet field: string;\r\n\r\n\t\t\t\tif (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tfield = this.xField;\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tfield = this.yField;\r\n\t\t\t\t}\r\n\t\t\t\tif (field) {\r\n\t\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(field, 0, \"stackTrue\");\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position? In order this to work, you should set snapTooltip = false on the series baseAxis.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tif (this.isHidden) {\r\n\t\t\tif (this.appeared && this.xAxis instanceof DateAxis && this.xAxis.groupData) {\r\n\t\t\t\tthis._tmin.setKey(this.yAxis.uid, undefined);\r\n\t\t\t\tthis._tmax.setKey(this.yAxis.uid, undefined);\r\n\t\t\t}\r\n\t\t\tif (this.appeared && this.yAxis instanceof DateAxis && this.yAxis.groupData) {\r\n\t\t\t\tthis._tmin.setKey(this.xAxis.uid, undefined);\r\n\t\t\t\tthis._tmax.setKey(this.xAxis.uid, undefined);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\t\tif (!options.animationsEnabled) {\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet realDuration = interpolationDuration;\r\n\t\t\tif (i < this.startIndex - 10 || i > this.endIndex + 10) {\r\n\t\t\t\trealDuration = 0;\r\n\t\t\t\tdelay = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.sequencedInterpolation && realDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(realDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\t// other data sets\r\n\t\tthis.dataSets.each((key, dataSet) => {\r\n\t\t\tif (dataSet != this.dataItems) {\r\n\t\t\t\tdataSet.each((dataItem) => {\r\n\t\t\t\t\tdataItem.events.disable();\r\n\t\t\t\t\tdataItem.show(0, 0, fields);\r\n\t\t\t\t\tdataItem.events.enable();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (this.mainDataSet != this.dataItems) {\r\n\t\t\tthis.mainDataSet.each((dataItem) => {\r\n\t\t\t\tdataItem.events.disable();\r\n\t\t\t\tdataItem.show(0, 0, fields);\r\n\t\t\t\tdataItem.events.enable();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\tif (this.hidden) {\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\tthis.hidden = false;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < xAxis.baseValue && xAxis.maxZoomed > xAxis.baseValue) || this.stackedSeries) {\r\n\t\t\t\tvalue = xAxis.baseValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < yAxis.baseValue && yAxis.maxZoomed > yAxis.baseValue) || this.stackedSeries) {\r\n\t\t\t\tvalue = yAxis.baseValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif (!options.animationsEnabled) {\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet realDuration = interpolationDuration;\r\n\r\n\t\t\tif (i < this.startIndex - 10 || i > this.endIndex + 10) {\r\n\t\t\t\trealDuration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (realDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && realDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(realDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\t// other data sets\r\n\t\tthis.dataSets.each((key, dataSet) => {\r\n\t\t\tif (dataSet != this.dataItems) {\r\n\t\t\t\tdataSet.each((dataItem) => {\r\n\t\t\t\t\tdataItem.events.disable();\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t\tdataItem.events.enable();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (this.mainDataSet != this.dataItems) {\r\n\t\t\tthis.mainDataSet.each((dataItem) => {\r\n\t\t\t\tdataItem.events.disable();\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\tdataItem.events.enable();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\t\tif (this.appeared) {\r\n\t\t\tthis.dispatch(\"selectionextremeschanged\");\r\n\t\t}\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked || series.stackedSeries) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!this.stacked || !xAxis || !yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!field) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\t\t\t\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stackTrue\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == xAxis && prevSeries.yAxis == yAxis && prevSeries.className == this.className) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tlet prevStack = prevDataItem.getValue(field, \"stackTrue\");\r\n\t\t\t\t\t\tif (prevStack == null) {\r\n\t\t\t\t\t\t\tprevStack = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet prevRealValue = prevDataItem.getValue(field) + prevStack;\r\n\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\r\n\t\t\t\t\t\tif (this.stackToNegative) {\r\n\t\t\t\t\t\t\tif ((value >= 0 && prevRealValue >= 0) || (value < 0 && prevRealValue < 0)) {\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevRealValue, \"stackTrue\");\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevRealValue, \"stackTrue\");\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This setting indicates how negative values are treated in stacked stacked\r\n\t * series.\r\n\t *\r\n\t * If set to `true` (default), negative values will stack on the base line.\r\n\t *\r\n\t * If set to `false`, negative value will stack in relation to the previous\r\n\t * value in the stack.\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @param  value  Stack to base line\r\n\t */\r\n\tpublic set stackToNegative(value: boolean) {\r\n\t\tthis.setPropertyValue(\"stackToNegative\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Stack to base line\r\n\t */\r\n\tpublic get stackToNegative(): boolean {\r\n\t\treturn this.getPropertyValue(\"stackToNegative\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\t// not good, because bad if there are no items with values in selection\r\n\t\t//if (!$type.isNumber(value)) {\r\n\t\t//value = this.min(axis);\r\n\t\t//}\t\t\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\t// not good, because bad if there are no items with values in selection\r\n\t\t//if (!$type.isNumber(value)) {\r\n\t\t//value = this.max(axis);\r\n\t\t//}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up base axes\r\n\t\t\tif ($type.hasValue(config.baseAxis) && $type.isString(config.baseAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.baseAxis)) {\r\n\t\t\t\t\tconfig.baseAxis = this.map.getKey(config.baseAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.baseAxis + \"\\\" found for `baseAxis`.\");\r\n\t\t\t\t\tdelete config.baseAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthis.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string): IPoint {\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\t\tx = $math.fitToRange(x, -this._maxxX, this._maxxX); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\t\ty = $math.fitToRange(y, -this._maxxY, this._maxxY); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t\treturn { x: x, y: y };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\r\n\t\t// We do not want to overwrite this if `itemReaderText` was changed by\r\n\t\t// user code.\r\n\t\tif (this._itemReaderTextChanged) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t\tthis._itemReaderTextChanged = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * If set to `true` (default), the tooltips set for all series item's\r\n\t * elements like columns and bullets will be automatically shown\r\n\t * when [[XYCursor]] passes over category/date, even if its not hovered\r\n\t * directly over the item.\r\n\t *\r\n\t * Set this to `false` to disable such behavior and display item-specific\r\n\t * tooltips only when hovered directly over them\r\n\t *\r\n\t * @default true\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t *\r\n\t * If set to `true` (default) and chart cursor is enabled on th chart,\r\n\t * hovering over date/category will trigger hover states on related Series\r\n\t * items like bullets and columns.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t * @param  value  Hover enabled?\r\n\t */\r\n\tpublic set cursorHoverEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorHoverEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hover enabled?\r\n\t */\r\n\tpublic get cursorHoverEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorHoverEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Exclude from totals?\r\n\t */\r\n\tpublic set excludeFromTotal(value: boolean) {\r\n\t\tthis.setPropertyValue(\"excludeFromTotal\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from totals?\r\n\t */\r\n\tpublic get excludeFromTotal(): boolean {\r\n\t\treturn this.getPropertyValue(\"excludeFromTotal\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' tooltip should be hidden while series axis range is\r\n\t * animating (zooming).\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.16\r\n\t * @param  value  Hide tooltip while zooming?\r\n\t */\r\n\tpublic set hideTooltipWhileZooming(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideTooltipWhileZooming\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide tooltip while zooming?\r\n\t */\r\n\tpublic get hideTooltipWhileZooming(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideTooltipWhileZooming\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if series' bullets should be masked.\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.17\r\n\t * @param  value  Mask bullets?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value)\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.bulletsContainer.parent = chart.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.parent = chart.axisBulletsContainer;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullets?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.groupFields = $utils.copyProperties(source.groupFields, {});\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tif (this.scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.dispose();\r\n\t\t}\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { options } from \"../../core/Options\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tif (!$utils.isIE()) {\r\n\t\t\tlet filter = new DesaturateFilter();\r\n\t\t\tfilter.filterUnits = \"userSpaceOnUse\";\r\n\t\t\tscrollbarChart.plotContainer.filters.push(filter);\r\n\t\t}\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tif (!sourceSeries.xAxis || !sourceSeries.yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tscrollbarChart.dateFormatter.inputDateFormat = this.chart.dateFormatter.inputDateFormat;\r\n\r\n\t\t// Ensure that scrollbar chart shares the same locale as parent chart\r\n\t\tscrollbarChart.language.locale = this.chart.language.locale;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis && this.scrollbarChart.xAxes.length > 0) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis && this.scrollbarChart.yAxes.length > 0) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsourceSeries.events.on(\"beforedisposed\", () => {\r\n\t\t\tthis.series.removeValue(sourceSeries)\r\n\t\t})\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif(options.onlyShowOnViewport || options.queue){\r\n\t\t\tthis.addDisposer(this.chart.events.on(\"removedfromqueue\", function(){\r\n\t\t\t\tscrollbarChart.invalidateData();\r\n\t\t\t}))\r\n\t\t}\r\n\r\n\t\tif($utils.isIE()){\r\n\t\t\tseries.stroke = color(\"#aaaaaa\");\r\n\t\t\tseries.fill = series.stroke;\r\n\t\t\tseries.propertyFields.fill = undefined;\r\n\t\t\tseries.propertyFields.stroke = undefined;\r\n\t\t}\r\n\t\tsourceSeries.scrollbarSeries = series;\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\t//xAxis.id = sourceSeries.uid;\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.padding(0, 0, 0, 0);\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.margin(0, 0, 0, 0);\r\n\r\n\t\t\txAxis.width = percent(100);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\t\t\txAxis.maxZoomCount = undefined;\r\n\t\t\txAxis.minZoomCount = undefined;\r\n\r\n\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\tlet vAxis = <DateAxis>xAxis;\r\n\t\t\t\tlet sourceAxis = <DateAxis>sourceSeries.xAxis;\r\n\t\t\t\tvAxis.groupCount = sourceAxis.groupCount * 5;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false))\r\n\t\t\t}\r\n\t\t\telse if (xAxis instanceof ValueAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>xAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.min;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.max;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false))\r\n\t\t\t}\r\n\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scrollbarChart.xAxes.each((xAxis) => {\r\n\t\t\t\tif (xAxis.clonedFrom == sourceSeries.xAxis) {\r\n\t\t\t\t\tseries.xAxis = xAxis;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.padding(0, 0, 0, 0);\r\n\t\t\trenderer.margin(0, 0, 0, 0);\r\n\t\t\tyAxis.height = percent(100);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\r\n\t\t\tyAxis.maxZoomCount = undefined;\r\n\t\t\tyAxis.minZoomCount = undefined;\r\n\r\n\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>yAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tlet sourceAxis = <DateAxis>sourceSeries.yAxis;\r\n\t\t\t\tyAxis.groupCount = sourceAxis.groupCount * 5;\r\n\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\r\n\t\t\telse if (yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>yAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scrollbarChart.yAxes.each((yAxis) => {\r\n\t\t\t\tif (yAxis.clonedFrom == sourceSeries.yAxis) {\r\n\t\t\t\t\tseries.yAxis = yAxis;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tlet scrollbarChart = this.scrollbarChart;\r\n\r\n\t\tscrollbarChart.series.each((series) => {\r\n\t\t\tif (series && series.clonedFrom == sourceSeries) {\r\n\t\t\t\tscrollbarChart.series.removeValue(series);\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (scrollbarChart.series.length == 0) {\r\n\t\t\tscrollbarChart.xAxes.clear();\r\n\t\t\tscrollbarChart.yAxes.clear();\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t\t}\r\n\t\tcatch (err) {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] object representing overlay that is used to dim area of the\r\n\t * scrollbar that is currently not selected.\r\n\t *\r\n\t * Use its `fillOpacity` to set opacity of the fill, with `0` (zero)\r\n\t * completely disabling the dimming, and `1` making unselected area completely\r\n\t * blank.\r\n\t *\r\n\t * @since 4.6.1\r\n\t * @readonly\r\n\t * @return Unselected area curtain element\r\n\t */\r\n\tpublic get unselectedOverlay(): Sprite {\r\n\t\treturn this._unselectedOverlay;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// add data is handled in XYChart\r\n\t\t\t// invalidating all data caused the problem: https://github.com/amcharts/amcharts4/issues/2096\r\n\t\t\tthis.scrollbarChart.invalidateRawData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic updateThumb(dispatchEvents: boolean = true) {\r\n\t\tsuper.updateThumb(dispatchEvents);\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $number from \"../../core/utils/Number\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when horizontal mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\thorizontalMouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _mouseWheelDisposer2: IDisposer;\r\n\r\n\tprotected _cursorXPosition: number;\r\n\r\n\tprotected _cursorYPosition: number;\r\n\r\n\t/**\r\n\t * Holds a reference to the container axis bullets are drawn in.\r\n\t */\r\n\tpublic axisBulletsContainer: Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet axisBulletsContainer: Container = this.plotContainer.createChild(Container);\r\n\t\taxisBulletsContainer.shouldClone = false;\r\n\t\taxisBulletsContainer.width = percent(100);\r\n\t\taxisBulletsContainer.height = percent(100);\r\n\t\taxisBulletsContainer.isMeasured = false;\r\n\t\taxisBulletsContainer.zIndex = 4;\r\n\t\taxisBulletsContainer.layout = \"none\";\r\n\t\tthis.axisBulletsContainer = axisBulletsContainer;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.dataGrouped = false;\r\n\t\t\t\tseries._baseInterval = {};\r\n\t\t\t})\r\n\t\t}, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tsuper.reinit();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tseries.appeared = false;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tpublic toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\taxes.each((axis) => {\r\n\t\t\tif (!axis.zoomable || (axis instanceof ValueAxis && axis.syncWithAxis)) {\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet axisStart = axis.start;\r\n\t\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\t\tstart = axisStart;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\t\tend = axisEnd;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\trenderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n\r\n\t\tthis._disposers.push(axis.events.on(\"positionchanged\", () => {\r\n\t\t\tlet point = $utils.spritePointToSprite({ x: 0, y: 0 }, axis, this.axisBulletsContainer);\r\n\t\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\t\trenderer.bulletsContainer.y = point.y;\r\n\t\t\t}\r\n\t\t\tif (axis.renderer instanceof AxisRendererX) {\r\n\t\t\t\trenderer.bulletsContainer.x = point.x;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t\tthis.updateSeriesMasks();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet mask = series.mainContainer.mask;\r\n\t\t\t\tseries.mainContainer.mask = undefined;\r\n\t\t\t\tseries.mainContainer.mask = mask;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\r\n\t\tif (series) {\r\n\t\t\tif (series.xAxis) {\r\n\t\t\t\tseries.xAxis.series.removeValue(series);\r\n\t\t\t\tseries.xAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\tif (series.yAxis) {\r\n\t\t\t\tseries.yAxis.series.removeValue(series);\r\n\t\t\t\tseries.yAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\t// otherwise extremes won't change\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.resetExtremes();\r\n\t\t\t})\r\n\t\t}\r\n\t\tsuper.handleSeriesRemoved(event);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._xAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._yAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tseries.maskBullets = series.maskBullets;\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\t\t\tseries.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(series.fillOpacity)) {\r\n\t\t\t\t\t\tseries.fill.backgroundOpacity = series.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.stroke instanceof Color) {\r\n\t\t\t\t\t\tseries.fill.stroke = series.stroke;\r\n\t\t\t\t\t\tseries.fill.fill = series.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.tapToActivate) {\r\n\t\t\t\t\t// We need this in order to setup cursor properly\r\n\t\t\t\t\tthis.setTapToActivate(this.tapToActivate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxes: Axis[] = [];\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\r\n\t\t\tif (snapToSeries && !cursor.downPoint) {\r\n\t\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\t\tsnapToSeries = [snapToSeries];\r\n\t\t\t\t}\r\n\t\t\t\tlet dataItems: XYSeriesDataItem[] = [];\r\n\r\n\t\t\t\t$array.each(snapToSeries, (snpSeries) => {\r\n\t\t\t\t\tif (!snpSeries.isHidden && !snpSeries.isHiding) {\r\n\r\n\t\t\t\t\t\tlet xAxis = snpSeries.xAxis;\r\n\t\t\t\t\t\tlet yAxis = snpSeries.yAxis;\r\n\r\n\t\t\t\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\r\n\t\t\t\t\t\t\tsnpSeries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\t\tdataItems.push(dataItem);\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.xAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.yAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tlet closestDataItem = this.getClosest(dataItems, xPosition, yPosition);\r\n\r\n\t\t\t\tif (closestDataItem) {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tlet closestSeries = closestDataItem.component;\r\n\t\t\t\t\t\tif (series != closestSeries) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t\tif (series.xAxis != closestSeries.xAxis) {\r\n\t\t\t\t\t\t\t\tseries.xAxis.hideTooltip();\r\n\t\t\t\t\t\t\t\texceptAxes.push(series.xAxis);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (series.yAxis != closestSeries.yAxis) {\r\n\t\t\t\t\t\t\t\tseries.yAxis.hideTooltip();\r\n\t\t\t\t\t\t\t\texceptAxes.push(series.yAxis);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tclosestDataItem.component.showTooltipAtDataItem(closestDataItem);\r\n\t\t\t\t\tcursor.handleSnap(closestDataItem.component);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t\tthis._seriesPoints = [];\r\n\r\n\t\t\tif (this._cursorXPosition != xPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this._cursorYPosition != yPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this.arrangeTooltips) {\r\n\t\t\t\tthis.sortSeriesTooltips(this._seriesPoints);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.afterDraw();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds closest data item to position out of the array of items.\r\n\t *\r\n\t * @since 4.9.29\r\n\t * @param   dataItems  Array of items\r\n\t * @param              xPosition X position\r\n\t * @param              yPosition Y position\r\n\t * @return             Data item\r\n\t */\r\n\tpublic getClosest(dataItems: XYSeriesDataItem[], xPosition: number, yPosition: number): XYSeriesDataItem {\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet closestDataItem: XYSeriesDataItem\r\n\r\n\t\t$array.eachContinue(dataItems, (dataItem) => {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet xAxis = dataItem.component.xAxis;\r\n\t\t\t\tlet yAxis = dataItem.component.yAxis;\r\n\r\n\t\t\t\tlet xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\r\n\t\t\t\tlet yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\r\n\r\n\t\t\t\tlet xField = dataItem.component.xField;\r\n\t\t\t\tlet yField = dataItem.component.yField;\r\n\r\n\t\t\t\tif (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\r\n\t\t\t\tlet dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\r\n\r\n\t\t\t\tlet distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\r\n\r\n\t\t\t\tif (distance < minDistance) {\r\n\t\t\t\t\tminDistance = distance;\r\n\t\t\t\t\tclosestDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn closestDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\t\tthis._cursorXPosition = undefined;\r\n\t\tthis._cursorYPosition = undefined;\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Axis | XYSeries>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tif (sprite.cursorTooltipEnabled) {\r\n\t\t\t\tsprite.hideTooltip(0);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds($utils.spriteRectToSvg({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight }, this));\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\t\tif (seriesPoints.length > 0) {\r\n\t\t\tlet cursor = this.cursor;\r\n\r\n\t\t\tif (cursor && $type.isNumber(cursor.maxTooltipDistance)) {\r\n\r\n\t\t\t\tlet cursorPoint = $utils.spritePointToSvg({ x: cursor.point.x, y: cursor.point.y }, cursor);\r\n\r\n\t\t\t\tlet nearestSeries: XYSeries;\r\n\t\t\t\tlet nearestPoint: IPoint;\r\n\t\t\t\tlet smallestDistance: number = Infinity;\r\n\r\n\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\tlet series = seriesPoint.series;\r\n\t\t\t\t\tlet fixedPoint = seriesPoint.point;\r\n\t\t\t\t\tif (fixedPoint) {\r\n\t\t\t\t\t\tlet point = { x: fixedPoint.x, y: fixedPoint.y };\r\n\r\n\t\t\t\t\t\tlet distance = Math.abs($math.getDistance(point, cursorPoint));\r\n\t\t\t\t\t\tif (distance < smallestDistance) {\r\n\t\t\t\t\t\t\tnearestPoint = point;\r\n\t\t\t\t\t\t\tsmallestDistance = distance;\r\n\t\t\t\t\t\t\tnearestSeries = series;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tlet newSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t\tif (nearestSeries) {\r\n\r\n\t\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\t\tif (Math.abs($math.getDistance(seriesPoint.point, nearestPoint)) <= Math.abs(cursor.maxTooltipDistance)) {\r\n\t\t\t\t\t\t\tnewSeriesPoints.push({ series: seriesPoint.series, point: seriesPoint.point });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlet tooltipDataItem = seriesPoint.series.tooltipDataItem;\r\n\t\t\t\t\t\t\tif (tooltipDataItem) {\r\n\t\t\t\t\t\t\t\t$array.each(tooltipDataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t\t\t\t\t\tsprite.handleOutReal(); // to avoid flicker\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tseriesPoint.series.hideTooltip(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tif (cursor.maxTooltipDistance < 0) {\r\n\t\t\t\t\t\tif (newSeriesPoints.length > 0) {\r\n\t\t\t\t\t\t\t$array.each(newSeriesPoints, (np) => {\r\n\t\t\t\t\t\t\t\tif (nearestSeries != np.series) {\r\n\t\t\t\t\t\t\t\t\tnp.series.hideTooltip(0);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnewSeriesPoints = [{ series: nearestSeries, point: nearestPoint }];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseriesPoints = newSeriesPoints;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\t\tlet sum = 0;\r\n\t\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\tlet point = seriesPoint.point;\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\t\tsum += point.y;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\t\tlet firstSeries = this.series.getIndex(0);\r\n\t\t\tlet inversed = false;\r\n\t\t\tif (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\r\n\t\t\t\tinversed = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (inversed) {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(a.point.y, b.point.y))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(b.point.y, a.point.y))\r\n\t\t\t\tseriesPoints.reverse();\r\n\t\t\t}\r\n\r\n\t\t\tlet averageY = sum / seriesPoints.length;\r\n\t\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\t\tif (seriesPoints.length > 0) {\r\n\t\t\t\tlet top = topLeft.y;\r\n\t\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\t\tlet dropped = false;\r\n\r\n\t\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\t\tlet nextY = top;\r\n\t\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis[]): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (!except || except.indexOf(axis) == -1) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t\tif (xAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartXRange = $math.invertRange(this._panStartXRange)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t\tif (yAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartYRange = $math.invertRange(this._panStartYRange)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet delta = 0;\r\n\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (panStartRange.end > 1) {\r\n\t\t\t\tif (panEndRange.end > panStartRange.end) {\r\n\t\t\t\t\tdelta = panEndRange.end - panStartRange.end;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleYAxisSet(series: XYSeries) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\tthis.events.on(\"datavalidated\", () => scrollbar.updateThumb(false), this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(\r\n\t\t\t\t\t\txAxis.renderer.inversed\r\n\t\t\t\t\t\t\t? 1 - arg.position\r\n\t\t\t\t\t\t\t: arg.position\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\tthis.events.on(\"datavalidated\", () => scrollbar.updateThumb(false), this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number, stop?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tlet originalRange = range;\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\r\n\t\t\t\tlet maxZoomFactor = axis.maxZoomFactor;\r\n\t\t\t\tif ($type.isNumber(axis.minZoomCount)) {\r\n\t\t\t\t\tmaxZoomFactor = maxZoomFactor / axis.minZoomCount\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (stop && 1 / (range.end - range.start) >= maxZoomFactor) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (axis.zoomable) {\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\trange = $math.invertRange(originalRange);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trange = originalRange;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\t\t\tif (round) {\r\n\t\t\t\t\t\t\t//let diff = range.end - range.start;\r\n\t\t\t\t\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\t\t\t\t\tlet cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\r\n\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + cellWidth / 2 - (axis.startLocation) * cellWidth, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlet d = 0.0001;\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + d, 0, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end + d, 0, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trealRange = axisRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tthis.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleHorizontalWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\r\n\t\tthis.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint)\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleWheelReal(shift: number, mouseWheelBehavior: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\", plotPoint: IPoint) {\r\n\t\tif (shift != 0) {\r\n\t\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet shiftStep = .1;\r\n\r\n\t\t\tlet maxPanOut = 0;\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tlet round = false;\r\n\t\t\t\tlet singleItemStep = shiftStep;\r\n\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\tsingleItemStep = .5 / ((rangeX.end - rangeX.start) * xAxis.dataItems.length);\r\n\t\t\t\t\tround = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshiftStep = Math.max(0.2, singleItemStep);\r\n\r\n\t\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartX <= 0) {\r\n\t\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndX >= 1) {\r\n\t\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined, round);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tlet singleItemStep = shiftStep;\r\n\t\t\t\tlet round = false;\r\n\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\tsingleItemStep = .5 / ((rangeX.end - rangeX.start) * yAxis.dataItems.length);\r\n\t\t\t\t\tround = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshiftStep = Math.max(0.2, singleItemStep);\r\n\r\n\t\t\t\tshift *= -1;\r\n\t\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartY <= 0) {\r\n\t\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndY >= 1) {\r\n\t\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined, round);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\t\tlet location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\r\n\t\t\t\tnewStartX = Math.min(newStartX, location2X);\r\n\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\t\tnewEndX = Math.max(newEndX, location2X);\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\t\tlet location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\r\n\t\t\t\tnewStartY = Math.min(newStartY, location2Y);\r\n\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\t\t\t\tnewEndY = Math.max(newEndY, location2Y);\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set horizontalMouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer2);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer2) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer2.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal mouse wheel behavior\r\n\t */\r\n\tpublic get horizontalMouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"horizontalMouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.xAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.xAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.yAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.yAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis) => {\r\n\t\t\tlet a = this.xAxes.push(axis.clone());\r\n\t\t\ta.chart = this;\r\n\t\t\ta.renderer.chart = this;\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis) => {\r\n\t\t\tlet a = this.yAxes.push(axis.clone());\r\n\t\t\ta.renderer.chart = this;\r\n\t\t\ta.chart = this;\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif (source.cursor) {\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarX) {\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarY) {\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarX, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarY, removeCount);\r\n\t\t}\r\n\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected addScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tchart._parseDataFrom = chart.data.length;\r\n\t\tchart.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected removeScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\twhile (removeCount > 0) {\r\n\t\t\t\tlet dataItem = this.dataItems.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchart.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchart.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tlet dataItem = dataUser.dataItems.getIndex(0);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataUser.dataItems.remove(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tchart._parseDataFrom--;\r\n\r\n\t\t\t\tremoveCount--;\r\n\t\t\t}\r\n\r\n\t\t\tchart.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>) {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarX, count);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarY, count);\r\n\t\t}\r\n\r\n\t\tsuper.removeData(count);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = value;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = false;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = true;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeries } from \"./LineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\tpublic series: LineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.fill = color();\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0 && $type.isNumber(points[0].x) && $type.isNumber(points[0].y)) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0])\r\n\r\n\t\t\t\tlet series = this.series;\r\n\r\n\t\t\t\tif (series.smoothing == \"bezier\") {\r\n\t\t\t\t\tpath += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.smoothing == \"monotoneX\") {\r\n\t\t\t\t\tpath += new $smoothing.MonotoneX({ closed: false }).smooth(points);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.smoothing == \"monotoneY\") {\r\n\t\t\t\t\tpath += new $smoothing.MonotoneY({ closed: false }).smooth(points);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tif ($type.isNumber(closePoints[0].x) && $type.isNumber(closePoints[0].y)) {\r\n\t\t\t\t\t\tpath += $path.lineTo(closePoints[0]);\r\n\r\n\t\t\t\t\t\tif (series.smoothing == \"bezier\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (series.smoothing == \"monotoneX\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.MonotoneX({ closed: false }).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (series.smoothing == \"monotoneY\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.MonotoneY({ closed: false }).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.events.copyFrom(source.strokeSprite.events);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.events.copyFrom(source.fillSprite.events);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\t// TODO can this be removed ?\r\n\t\t\tthis.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\tlet valueStr = this.formatLabel(value, this.tooltipDurationFormat)\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { DurationAxis } from \"../axes/DurationAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { LegendDataItem } from \"../Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @default 1.1\r\n\t */\r\n\tautoGapCount?: number;\r\n\r\n\t/**\r\n\t * Smoothing algorythm to use for the line.\r\n\t *\r\n\t * @since 4.10.0\r\n\t */\r\n\tsmoothing: \"bezier\" | \"monotoneX\" | \"monotoneY\";\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Defines type for segment.\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\tprotected _adjustedStartIndex: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.autoGapCount = 1.1;\r\n\r\n\t\tthis.smoothing = \"bezier\";\r\n\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// this makes data items animate when added\r\n\r\n\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (xAxis instanceof DurationAxis) {\r\n\t\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\t\tlet value = dataItem.valueX;\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", previousDataItem.valueX, 0); // instantly move it to previous\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", value); // animate to new value\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (yAxis instanceof DurationAxis) {\r\n\t\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\t\tlet value = dataItem.valueY;\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", previousDataItem.valueY, 0); // instantly move it to previous\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", value); // animate to new value\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryX\", dataItem.locations.categoryX);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryY\", dataItem.locations.categoryY);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\tthis._segmentsIterator.reset();\r\n\r\n\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex);\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex, range);\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\t\tsegment.__disabled = true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._adjustedStartIndex = this.findAdjustedIndex(startIndex, [\"stroke\", \"strokeWidth\", \"strokeDasharray\", \"strokeOpacity\", \"fill\", \"fillOpacity\", \"opacity\"]);\r\n\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected findAdjustedIndex(adjustedIndex: number, properties: string[]): number {\r\n\t\tlet propertyFields: any = this.propertyFields;\r\n\t\tlet startIndex = adjustedIndex;\r\n\r\n\t\t$array.each(properties, (property) => {\r\n\t\t\tif ($type.hasValue(propertyFields[property])) {\r\n\t\t\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tif ($type.hasValue(dataItem.properties[property])) {\r\n\t\t\t\t\t\t\tif (adjustedIndex > i) {\r\n\t\t\t\t\t\t\t\tadjustedIndex = i;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn adjustedIndex;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Wraps openSegment call with iterative solution to prevent stack overflow\r\n\t *\r\n\t * @param openIndex  Index\r\n\t * @param axisRange  Range\r\n\t */\r\n\tprotected openSegmentWrapper(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet params = {\r\n\t\t\t\"index\": openIndex,\r\n\t\t\t\"axisRange\": axisRange\r\n\t\t};\r\n\t\tdo {\r\n\t\t\tparams = this.openSegment(params.index, params.axisRange);\r\n\t\t} while (params)\r\n\t}\r\n\r\n\r\n\tprotected getSegment(): LineSeriesSegment {\r\n\t\tlet segment = this._segmentsIterator.getFirst();\r\n\t\tsegment.series = this;\r\n\t\tif (segment.isDisposed()) {\r\n\t\t\tthis.segments.removeValue(segment);\r\n\t\t\treturn this.getSegment();\r\n\t\t}\r\n\t\treturn segment;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param openIndex  [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): { \"index\": number, \"axisRange\": AxisDataItem } {\r\n\t\tlet addToClose = false;\r\n\t\tlet points: IPoint[] = [];\r\n\t\topenIndex = Math.min(openIndex, this.dataItems.length);\r\n\t\tlet endIndex: number = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\t\tthis._workingEndIndex = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this.getSegment();\r\n\t\tsegment.strokeDasharray = undefined;\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tthis.group.node.removeAttribute(\"fill\");\r\n\r\n\t\tlet connect: boolean = this.connect;\r\n\t\tlet valuesFound: boolean = false; // some flag to avoid multiple closes if no values found\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t\tvaluesFound = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect && valuesFound) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (this.baseAxis instanceof DateAxis) {\r\n\t\t\t\tlet next = this.dataItems.getIndex(i + 1)\r\n\t\t\t\tif (next && this.baseAxis.makeGap(next, dataItem)) {\r\n\t\t\t\t\taddToClose = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.closeSegment(segment, points, openIndex, closeIndex, axisRange, addToClose);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment    [description]\r\n\t * @param points     [description]\r\n\t * @param openIndex  [description]\r\n\t * @param closeIndex [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem, add?: boolean) {\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (add) {\r\n\t\t\tcloseIndex++;\r\n\t\t}\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\treturn { \"index\": closeIndex, \"axisRange\": axisRange };\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param itemProperties  Item properties\r\n\t * @param segment         Segment\r\n\t * @return Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"connect\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * IMPORTANT: line smoothing works best when data items are placed at regular\r\n\t * intervals. For setups where data items are spaced erratically, enabling\r\n\t * smoothing might result in awkwardly looking lines.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.y2 = 0.00001;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.stroke;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\r\n\t\t\tif ((bullet instanceof Bullet) && !bullet.copyToLegendMarker) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet hasLabels: boolean = false;\r\n\r\n\t\t\tif (bullet instanceof Container) {\r\n\t\t\t\t// do not copy bullets with labels\r\n\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (!hasLabels) {\r\n\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\tclone.parent = marker;\r\n\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\tclone.x = w / 2;\r\n\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t}\r\n\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @since 4.2.4\r\n\t * @param  value  Gap count\r\n\t */\r\n\tpublic set autoGapCount(value: number) {\r\n\t\tthis.setPropertyValue(\"autoGapCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Gap count\r\n\t */\r\n\tpublic get autoGapCount(): number {\r\n\t\treturn this.getPropertyValue(\"autoGapCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Smoothing algorithm to be used for lines.\r\n\t *\r\n\t * Available options: `\"bezier\"` (default), `\"monotoneX\"`, and `\"monotoneY\"`.\r\n\t *\r\n\t * Monotone options are best suited for data with irregular intervals. Use `\"monotoneX\"` for\r\n\t * horizontal lines, and `\"monotoneY\"` vertical ones.\r\n\t *\r\n\t * NOTE: Both \"monotone\" algorithms will ignore `tensionX` and `tensionY` settings.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @param  value  Smoothing algorithm\r\n\t */\r\n\tpublic set smoothing(value: \"bezier\" | \"monotoneX\" | \"monotoneY\") {\r\n\t\tthis.setPropertyValue(\"smoothing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Smoothing algorithm\r\n\t */\r\n\tpublic get smoothing(): \"bezier\" | \"monotoneX\" | \"monotoneY\" {\r\n\t\treturn this.getPropertyValue(\"smoothing\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\n//import { Sprite } from \"../../core/Sprite\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif(positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end){\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\t\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\t\t\r\n\t}\r\n\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererRadial>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif(this.__disabled || this.disabled){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if label should be bent along the circle\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tbent?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx: number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.locationOnPath = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positioned along the circle.\r\n\t *\r\n\t * @param value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t\tif (!$type.hasValue(value)) {\r\n\t\t\tthis.rotation = undefined;\r\n\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem && dataItem.component) {\r\n\t\t\t\tdataItem.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if label should be bent along the circle.\r\n\t *\r\n\t * IMPORTANT: Use this with caution, since it is quite CPU-greedy.\r\n\t *\r\n\t * @since 4.1.2\r\n\t * @default false\r\n\t * @param  value  Bent?\r\n\t */\r\n\tpublic set bent(value: boolean) {\r\n\t\tthis.setPropertyValue(\"bent\", value, true);\r\n\t\tthis.setPropertyValue(\"wrap\", false);\r\n\t\tthis.setPropertyValue(\"horizontalCenter\", \"none\");\r\n\t\tthis.setPropertyValue(\"verticalCenter\", \"none\");\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.setPropertyValue(\"dx\", 0);\r\n\t\t\tthis.setPropertyValue(\"dy\", 0);\r\n\t\t\tthis.setPropertyValue(\"x\", 0);\r\n\t\t\tthis.setPropertyValue(\"y\", 0);\r\n\t\t\tthis.setPropertyValue(\"rotation\", 0)\r\n\t\t\t//this.setPropertyValue(\"relativeRotation\", undefined);\r\n\t\t\tthis.fdx = 0;\r\n\t\t\tthis.fdy = 0;\r\n\t\t\tthis.textAlign = \"middle\";\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(this.textPathElement){\r\n\t\t\t\tthis.textPathElement.dispose();\r\n\t\t\t\tthis.textPathElement = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bent?\r\n\t */\r\n\tpublic get bent(): boolean {\r\n\t\treturn this.getPropertyValue(\"bent\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label radius in pixels.\r\n\t * \r\n\t * @param   axisRadius  Radius\r\n\t * @return              Pixel radius\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label horizontal radius in pixels.\r\n\t * \r\n\t * @param   axisRadius   Radius\r\n\t * @param   axisRadiusY  Vertical radius\r\n\t * @return               Radius\r\n\t */\r\n\tpublic pixelRadiusY(axisRadius: number, axisRadiusY: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet radius = this.radius;\r\n\r\n\t\tif ($type.isNumber(radius)) {\r\n\t\t\tradius *= axisRadiusY / axisRadius;\r\n\t\t\treturn $utils.relativeToValue(radius, axisRadius) * sign;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $utils.relativeToValue(radius, axisRadiusY) * sign;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param point       Label affixation point\r\n\t * @param axisRadius  Distance from point (px)\r\n\t */\r\n\tpublic fixPosition(angle: number, axisRadius: number, axisRadiusY?: number, dx?: number, dy?: number) {\r\n\t\tif (!$type.isNumber(axisRadiusY)) {\r\n\t\t\taxisRadiusY = axisRadius;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(dx)) {\r\n\t\t\tdx = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(dy)) {\r\n\t\t\tdy = 0;\r\n\t\t}\r\n\r\n\t\tlet point = { x: axisRadius * $math.cos(angle), y: axisRadiusY * $math.sin(angle) };\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet isNegative = false;\r\n\t\tlet realRadius = this.radius;\r\n\r\n\t\tif (realRadius instanceof Percent && realRadius.value < 0) {\r\n\t\t\tisNegative = true;\r\n\t\t}\r\n\t\telse if (realRadius < 0) {\r\n\t\t\tisNegative = true;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif (this.bent) {\r\n\t\t\tlet point = { x: (axisRadius + labelRadius )* $math.cos(angle + 180), y: (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle + 180) };\r\n\t\t\tthis.path = $path.moveTo(point) + $path.arcTo(angle + 180, 360, axisRadius + labelRadius, axisRadiusY + labelRadius * axisRadiusY / axisRadius);\r\n\t\t\t\r\n\t\t\tif (this.textPathElement) {\r\n\t\t\t\tthis.textPathElement.attr({ \"startOffset\": (this.locationOnPath * 100) + \"%\" })\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// WHEN ROTATED\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.horizontalCenter = \"none\";\r\n\t\t\tthis.verticalCenter = \"none\";\r\n\r\n\t\t\tangle = $math.fitAngleToRange(angle, -180, 180);\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = -pixelPaddingLeft - pixelPaddingRight;\r\n\t\t\t\t\tpixelHeight = - pixelHeight - pixelPaddingTop - pixelPaddingBottom;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\t\tpoint.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// END OF ROTATED\r\n\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\tthis.verticalCenter = \"middle\";\r\n\r\n\t\t\tif (isNegative) {\r\n\t\t\t\tthis.dx = 0;\r\n\t\t\t\tthis.dy = 0;\r\n\t\t\t\tpoint.x = (axisRadius + labelRadius) * $math.cos(angle);\r\n\t\t\t\tpoint.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t\t\t// @todo with this math doesn't work well with inside = true\r\n\t\t\t\tthis.dy = this._measuredHeight / 2 * $math.sin(angle) //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\r\n\t\t\t\t// simmilar with dx\r\n\t\t\t\tthis.dx = this._measuredWidth / 2 * $math.cos(angle) //(1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\t\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\t\t\tpoint.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpoint.x += dx;\r\n\t\tpoint.y += dy;\r\n\r\n\t\tthis.fdx = this.dx;\r\n\t\tthis.fdy = this.dy;\r\n\r\n\t\tthis.moveTo(point);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { AxisRendererRadial } from \"./AxisRendererRadial\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\r\n\t/**\r\n\t * Y axis renderer\r\n\t */\r\n\tpublic axisRendererY: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = <RadarChart>this.chart;\t\t\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn innerRadius;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\r\n\t\tif (!$type.isNumber(position2)) {\r\n\t\t\tposition2 = 1;\r\n\t\t}\r\n\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\tlet radius = this.pixelRadius;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (this.axisRendererY) {\r\n\t\t\tlet realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity)\r\n\r\n\t\t\tif(realRadius == 0){\r\n\t\t\t\trealRadius = 0.000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet point = { x: realRadius * $math.cos(angle), y: realRadius * $math.sin(angle) };\r\n\t\t\treturn point;\r\n\t\t}\r\n\r\n\t\treturn { x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2, y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts angle on axis to relative position(0-1).\r\n\t *\r\n\t * @param angle Angle in degrees\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic angleToPosition(angle: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\t\tlet position: number\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - (angle - this.startAngle) / arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = (angle - this.startAngle) / arc + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = $math.min(360, endAngle - startAngle);\t\t\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\r\n\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = 0;\r\n\t\t\t}\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tpoint = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) }\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _chartType: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = this.chart;\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn innerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element && chart) {\r\n\t\t\t\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = 0;\r\n\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tcount = series.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\tlet count = 0;\r\n\t\tif (series) {\r\n\t\t\tcount = series.dataItems.length;\r\n\t\t}\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: RadarChart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\t\r\n\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic mr: number = 1;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\t\tthis.axisBulletsContainer = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\r\n\t\t\tthis.mr = mr;\r\n\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif (axis.renderer.useChartAngles) {\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"counterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns hand's relative position on axis\r\n\t */\r\n\tpublic get currentPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\treturn renderer.angleToPosition(this.rotation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"hands\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"hands\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n","/**\r\n * Defines Percent Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { PercentChart } from \"../types/PercentChart\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, 0, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tif (!noChangeValues) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setWorkingValue(\"value\", 0, 0, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): this[\"_tick\"] {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet tick = this.component.ticks.create();\r\n\t\t\tthis._tick = tick;\r\n\t\t\tthis.addSprite(tick);\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\ttick.parent = this.component.ticksContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.ticks.removeValue(tick);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\r\n\t\t\ttick.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): this[\"_label\"] {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._label = label;\r\n\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.component.labelsContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tlabel.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet slice = component.slices.create();\r\n\t\t\tthis.addSprite(slice);\r\n\r\n\t\t\tthis._slice = slice;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tslice.parent = component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tcomponent.slices.removeValue(slice);\r\n\t\t\t}));\r\n\r\n\r\n\t\t\tslice.visible = this.visible;\r\n\r\n\t\t\t// Apply accessibility\r\n\t\t\tif (component.itemsFocusable()) {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"menu\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"list\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply screen reader label\r\n\t\t\tif (slice.focusable) {\r\n\t\t\t\tslice.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t\tif (slice.hoverable) {\r\n\t\t\t\tslice.events.on(\"over\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"out\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t */\r\n\thiddenInLegend?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesProperties extends ISeriesProperties {\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * Pattern set to apply to fills.\r\n\t * \r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\talignLabels?: boolean;\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t */\r\n\tignoreZeroValues?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentSeriesAdapters extends ISeriesAdapters, IPercentSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\r\nexport class PercentSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines type of the slice elements for the series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * Defines type of the tick elements for the series.\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * Defines type of the label elements for the series.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: PercentChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPercentSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PercentSeriesDataItem;\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _slices: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tick\"]>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_label\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PercentSeries\";\r\n\r\n\t\tthis._addAllDataItems = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\t\tthis.calculatePercent = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.alignLabels = false;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#p')}\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a slice element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Sprite();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a tick element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new Tick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sreates label element.\r\n\t *\r\n\t * @return label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new Label();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the slices. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"slices\": {\r\n\t *       \"stroke\": \"#fff\",\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Slices\r\n\t */\r\n\tpublic get slices(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._slices) {\r\n\t\t\tlet slice = this.createSlice();\r\n\r\n\t\t\tslice.applyOnClones = true;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tthis.initSlice(slice);\r\n\r\n\t\t\tthis._slices = new ListTemplate(slice);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._slices));\r\n\t\t}\r\n\t\treturn this._slices;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of tick elements for the series. Ticks connect slice to its label.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the ticks. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"ticks\": {\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Ticks\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tick\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\tthis.initTick(tick);\r\n\r\n\t\t\tthis._ticks = new ListTemplate(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice label elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the labels. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"stroke\": \"#c00\",\r\n\t *       \"fontSize\": 20\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Labels\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_label\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tthis.initLabel(label);\r\n\r\n\t\t\tthis._labels = new ListTemplate(label);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PercentSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param sliceType  Type of the slice element\r\n\t * @return Slice\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\r\n\t}\r\n\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0p')}\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\tprotected initTick(label: this[\"_tick\"]) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\tthis.colors.reset();\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.reset();\r\n\t\t}\r\n\t\tsuper.validateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tif (slice) {\r\n\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(slice.stroke)) {\r\n\t\t\t\t\t\tslice.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tslice.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(slice.fillOpacity)) {\r\n\t\t\t\t\t\tslice.fill.backgroundOpacity = slice.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (slice.stroke instanceof Color) {\r\n\t\t\t\t\t\tslice.fill.stroke = slice.stroke;\r\n\t\t\t\t\t\tslice.fill.fill = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.colors.currentStep += this.colors.step;\r\n\t\t\t}\r\n\r\n\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\tslice.stroke = slice.fill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (slice) {\r\n\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\tif (bullet.fill == undefined) {\r\n\t\t\t\t\tbullet.fill = slice.fill;\r\n\t\t\t\t}\r\n\t\t\t\tif (bullet.stroke == undefined) {\r\n\t\t\t\t\tbullet.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.updateLegendValue(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i = 0, len = dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (label.pixelY - lh / 2 < -this.maxHeight / 2) {\r\n\t\t\t\t\tlabel.y = -this.maxHeight / 2 + lh / 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet nextLabel = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\tlet bottom: number = label.pixelY + lh / 2;\r\n\r\n\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\tif (nextLabel.invalid) {\r\n\t\t\t\t\t\tnextLabel.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet nextLabelHeight = nextLabel.measuredHeight;\r\n\t\t\t\t\tif (!nextLabel.visible) {\r\n\t\t\t\t\t\tnextLabelHeight = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet nextLabelY = nextLabel.pixelY;\r\n\t\t\t\t\tif (nextLabelY == null) {\r\n\t\t\t\t\t\tnextLabelY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (nextLabelY - nextLabelHeight / 2 < bottom) {\r\n\t\t\t\t\t\tnextLabel.y = bottom + nextLabelHeight / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected arrangeLabels2(dataItems: this[\"_dataItem\"][]): void {\r\n\r\n\t\tlet previousTop = this.maxHeight / 2;\r\n\r\n\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//if (i == dataItems.length - 1) {\r\n\t\t\t\t//previousTop += lh / 2;\r\n\t\t\t\t//}\r\n\r\n\t\t\t\tif (label.pixelY + lh / 2 > previousTop) {\r\n\t\t\t\t\tlabel.y = previousTop - lh / 2;\r\n\t\t\t\t\tpreviousTop = label.y - lh / 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param index      Current index\r\n\t * @param dataItems  Data items\r\n\t * @return Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): this[\"_label\"] {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\tif (nextDataItem.visible) {\r\n\t\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker    Container\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: this[\"_slice\"] = dataItem.slice;\r\n\r\n\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\tchild.defaultState.properties.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tchild.fill = slice.fill;\r\n\t\t\tchild.stroke = slice.stroke;\r\n\t\t\tchild.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tif (child.fill == undefined) {\r\n\t\t\t\tchild.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\r\n\t\t\tchild.addDisposer(slice.events.on(\"propertychanged\", (ev) => {\r\n\t\t\t\tif (ev.property == \"fill\") {\r\n\r\n\t\t\t\t\tchild.__disabled = false;\r\n\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.fill = slice.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"stroke\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.stroke = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"strokeOpacity\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.strokeOpacity = slice.strokeOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: this[\"_slice\"] = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\tif (dataItem && dataItem.bullets) {\r\n\t\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\t\tlet value = a[1];\r\n\t\t\t\tthis.positionBullet(value);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PercentSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.colors = source.colors.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setAlignLabels(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t * @param  value  Ignore zero values\r\n\t */\r\n\tpublic set ignoreZeroValues(value: boolean) {\r\n\t\tthis.setPropertyValue(\"ignoreZeroValues\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ignore zero values\r\n\t */\r\n\tpublic get ignoreZeroValues(): boolean {\r\n\t\treturn this.getPropertyValue(\"ignoreZeroValues\");\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tif (dataItem) {\r\n\t\t\tlet legendDataItem = dataItem.legendDataItem;\r\n\t\t\tlet legendSettings = dataItem.legendSettings;\r\n\r\n\t\t\tif (legendDataItem && legendSettings) {\r\n\r\n\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\r\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable labels and ticks.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof PercentSeries) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\r\n\t\t\tlet labelState = target.labels.template.states.create(stateId);\r\n\t\t\tlabelState.properties.disabled = true;\r\n\r\n\t\t\tlet tickState = target.ticks.template.states.create(stateId);\r\n\t\t\ttickState.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { Legend } from \"../Legend\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\t\t\t\t\t\t\tif (!dataItem.legendSettings) {\r\n\t\t\t\t\t\t\t\tdataItem.legendSettings = series.legendSettings;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0p')}\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tlet slice = percentSeriesDataItem.slice;\r\n\r\n\t\t\t\t\tslice.dispatchImmediately(\"over\");\r\n\t\t\t\t\tslice.isHover = true;\r\n\t\t\t\t\tslice.interactions.isRealHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tlet slice = percentSeriesDataItem.slice;\r\n\t\t\t\tslice.dispatchImmediately(\"out\");\r\n\t\t\t\tslice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\r\n","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"../series/PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radiusY * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst r = label.pixelRadius(slice.radius);\r\n\r\n\t\t\t\tx1 = x0 + r * slice.ix;\r\n\t\t\t\ty1 = y0 + r * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\n//import { Slice3D } from \"../../core/elements/3D/Slice3D\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _startAngleInternal: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _endAngleInternal: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\t//this.startAngle = -90;\r\n\t\t//this.endAngle = 270;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.addDisposer(this.labels.template.events.on(\"enabled\", this.invalidate, this, false));\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/**\r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/**\r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#p')} ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\r\n\t\t\t// The following takes care of removing hover on subsequent click of\r\n\t\t\t// a slice\r\n\t\t\tif (event.target.interactions.lastHitPointer\r\n\t\t\t\t&& event.target.interactions.lastHitPointer.touch\r\n\t\t\t\t&& !event.target.isActive) {\r\n\t\t\t\tevent.target.isHover = false;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels2(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t\tthis.arrangeLabels2(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tif (this.ignoreZeroValues && (dataItem.value == 0 || dataItem.value == null)) {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t}\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = Math.abs(dataItem.values.value.percent) * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tif (!this.labels.template.disabled) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.slice = slice;\r\n\t\t\t\ttick.label = label;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\t\t\t\t\tlabel.dx = 0;\r\n\t\t\t\t\tlabel.dy = 0;\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle > 270 || normalizedMiddleAngle <= 90) {\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t\tlabel.moveTo(point);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet depth = (<any>slice)[\"depth\"];\r\n\t\t\t\t\tif (!$type.isNumber(depth)) {\r\n\t\t\t\t\t\tdepth = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\tlet startAngle = this.getPropertyValue(\"startAngle\");\r\n\t\tif ($type.isNumber(startAngle)) {\r\n\t\t\treturn startAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._startAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\tlet endAngle = this.getPropertyValue(\"endAngle\");\r\n\t\tif ($type.isNumber(endAngle)) {\r\n\t\t\treturn endAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._endAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\r\n\t\tbullet.x = locationY * slice.radius * $math.cos(angle);\r\n\t\tbullet.y = locationY * slice.radiusY * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries } from \"../series/PieSeries\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\tprotected _chartPixelRadius:number;\r\n\r\n\tprotected _chartPixelInnerRadius:number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.updateRadius, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\tthis._disposers.push(this.seriesContainer.events.on(\"positionchanged\", ()=>{\r\n\t\t\tthis.bulletsContainer.x = this.seriesContainer.x;\r\n\t\t\tthis.bulletsContainer.y = this.seriesContainer.y;\r\n\t\t}))\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<PieSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tthis._chartPixelRadius = undefined;\r\n\t\tthis.updateSeriesAngles();\r\n\t}\r\n\r\n\tprotected updateSeriesAngles(){\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tseries._startAngleInternal = this.startAngle;\r\n\t\t\tseries._endAngleInternal = this.endAngle;\r\n\t\t\t//series.defaultState.properties.startAngle = this.startAngle;\r\n\t\t\t//series.defaultState.properties.endAngle = this.endAngle;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\r\n\t\tif(chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius){\r\n\t\t\tthis._chartPixelRadius = chartRadius;\r\n\t\t\tthis._chartPixelInnerRadius = chartPixelInnerRadius;\r\n\r\n\t\t\t//@todo: make it possible to set series radius in percent\r\n\t\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\t\tlet i = a[0];\r\n\t\t\t\tlet series = a[1];\r\n\r\n\t\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t\t}\r\n\t\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.pixelRadius = radius;\r\n\t\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t\t});\r\n\r\n\r\n\t\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\t\tthis.seriesContainer.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 80%\r\n\t * @param value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPercentProperty(\"radius\", value, true, false, 10, false)){\r\n\t\t\tthis.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * NOTE: it's not related to `radius`.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.innerRadius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.innerRadius = am4core.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"innerRadius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"startAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"endAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tconst startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tbullet.y = bullet.pixelY - slice.depth;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tif (this.setPropertyValue(\"depth\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tvalue = $math.fitToRange(value, 0, 90);\r\n\t\tif (this.setPropertyValue(\"angle\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n","/**\r\n * FlowDiagramNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, visualProperties, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings, LegendDataItem } from \"../Legend\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sum of all incomming+outgoing link values\r\n\t */\r\n\ttotal?: number;\r\n\r\n\t/**\r\n\t * Sum of all incoming link values\r\n\t */\r\n\ttotalIncoming?: number;\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values\r\n\t */\r\n\ttotalOutgoing?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramNodeAdapters extends IContainerAdapters, IFlowDiagramNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramNode extends Container {\r\n\r\n\t/**\r\n\t * total ajusted taken in mind chart.minNodeSize\r\n\t */\r\n\tpublic adjustedTotal: number;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: FlowDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[FlowDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this node.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramNode\";\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.inert = true;\r\n\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this, false);\r\n\t\tthis.events.on(\"sizechanged\", this.invalidateLinks, this, false);\r\n\t\t//this.events.on(\"hit\", this.handleHit, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleHit(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tif (this.isHidden || this.isHiding) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden node.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t\tdataItem.link.show();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t\tdataItem.link.show();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides node.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t\tdataItem.link.hide();\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t\tdataItem.link.hide();\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif(!this.isDisposed()){\r\n\t\t\tsuper.validate();\r\n\t\t\tthis.invalidateLinks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tthis.outgoingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"fromNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.fromNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.incomingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"toNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.toNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<this[\"_dataItem\"]> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = this._incomingDataItems.iterator();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<FlowDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = this._outgoingDataItems.iterator();\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incoming+outgoing link values\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set total(value: number) {\r\n\t\tthis.setPropertyValue(\"total\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this.getPropertyValue(\"total\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incomming link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalIncoming(value: number) {\r\n\t\tthis.setPropertyValue(\"totalIncoming\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalIncoming(): number {\r\n\t\treturn this.getPropertyValue(\"totalIncoming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalOutgoing(value: number) {\r\n\t\tthis.setPropertyValue(\"totalOutgoing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalOutgoing(): number {\r\n\t\treturn this.getPropertyValue(\"totalOutgoing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setColorProperty(\"color\", value);\r\n\t\tif (this._background) {\r\n\t\t\tthis._background.fill = value;\r\n\t\t}\r\n\t\tthis.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\tcolumn.stroke = this.fill;\r\n\r\n\t\tcolumn.copyFrom(<any>this);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n","/**\r\n * FlowDiagramLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t */\r\n\tcolorMode?: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\";\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n\r\n\t/**\r\n\t * [maskBullets description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [tooltipLocation description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttooltipLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramLinkAdapters extends IContainerAdapters, IFlowDiagramLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramLink extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tprotected _gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullets: ListTemplate<Bullet>;\r\n\r\n\t/**\r\n\t * Link sprite\r\n\t */\r\n\tpublic link: Sprite;\r\n\r\n\t/**\r\n\t * Bullets mask spite\r\n     */\r\n\tprotected _bulletsMask: Sprite;\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tprotected _bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Line | Polyline;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.maskBullets = false;\r\n\r\n\t\tthis.colorMode = \"fromNode\";\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\t// this is very important, otherwise the container will be shifted\r\n\t\tthis.verticalCenter = \"none\";\r\n\t\tthis.horizontalCenter = \"none\";\r\n\r\n\t\tthis.tooltipText = \"{fromName}→{toName}:{value.value}\";\r\n\t\tthis.tooltipLocation = 0.5;\r\n\r\n\t\tthis.link = this.createChild(Sprite);\r\n\t\tthis.link.shouldClone = false;\r\n\t\tthis.link.setElement(this.paper.add(\"path\"));\r\n\t\tthis.link.isMeasured = false;\r\n\t\tthis.fillOpacity = 0.2;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullets() {\r\n\t\t$iter.each(this.bullets.iterator(), (bullet) => {\r\n\t\t\tbullet.parent = this.bulletsContainer;\r\n\r\n\t\t\tbullet.maxWidth = this.maxWidth;\r\n\t\t\tbullet.maxHeight = this.maxHeight;\r\n\r\n\t\t\tthis.positionBullet(bullet);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tpublic get bulletsContainer() {\r\n\t\tif (!this._bulletsContainer) {\r\n\t\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\t\tbulletsContainer.shouldClone = false;\r\n\t\t\tbulletsContainer.layout = \"none\";\r\n\t\t\tthis._bulletsContainer = bulletsContainer;\r\n\t\t}\r\n\t\treturn this._bulletsContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bullets mask sprite\r\n     */\r\n\tpublic get bulletsMask() {\r\n\t\tif (!this._bulletsMask) {\r\n\t\t\tlet bulletsMask = this.createChild(Sprite);\r\n\t\t\tbulletsMask.shouldClone = false;\r\n\t\t\tbulletsMask.setElement(this.paper.add(\"path\"));\r\n\t\t\tbulletsMask.isMeasured = false;\r\n\t\t\tthis._bulletsMask = bulletsMask;\r\n\t\t}\r\n\t\treturn this._bulletsMask;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets at relative bullet.locationX position on the link.\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet location = bullet.locationX;\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\t\tlet point = this.middleLine.positionToPoint(location);\r\n\r\n\t\tbullet.moveTo(point);\r\n\r\n\t\tlet rotationField = bullet.propertyFields.rotation;\r\n\t\tlet angle: number;\r\n\t\tif (bullet.dataItem) {\r\n\t\t\tlet dataContext: any = bullet.dataItem.dataContext;\r\n\t\t\tangle = dataContext[rotationField];\r\n\t\t}\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = point.angle;\r\n\t\t}\r\n\r\n\t\tbullet.rotation = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t * Some of the links, like ChordLink does not support gradiens well.\r\n\t *\r\n\t * @param value  Fill mode\r\n\t */\r\n\tpublic set colorMode(value: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\") {\r\n\t\tif (value == \"gradient\") {\r\n\t\t\tlet color = this.fill;\r\n\r\n\t\t\tthis.gradient.stops.clear();\r\n\t\t\tif (color instanceof Color) {\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t}\r\n\t\t\tthis.fill = this.gradient;\r\n\t\t\tthis.stroke = this.gradient;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"colorMode\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fill mode\r\n\t */\r\n\tpublic get colorMode(): \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\" {\r\n\t\treturn this.getPropertyValue(\"colorMode\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link bullets be masked or not\r\n\t *\r\n\t * @param value\r\n\t * @default false\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return mask bullets value\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of a tooltip.\r\n\t * @default 0.5\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip location value\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds color steps in the link gradient.\r\n\t *\r\n\t * @param value  Fill option\r\n\t */\r\n\tprotected setFill(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tsuper.setFill(value)\r\n\t\tlet gradient = this._gradient;\r\n\r\n\t\tif (gradient && value instanceof Color) {\r\n\t\t\tgradient.stops.clear();\r\n\t\t\tgradient.addColor(value);\r\n\t\t\tgradient.addColor(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box based on element dimension settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Bullet> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Bullet>(new Bullet());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t\tthis._bullets.events.on(\"inserted\", (event) => {\r\n\t\t\t\tevent.newValue.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"locationX\" || event.property == \"locationY\") {\r\n\t\t\t\t\t\tthis.positionBullet(event.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t}, undefined, false)\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties from another [[FlowDiagramLink]].\r\n\t *\r\n\t * @param source  Source link\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tlet middleLine = this.middleLine;\r\n\t\tif (middleLine) {\r\n\t\t\tif (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\r\n\t\t\tif (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.link.copyFrom(source.link);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tpublic get gradient() {\r\n\t\tif (!this._gradient) {\r\n\t\t\tthis._gradient = new LinearGradient();\r\n\t\t}\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n","/**\r\n * FlowDiagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FlowDiagramDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FlowDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Source node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set fromName(value: string) {\r\n\t\tthis.setProperty(\"fromName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get fromName(): string {\r\n\t\treturn this.properties.fromName;\r\n\t}\r\n\r\n\t/**\r\n\t * Destination node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set toName(value: string) {\r\n\t\tthis.setProperty(\"toName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get toName(): string {\r\n\t\treturn this.properties.toName;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Node color\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", toColor(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @return color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Link's value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A visual element, representing link between the source and target nodes.\r\n\t *\r\n\t * Link's actual thickness will be determined by `value` of this link and\r\n\t * `value` of the source node.\r\n\t *\r\n\t * @readonly\r\n\t * @return Link element\r\n\t */\r\n\tpublic get link(): this[\"_link\"] {\r\n\t\tif (!this._link) {\r\n\t\t\tlet link = this.component.links.create();\r\n\t\t\tthis._link = link;\r\n\r\n\t\t\tthis.addSprite(link);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.links.removeValue(link);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._link;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramDataFields extends IChartDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Visibility of a node\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[FlowDiagram]]\r\n */\r\nexport interface IFlowDiagramProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t */\r\n\tnodePadding?: number;\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort a\r\n\t */\r\n\tsortBy?: \"none\" | \"name\" | \"value\";\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t */\r\n\tminNodeSize: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramAdapters extends IChartAdapters, IFlowDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagram extends Chart {\r\n\r\n\t/**\r\n\t * A Color Set to use when applying/generating colors for each subsequent\r\n\t * node.\r\n\t */\r\n\tpublic colors: ColorSet = new ColorSet();\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IFlowDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramEvents;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: FlowDiagramNode;\r\n\r\n\r\n\t/**\r\n\t * A list of chart's FlowDiagram nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tprotected _nodes: DictionaryTemplate<string, this[\"_node\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * A list of FlowDiagram links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * A container that holds all of the link elements.\r\n\t */\r\n\tpublic linksContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds all of the node elements.\r\n\t */\r\n\tpublic nodesContainer: Container;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, FlowDiagramNode]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagram\";\r\n\t\tthis.nodePadding = 20;\r\n\t\tthis.sortBy = \"none\";\r\n\t\tthis.sequencedInterpolation = true;\r\n\r\n\t\tthis.colors.step = 2;\r\n\t\tthis.minNodeSize = 0.02;\r\n\r\n\t\tlet linksContainer = this.chartContainer.createChild(Container);\r\n\t\tlinksContainer.shouldClone = false;\r\n\t\tlinksContainer.layout = \"none\";\r\n\t\tlinksContainer.isMeasured = false;\r\n\t\tthis.linksContainer = linksContainer;\r\n\r\n\t\tlet nodesContainer = this.chartContainer.createChild(Container);\r\n\t\tnodesContainer.shouldClone = false;\r\n\t\tnodesContainer.layout = \"none\";\r\n\t\tnodesContainer.isMeasured = false;\r\n\t\tthis.nodesContainer = nodesContainer;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tthis.dataItem.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\tthis.nodes.clear();\r\n\t\t}\r\n\r\n\t\tthis.sortNodes();\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet count = 0;\r\n\t\tlet low: number;\r\n\t\tlet high: number;\r\n\r\n\t\t// build blocks\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet fromName = dataItem.fromName;\r\n\r\n\t\t\tif (fromName) {\r\n\t\t\t\tlet node = this.nodes.getKey(fromName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(fromName);\r\n\t\t\t\t\tnode.name = fromName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.fromNode = node;\r\n\t\t\t\tdataItem.fromNode.outgoingDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t\tlet toName = dataItem.toName;\r\n\t\t\tif (toName) {\r\n\t\t\t\tlet node = this.nodes.getKey(toName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(toName);\r\n\t\t\t\t\tnode.name = toName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.toNode = node;\r\n\t\t\t\tdataItem.toNode.incomingDataItems.push(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\tlet strokeModifier = new LinearGradientModifier();\r\n\t\t\t\tstrokeModifier.opacities = [0, 1];\r\n\t\t\t\tdataItem.link.strokeModifier = strokeModifier;\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\tlet fillModifier = new LinearGradientModifier();\r\n\t\t\t\tfillModifier.opacities = [1, 0];\r\n\t\t\t\tdataItem.link.strokeModifier = fillModifier;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = dataItem.value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tsum += value;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (low > value || !$type.isNumber(low)) {\r\n\t\t\t\t\tlow = value;\r\n\t\t\t\t}\r\n\t\t\t\tif (high < value || !$type.isNumber(high)) {\r\n\t\t\t\t\thigh = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet key = \"value\";\r\n\r\n\t\tthis.dataItem.setCalculatedValue(key, high, \"high\");\r\n\t\tthis.dataItem.setCalculatedValue(key, low, \"low\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n\t\tthis.dataItem.setCalculatedValue(key, count, \"count\");\r\n\r\n\r\n\t\t$iter.each(this.nodes.iterator(), (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\r\n\t\t\tif (node.fill instanceof Color) {\r\n\t\t\t\tnode.color = node.fill;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.color == undefined) {\r\n\t\t\t\tnode.color = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (node.dataItem.color != undefined) {\r\n\t\t\t\tnode.color = node.dataItem.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (!node.dataItem.visible) {\r\n\t\t\t\tnode.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.sortNodes();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n\t */\r\n\tprotected sortNodes() {\r\n\t\tif (this.sortBy == \"name\") {\r\n\t\t\tthis._sorted = this.nodes.sortedIterator();\r\n\t\t}\r\n\t\telse if (this.sortBy == \"value\") {\r\n\t\t\tthis._sorted = $iter.sort(this.nodes.iterator(), (x, y) => $order.reverse($number.order(x[1].total, y[1].total)));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._sorted = this.nodes.iterator();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: FlowDiagramNode) {\r\n\r\n\t\t// todo: totalIncomming totalOutgoing, total\r\n\r\n\t\tlet incomingTotal = 0;\r\n\t\tlet outgoingTotal = 0;\r\n\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tincomingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\toutgoingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnode.total = incomingTotal + outgoingTotal;\r\n\t\tnode.totalIncoming = incomingTotal;\r\n\t\tnode.totalOutgoing = outgoingTotal;\r\n\t};\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Flow diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FlowDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t *\r\n\t * Padding will add extra space around node's name label.\r\n\t *\r\n\t * @param value Padding (px)\r\n\t */\r\n\tpublic set nodePadding(value: number) {\r\n\t\tthis.setPropertyValue(\"nodePadding\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding (px)\r\n\t */\r\n\tpublic get nodePadding(): number {\r\n\t\treturn this.getPropertyValue(\"nodePadding\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n\t * @default \"none\"\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set sortBy(value: \"none\" | \"name\" | \"value\") {\r\n\t\tthis.setPropertyValue(\"sortBy\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Node sorting\r\n\t */\r\n\tpublic get sortBy(): \"none\" | \"name\" | \"value\" {\r\n\t\treturn this.getPropertyValue(\"sortBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t * @default 0.02\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set minNodeSize(value: number) {\r\n\t\tthis.setPropertyValue(\"minNodeSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns min node size\r\n\t */\r\n\tpublic get minNodeSize(): number {\r\n\t\treturn this.getPropertyValue(\"minNodeSize\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of chart's nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tpublic get nodes(): DictionaryTemplate<string, this[\"_node\"]> {\r\n\t\tif (!this._nodes) {\r\n\t\t\tlet template = this.createNode();\r\n\t\t\ttemplate.events.on(\"hit\", (event) => {\r\n\t\t\t\tevent.target.handleHit(event);\r\n\t\t\t});\r\n\t\t\tthis._nodes = new DictionaryTemplate<string, this[\"_node\"]>(template);\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new FlowDiagramNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's links.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tpublic get links(): ListTemplate<this[\"_link\"]> {\r\n\t\tif (!this._links) {\r\n\t\t\tthis._links = new ListTemplate<this[\"_link\"]>(this.createLink());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new FlowDiagramLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.nodes.each((key, node) => {\r\n\t\t\t\tlegendData.push(node);\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.nodes.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ILabelBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ILabelBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILabelBulletAdapters extends IBulletAdapters, ILabelBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class LabelBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILabelBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILabelBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILabelBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"LabelBullet\";\r\n\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.hideOversized = false;\r\n\r\n\t\tlabel.maxWidth = 500;\r\n\t\tlabel.maxHeight = 500;\r\n\r\n\t\tlabel.stroke = color();\r\n\t\tlabel.strokeOpacity = 0;\r\n\t\tlabel.fill = new InterfaceColorSet().getFor(\"text\");\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", this.handleMaxSize, this, false);\r\n\r\n\t\tthis.label = label;\r\n\r\n\t\t// not good, as lineSeries will have labels somewhere in the middle.\r\n\t\t//this.locationX = 0.5;\r\n\t\t//this.locationY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected handleMaxSize(){\r\n\t\tthis.label.maxWidth = this.maxWidth;\r\n\t\tthis.label.maxHeight = this.maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[LabelBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LabelBullet\"] = LabelBullet;\r\n","/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IFlowDiagramNodeProperties {\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t */\r\n\tlevel?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IFlowDiagramNodeAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyNodeEvents;\r\n\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[SankeyDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\tnameLabel.shouldClone = false;\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.label.text = \"{name}\";\r\n\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.width = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tnameLabel.label.padding(0, 5, 0, 5);\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.shouldClone = false;\r\n\t\tvalueLabel.label.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.background.hiddenState.copyFrom(hiddenState);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t\t\t\t$utils.used(link.gradient);\r\n\r\n\t\t\t\t\t\t\tlink.fill = dataItem.toNode.color;\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t *\r\n\t * @param bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.measuredWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.measuredHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t *\r\n\t * @param value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n","/**\r\n * SankeyLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SankeyDiagramDataItem, SankeyDiagram } from \"../types/SankeyDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyLinkAdapters extends IFlowDiagramLinkAdapters, ISankeyLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t */\r\n\tpublic middleLine: Polyspline;\r\n\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyLink\";\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.controlPointDistance = 0.2;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.linkWidth = 0;\r\n\r\n\t\tthis.startX = 0;\r\n\t\tthis.endX = 0;\r\n\r\n\t\tthis.startY = 0;\r\n\t\tthis.endY = 0;\r\n\r\n\t\tthis.middleLine = this.createChild(Polyspline);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected makeBackwards() {\r\n\t\tif (this.states.getKey(\"backwards\") != undefined) {\r\n\t\t\tthis.setState(\"backwards\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet x0 = this.startX\r\n\t\t\tlet y0 = this.startY;\r\n\t\t\tlet x1 = this.endX;\r\n\t\t\tlet y1 = this.endY;\r\n\r\n\t\t\tif (this.states.getKey(\"backwards\")) {\r\n\t\t\t\tthis.setState(\"default\");\r\n\t\t\t}\r\n\r\n\t\t\tif (this.dataItem) {\r\n\t\t\t\tlet chart = this.dataItem.component;\r\n\r\n\t\t\t\tif (chart) {\r\n\t\t\t\t\tif (chart.orientation == \"horizontal\") {\r\n\t\t\t\t\t\tif (x1 < x0) {\r\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\r\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\r\n\t\t\t\t\t\t\tthis.makeBackwards();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (y1 < y0) {\r\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\r\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\r\n\t\t\t\t\t\t\tthis.makeBackwards();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(x1)) {\r\n\t\t\t\tx1 = x0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(y1)) {\r\n\t\t\t\ty1 = y0;\r\n\t\t\t}\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet w = this.linkWidth;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tlet xt0 = x0;\r\n\t\t\tlet yt0 = y0;\r\n\r\n\t\t\tlet xt1 = x1;\r\n\t\t\tlet yt1 = y1;\r\n\r\n\t\t\tlet xb0 = x0 + w * $math.sin(startAngle);\r\n\t\t\tlet xb1 = x1 + w * $math.sin(endAngle);\r\n\r\n\t\t\tlet yb0 = y0 + w * $math.cos(startAngle);\r\n\t\t\tlet yb1 = y1 + w * $math.cos(endAngle);\r\n\r\n\t\t\tlet xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n\t\t\tlet xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n\r\n\t\t\tlet ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n\t\t\tlet ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n\r\n\t\t\tthis.zIndex = this.zIndex || this.dataItem.index;\r\n\r\n\t\t\tlet tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n\t\t\tlet tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n\r\n\t\t\tthis.middleLine.tensionX = tensionX;\r\n\t\t\tthis.middleLine.tensionY = tensionY;\r\n\r\n\t\t\tif ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n\r\n\t\t\t\t// solves issues with gradient fill of straight lines\r\n\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n\t\t\t\t\txt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n\t\t\t\t\tyt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n\t\t\t\t\txb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n\t\t\t\t\tyb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minX = Math.min(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet minY = Math.min(yb0, yb1, yt0, yt1);\r\n\t\t\t\tlet maxX = Math.max(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet maxY = Math.max(yb0, yb1, yt0, yt1);\r\n\r\n\t\t\t\tthis._bbox = {\r\n\t\t\t\t\tx: minX,\r\n\t\t\t\t\ty: minY,\r\n\t\t\t\t\twidth: maxX - minX,\r\n\t\t\t\t\theight: maxY - minY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet cpd = this.controlPointDistance;\r\n\r\n\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n\r\n\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tif (ym1 == ym0) {\r\n\t\t\t\t\tym1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n\r\n\t\t\t\tkxt0 += dx / 2;\r\n\t\t\t\tkyt0 += dy / 2;\r\n\r\n\t\t\t\tkxt1 += dx / 2;\r\n\t\t\t\tkyt1 += dy / 2;\r\n\r\n\t\t\t\tpath += $path.moveTo({ x: xt0, y: yt0 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n\t\t\t\tpath += $path.lineTo({ x: xb1, y: yb1 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.link.path = path;\r\n\r\n\t\t\tif (this.maskBullets) {\r\n\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t}\r\n\t\t\tthis.positionBullets();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start X\r\n\t */\r\n\tpublic set startX(value: number) {\r\n\t\tthis.setPropertyValue(\"startX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start X\r\n\t */\r\n\tpublic get startX(): number {\r\n\t\treturn this.getPropertyValue(\"startX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End X\r\n\t */\r\n\tpublic set endX(value: number) {\r\n\t\tthis.setPropertyValue(\"endX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End X\r\n\t */\r\n\tpublic get endX(): number {\r\n\t\treturn this.getPropertyValue(\"endX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start Y\r\n\t */\r\n\tpublic set startY(value: number) {\r\n\t\tthis.setPropertyValue(\"startY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start Y\r\n\t */\r\n\tpublic get startY(): number {\r\n\t\treturn this.getPropertyValue(\"startY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set endY(value: number) {\r\n\t\tthis.setPropertyValue(\"endY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get endY(): number {\r\n\t\treturn this.getPropertyValue(\"endY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set linkWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"linkWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get linkWidth(): number {\r\n\t\treturn this.getPropertyValue(\"linkWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n\t * @default 0.2\r\n\t * @param value\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return relative control point distance\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of a spline, 1 would make the link to have sharp edges\r\n\t * @default 0.8\r\n\t * @param value\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return tension value\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n","/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\tprotected _level: number;\r\n\r\n\tprotected _counter: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._valueHeight = undefined;\t\t\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = undefined;\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tif ($type.isNumber(link.fromNode.level)) {\r\n\t\t\t\t\tlevels.push(link.fromNode.level + 1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._counter = 0;\r\n\t\t\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t\t\t\tif (this._counter < this.dataItems.length) {\r\n\t\t\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's no loop in the ancestor chain.\r\n\t * \r\n\t * @param  node  Node\r\n\t */\r\n\tprotected checkLoop(node: this[\"_node\"]): void {\r\n\t\tthis._counter++;\r\n\r\n\t\tif (this._counter > this.dataItems.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t})\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\t\tlet minHeight: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\r\n\t\t\tlet levelNodeCount = this._levelNodesCount[key];\r\n\t\t\tlet valueHeight = (availableHeight - (levelNodeCount - 1) * this.nodePadding) / realValue;\r\n\r\n\t\t\tif (valueHeight == Infinity) {\r\n\t\t\t\tvalueHeight = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (minHeight > valueHeight || !$type.isNumber(minHeight)) {\r\n\t\t\t\tminHeight = valueHeight;\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (valueHeight == Infinity) {\r\n\t\t\tvalueHeight = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.maxSum == 0) {\r\n\t\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight - nodeCount * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"middle\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight / 2 - nodeCount / 2 * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && h == 0) {\r\n\t\t\t\t\th = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && w == 0) {\r\n\t\t\t\t\tw = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.preventShow) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tlet label = this.createChild(AxisLabelCircular);\r\n\t\tlabel.location = 0.5;\r\n\t\tlabel.radius = 5;\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.zIndex = 1;\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.fixPosition(labelAngle, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realX: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realY: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\t//this.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.events.disableType(\"transformed\"); // not to bug parent\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", this.handleKidAdded, this, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleKidAdded() {\r\n\t\tif (this.layout == \"none\") {\r\n\t\t\tthis.layout = \"absolute\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.isMeasured = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet column = this.column;\r\n\t\tif (column) {\r\n\t\t\tcolumn.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tcolumn.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t\tif(column.invalid){\r\n\t\t\t\tcolumn.validate(); // important!\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Column]].\r\n\t *\r\n\t * @param source Source Column\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tif (this.column) {\r\n\t\t\treturn { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesDataItemAdapters extends IDataItemAdapters {\r\n\twidth: number | Percent;\r\n\theight: number | Percent;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesDataItemAdapters;\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic set width(value: number | Percent) {\r\n\t\tif (this.properties.width != value) {\r\n\t\t\tthis.properties.width = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get width(): number | Percent {\r\n\t\tlet width = this.properties.width;\r\n\t\tif (this._adapterO) {\r\n\t\t\twidth = this._adapterO.apply(\"width\", width);\r\n\t\t}\r\n\t\treturn width;\r\n\t}\r\n\r\n\r\n\tpublic set height(value: number | Percent) {\r\n\t\tif (this.properties.height != value) {\r\n\t\t\tthis.properties.height = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get height(): number | Percent {\r\n\t\tlet height = this.properties.height;\r\n\t\tif (this._adapterO) {\r\n\t\t\theight = this._adapterO.apply(\"height\", height);\r\n\t\t}\r\n\t\treturn height;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields {\r\n\twidth?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\r\n\t\tthis.group.node.removeAttribute(\"fill\");\r\n\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tlet baseAxisSeries = this.chart.series;\r\n\t\t\tlet clusterCount: number = 0;\r\n\t\t\tlet index: number = 0;\r\n\r\n\t\t\tlet sortedByAxis: { series: XYSeries, axis: number }[] = [];\r\n\t\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\t\tlet index: number;\r\n\t\t\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\t\t\tindex = this.chart.yAxes.indexOf(series.yAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tindex = this.chart.xAxes.indexOf(series.xAxis);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tsortedByAxis.push({ series: series, axis: index })\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tsortedByAxis.sort((a, b) => a.axis - b.axis);\r\n\t\t\tlet prevAxisIndex: number;\r\n\r\n\t\t\t$array.each(sortedByAxis, (sortedItem) => {\r\n\t\t\t\tlet series = sortedItem.series;\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || (prevAxisIndex != sortedItem.axis && series.clustered)) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tprevAxisIndex = sortedItem.axis;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.clustered) {\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tclusterCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (xAxis instanceof CategoryAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\tif (xAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(xAxis, \"valueY\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof CategoryAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\tif (yAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(yAxis, \"valueX\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tthis._propertiesChanged = false;\r\n\t}\r\n\r\n\tprotected sortCategoryAxis(axis: CategoryAxis, key: string) {\r\n\t\tthis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn (<any>y).values[key].workingValue - (<any>x).values[key].workingValue;\r\n\t\t})\r\n\t\tlet i = 0;\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tdataItem._index = i;\r\n\t\t\ti++;\r\n\t\t})\r\n\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tlet axis = dataItem.component;\r\n\t\t\tlet currentPosition = axis.categoryToPosition(dataItem.category) - dataItem.deltaPosition;\r\n\r\n\t\t\tlet seriesDataItem = axis.getSeriesDataItemByCategory(dataItem.category, this);\r\n\r\n\t\t\tif (seriesDataItem) {\r\n\t\t\t\tlet index = this.dataItems.indexOf(<ColumnSeriesDataItem>seriesDataItem);\r\n\r\n\t\t\t\tdataItem._index = index;\r\n\r\n\t\t\t\tlet deltaPosition = $math.round((index + 0.5) / this.dataItems.length - currentPosition, 3);\r\n\r\n\t\t\t\tif (dataItem.deltaAnimation && !dataItem.deltaAnimation.isDisposed() && dataItem.deltaAnimation.animationOptions[0].to == deltaPosition) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse if (deltaPosition != $math.round(dataItem.deltaPosition, 3)) {\r\n\t\t\t\t\tif (dataItem.deltaAnimation) {\r\n\t\t\t\t\t\tdataItem.deltaAnimation.stop();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.deltaAnimation = dataItem.animate({ property: \"deltaPosition\", from: -deltaPosition, to: 0 }, axis.interpolationDuration, axis.interpolationEasing);\r\n\t\t\t\t\tthis._disposers.push(dataItem.deltaAnimation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\taxis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn x.index - y.index;\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tthis.validateDataElementReal(dataItem);\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\t/*\r\n   public handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t   if (this.simplifiedProcessing) {\r\n\t\t   this.validateDataElement(dataItem);\r\n\t   }\r\n\t   else {\r\n\t\t   super.handleDataItemWorkingValueChange(dataItem, name);\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\tlet diw = dataItem.width;\r\n\t\tif ($type.hasValue(diw)) {\r\n\t\t\tif ($type.isNumber(diw)) {\r\n\t\t\t\tpixelWidth = diw;\r\n\t\t\t}\r\n\t\t\tif (diw instanceof Percent) {\r\n\t\t\t\tpercentWidth = diw.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet dih = dataItem.height;\r\n\t\tif ($type.hasValue(dih)) {\r\n\t\t\tif ($type.isNumber(dih)) {\r\n\t\t\t\tpixelHeight = dih;\r\n\t\t\t}\r\n\t\t\tif (dih instanceof Percent) {\r\n\t\t\t\tpercentHeight = dih.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.yAxis.axisLength);\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.xAxis.axisLength);\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t\tcolumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tif (!$type.hasValue(this.role)) {\r\n\t\t\t\t\t\tthis.role = \"menu\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.hasValue(column.role)) {\r\n\t\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!$type.hasValue(this.role)) {\r\n\t\t\t\t\t\tthis.role = \"list\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.hasValue(column.role)) {\r\n\t\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\t\tcolumn.virtualParent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t\tif (this._propertiesChanged) {\r\n\t\t\t\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t\t$array.each(visualProperties, (property) => {\r\n\t\t\t\t\t\t(<any>column)[property] = column[property];\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\t\tif (this._dropFromOpenState || this._dropFromPreviousState || this._riseFromOpenState || this._riseFromPreviousState) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet open: number;\r\n\t\t\t\tlet value: number;\r\n\t\t\t\tlet change: number;\r\n\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value < open) {\r\n\t\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (change < 0) {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet bulletLocationX = bullet.locationX;\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet bulletLocationY = bullet.locationY;\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationX?: number) {\r\n\t\t//if (this.baseAxis == this.xAxis) {\r\n\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationX = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._endLocation - (this._endLocation - this._startLocation) * (1 - bulletLocationX);\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedXLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationY?: number) {\r\n\t\t//if (this.baseAxis == this.yAxis) {\r\n\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationY = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedYLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\treturn treeMapDataItem.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.hide(duration);\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.show(duration, delay, fields);\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tif(this.preventShow){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t\tdataItem.show(duration);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t\tdataItem.hide(duration);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\t\t\r\n\t\treturn 0;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\treturn 1;\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tsuper.disableUnusedColumns(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.__disabled = false;\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {workingValue:0};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\t/**\r\n\t * Percent value of a node\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * For the legend to work properly\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", 0);\r\n\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.hide(duration, delay, toValue, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.hide();\r\n\t\t\t\tvalue.preventShow = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", this.values.value.value);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.show(duration, delay, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.preventShow = false;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t */\r\n\thideParentColumns?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis._usesData = true;\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.hideParentColumns = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\ttemplate.virtualParent = this;\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (!dataItem.isDisposed()) {\r\n\t\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.currentlyZoomed = undefined;\r\n\t\tthis.xAxis.start = 0;\r\n\t\tthis.xAxis.end = 1;\r\n\t\tthis.yAxis.start = 0;\r\n\t\tthis.yAxis.end = 1;\r\n\t\tsuper.setData(value);\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\tbullet.show();\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tif (this.hideParentColumns) {\r\n\t\t\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.level == this.currentLevel) {\r\n\t\t\t\t\tif (this.maxLevels > 1) {\r\n\t\t\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\tif (dataItem.treeMapDataItem.children) {\r\n\t\t\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\t\t\tbullet.hide();\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem?: TreeMapDataItem): void {\r\n\t\tif (!dataItem) {\r\n\t\t\tdataItem = this._homeDataItem;\r\n\t\t}\r\n\r\n\t\tlet zoomOutButton = this.zoomOutButton;\r\n\t\t// this is needed because if there is only one fist level, it won't be shown\r\n\t\tif (zoomOutButton) {\r\n\t\t\tif (dataItem != this._homeDataItem) {\r\n\t\t\t\tzoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tzoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t * @param  value  Hide?\r\n\t */\r\n\tpublic set hideParentColumns(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideParentColumns\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide?\r\n\t */\r\n\tpublic get hideParentColumns(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideParentColumns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tif(n > 0){\r\n\t\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\t\t}\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) {\r\n\t\t\t\t\tk = mid + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thi = mid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n\t\t\t\t--k;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif(value == 0){\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\t\t\t\t\r\n\t\t\t\treturn;\r\n\t\t\t}\t\t\t\t\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet node;\r\n\t\tlet i = -1;\r\n\t\tlet n = nodes.length;\r\n\t\tlet k = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tnode.x1 = x1;\r\n\t\t\tnode.y0 = y0;\r\n\t\t\ty0 += node.value * k;\r\n\t\t\tnode.y1 = y0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.y0 = y0;\r\n\t\t\tnode.y1 = y1;\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tx0 += node.value * k;\r\n\t\t\tnode.x1 = x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tif (parent.level & 1) {\r\n\t\t\tthis.slice(parent);\r\n\t\t} else {\r\n\t\t\tthis.dice(parent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0;\r\n\t\t\tdy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo {\r\n\t\t\t\tsumValue = nodes.getIndex(i1++).value;\r\n\t\t\t} while (!sumValue && i1 < n);\r\n\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue;\r\n\t\t\ti0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2() {\r\n\t\t// void\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLegendLevel(dataItem: TreeMapDataItem): TreeMapDataItem {\r\n\t\tif (!dataItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!dataItem.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dataItem.children.length > 1) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse if (dataItem.children.length == 1) {\r\n\t\t\tlet child = dataItem.children.getIndex(0);\r\n\t\t\tif (child.children) {\r\n\t\t\t\treturn this.getLegendLevel(child);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series:TreeMapSeries){\r\n\t\t// void\r\n\t}\t\r\n\r\n\t/**\r\n\t * A data item associated with top node.\r\n\t * \r\n\t * @since 4.8.2\r\n\t */\r\n\tpublic get homeDataItem(): TreeMapDataItem {\r\n\t\treturn this._homeDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlet legendParent = this.getLegendLevel(this._homeDataItem);\r\n\r\n\t\t\tif (legendParent) {\r\n\t\t\t\tlet legendData: Array<this[\"_dataItem\"]> = [];\r\n\r\n\t\t\t\tlegendParent.children.each((dataItem) => {\r\n\t\t\t\t\t//if (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(dataItem);\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlegend.data = legendData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif ($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D || 0;\r\n\t\tlet dy = this.chart.dy3D || 0;\r\n\t\tthis.baseGrid.path =  $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w + dx, y: dy });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t\tif(this.column3D.invalid){\r\n\t\t\t\tthis.column3D.validate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Column3D]].\r\n\t *\r\n\t * @param source Source Column3D\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\t\tthis.column.fill = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && chart.columnsContainer && chart.leftAxesContainer.layout != \"vertical\" && chart.rightAxesContainer.layout != \"vertical\" && chart.bottomAxesContainer.layout != \"horizontal\" && chart.topAxesContainer.layout != \"horizontal\") {\r\n\t\t\treturn chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif (dataItem.column) {\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\r\n\t\t\tdataItem.column.visible = this.visible;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tsuper.updateSeriesMasks();\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tlet columnsContainer = this.columnsContainer;\r\n\t\t\tlet mask = columnsContainer.mask;\r\n\t\t\tcolumnsContainer.mask = undefined;\r\n\t\t\tcolumnsContainer.mask = mask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.paddingTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count);\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tif (series.columnsContainer == this.columnsContainer) {\r\n\t\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tlet column = dataItem.column;\r\n\t\t\t\t\tif (column) {\r\n\t\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * (1000 - i) + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t\tif (inversed) {\r\n\t\t\t\t\ts--;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n","/**\r\n * HeatLegend module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[HeatLegend]].\r\n */\r\nexport interface IHeatLegendProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum color\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tminColor?: Color;\r\n\r\n\t/**\r\n\t * Minimum value\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tminValue?: number;\r\n\r\n\t/**\r\n\t * Maximum value\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaxValue?: number;\r\n\r\n\r\n\t/**\r\n\t * Maximum color\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaxColor?: Color;\r\n\r\n\t/**\r\n\t * Number of markers (steps)\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmarkerCount?: number;\r\n\r\n\r\n\t/**\r\n\t * Orientation\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\torientation?: \"horizontal\" | \"vertical\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[HeatLegend]].\r\n */\r\nexport interface IHeatLegendEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[HeatLegend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IHeatLegendAdapters extends IContainerAdapters, IHeatLegendProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link IHeatLegendEvents} for a list of available events\r\n * @see {@link IHeatLegendAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class HeatLegend extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IHeatLegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IHeatLegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IHeatLegendEvents;\r\n\r\n\t/**\r\n\t * List of heat legend markers (color step rectangles).\r\n\t */\r\n\tpublic markers: ListTemplate<RoundedRectangle>;\r\n\r\n\t/**\r\n\t * Container which holds markers\r\n\t */\r\n\tpublic markerContainer: Container;\r\n\r\n\t/**\r\n\t * Value axis of a heat legend\r\n\t * @ignore\r\n\t */\r\n\tprotected _valueAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * Series of a heat legend\r\n\t * @ignore\r\n\t */\r\n\tprotected _series: Series;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"HeatLegend\";\r\n\r\n\t\tthis.markerContainer = this.createChild(Container);\r\n\t\tthis.markerContainer.shouldClone = false;\r\n\r\n\t\tthis.markerCount = 1;\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: RoundedRectangle = new RoundedRectangle();\r\n\t\tmarker.minHeight = 20;\r\n\t\tmarker.minWidth = 20;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.fillOpacity = 1;\r\n\t\tmarker.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tthis.markerContainer.minHeight = 20;\r\n\t\tthis.markerContainer.minWidth = 20;\r\n\r\n\t\tthis.orientation = \"horizontal\";\r\n\r\n\t\tthis.markers = new ListTemplate<RoundedRectangle>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\tprotected getMinFromRules(property: string, ) {\r\n\t\tlet series = this.series;\r\n\t\tif (series) {\r\n\t\t\tlet minValue;\r\n\t\t\t$iter.eachContinue(series.heatRules.iterator(), (heatRule) => {\r\n\t\t\t\tif (heatRule.property == property) {\r\n\t\t\t\t\tminValue = heatRule.min;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t})\r\n\t\t\treturn minValue;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getMaxFromRules(property: string, ) {\r\n\t\tlet series = this.series;\r\n\t\tif (series) {\r\n\t\t\tlet maxValue;\r\n\t\t\t$iter.each(series.heatRules.iterator(), (heatRule) => {\r\n\t\t\t\tif (heatRule.property == property) {\r\n\t\t\t\t\tmaxValue = heatRule.max;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\treturn maxValue;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.valueAxis.renderer.inversed = this.reverseOrder;\r\n\r\n\t\tlet series = this.series;\r\n\r\n\t\tlet minColor = this.minColor;\r\n\t\tlet maxColor = this.maxColor;\r\n\r\n\t\tif (!$type.hasValue(minColor)) {\r\n\t\t\tminColor = toColor(this.getMinFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(maxColor)) {\r\n\t\t\tmaxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tif (series) {\r\n\t\t\tlet seriesFill = series.fill;\r\n\t\t\tif (!$type.hasValue(minColor) && seriesFill instanceof Color) {\r\n\t\t\t\tminColor = seriesFill;\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(maxColor) && seriesFill instanceof Color) {\r\n\t\t\t\tmaxColor = seriesFill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(maxColor)) {\r\n\t\t\tmaxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tlet minOpacity = $type.toNumber(this.getMinFromRules(\"fillOpacity\"));\r\n\t\tif (!$type.isNumber(minOpacity)) {\r\n\t\t\tminOpacity = 1;\r\n\t\t}\r\n\t\tlet maxOpacity = $type.toNumber(this.getMaxFromRules(\"fillOpacity\"));\r\n\t\tif (!$type.isNumber(maxOpacity)) {\r\n\t\t\tmaxOpacity = 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet minStrokeOpacity = $type.toNumber(this.getMinFromRules(\"strokeOpacity\"));\r\n\t\tif (!$type.isNumber(minStrokeOpacity)) {\r\n\t\t\tminStrokeOpacity = 1;\r\n\t\t}\r\n\t\tlet maxStrokeOpacity = $type.toNumber(this.getMaxFromRules(\"strokeOpacity\"));\r\n\t\tif (!$type.isNumber(maxStrokeOpacity)) {\r\n\t\t\tmaxStrokeOpacity = 1;\r\n\t\t}\r\n\r\n\t\tlet minStroke = toColor(this.getMinFromRules(\"stroke\"));\r\n\t\tlet maxStroke = toColor(this.getMaxFromRules(\"stroke\"));\r\n\r\n\r\n\t\t//if (series) {\r\n\t\tfor (let i = 0; i < this.markerCount; i++) {\r\n\t\t\tlet marker = this.markers.getIndex(i);\r\n\r\n\t\t\tif (!marker) {\r\n\t\t\t\tmarker = this.markers.create();\r\n\t\t\t\tmarker.parent = this.markerContainer;\r\n\t\t\t\tmarker.height = percent(100);\r\n\t\t\t\tmarker.width = percent(100);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (this.markerCount == 1) {\r\n\t\t\t\tlet gradient = new LinearGradient();\r\n\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\tgradient.addColor(maxColor, maxOpacity);\r\n\t\t\t\t\tgradient.addColor(minColor, minOpacity);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tgradient.addColor(minColor, minOpacity);\r\n\t\t\t\t\tgradient.addColor(maxColor, maxOpacity);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tgradient.rotation = -90;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmarker.fill = gradient;\r\n\t\t\t\tif ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n\t\t\t\t\tlet strokeGradient = new LinearGradient();\r\n\t\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\t\tstrokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n\t\t\t\t\t\tstrokeGradient.addColor(minStroke, minStrokeOpacity);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstrokeGradient.addColor(minStroke, minStrokeOpacity);\r\n\t\t\t\t\t\tstrokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\tstrokeGradient.rotation = -90;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmarker.stroke = strokeGradient;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet c = i;\r\n\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\tc = this.markerCount - i - 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet color = new Color($colors.interpolate(minColor.rgb, maxColor.rgb, c / this.markerCount));\r\n\t\t\t\tmarker.fill = color;\r\n\r\n\t\t\t\tlet opacity = minOpacity + (maxOpacity - minOpacity) * c / this.markerCount;\r\n\t\t\t\tmarker.fillOpacity = opacity;\r\n\r\n\t\t\t\tif ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n\t\t\t\t\tlet color = new Color($colors.interpolate(minStroke.rgb, maxStroke.rgb, c / this.markerCount));\r\n\t\t\t\t\tmarker.stroke = color;\r\n\r\n\t\t\t\t\tlet opacity = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * c / this.markerCount;\r\n\t\t\t\t\tmarker.strokeOpacity = opacity;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet renderer = this.valueAxis.renderer;\r\n\t\tif (this.markerCount > 1) {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\trenderer.minGridDistance = this.measuredWidth / this.markerCount;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trenderer.minGridDistance = this.measuredHeight / this.markerCount;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.valueAxis.invalidate();\r\n\r\n\t\tfor (let i = this.markerCount, len = this.markers.length; i < len; i++) {\r\n\t\t\tthis.markers.getIndex(i).parent = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.\r\n\t *\r\n\t * @param {Color}\r\n\t */\r\n\tpublic set minColor(value: Color) {\r\n\r\n\t\tif (!(value instanceof Color)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setColorProperty(\"minColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns minColor value\r\n\t * @return {Color}\r\n\t */\r\n\tpublic get minColor(): Color {\r\n\t\treturn this.getPropertyValue(\"minColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.\r\n\t *\r\n\t * @param {Color}\r\n\t */\r\n\tpublic set maxColor(value: Color) {\r\n\r\n\t\tif (!(value instanceof Color)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setColorProperty(\"maxColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maxColor value\r\n\t * @return {Color}\r\n\t */\r\n\tpublic get maxColor(): Color {\r\n\t\treturn this.getPropertyValue(\"maxColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set markerCount(value: number) {\r\n\t\tthis.setPropertyValue(\"markerCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns number of color squares (markers).\r\n\t * @return {number}\r\n\t */\r\n\tpublic get markerCount(): number {\r\n\t\treturn this.getPropertyValue(\"markerCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set minValue(value: number) {\r\n\t\tthis.setPropertyValue(\"minValue\", value);\r\n\t\tthis.valueAxis.min = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns minimum value of heat legend.\r\n\t * @return {number}\r\n\t */\r\n\tpublic get minValue(): number {\r\n\t\treturn this.getPropertyValue(\"minValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxValue(value: number) {\r\n\t\tthis.setPropertyValue(\"maxValue\", value);\r\n\t\tthis.valueAxis.max = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maximum value of heat legend.\r\n\t * @return {number}\r\n\t */\r\n\tpublic get maxValue(): number {\r\n\t\treturn this.getPropertyValue(\"maxValue\");\r\n\t}\r\n\r\n\t/**\r\n\t* Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.\r\n\t*\r\n\t* @param {\"horizontal\" | \"vertical\"}\r\n\t*/\r\n\tpublic set orientation(value: \"horizontal\" | \"vertical\") {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet markerContainer = this.markerContainer;\r\n\t\tlet valueAxis = this.valueAxis;\r\n\r\n\t\t// HORIZONTAL\r\n\t\tif (value == \"horizontal\") {\r\n\t\t\tif (!$type.hasValue(this.width)) {\r\n\t\t\t\tthis.width = 200;\r\n\t\t\t}\r\n\t\t\tthis.height = undefined;\r\n\r\n\t\t\tvalueAxis.width = percent(100);\r\n\t\t\tvalueAxis.height = undefined;\r\n\t\t\tvalueAxis.tooltip.pointerOrientation = \"vertical\";\r\n\r\n\t\t\tthis.layout = \"vertical\";\r\n\t\t\tmarkerContainer.width = percent(100);\r\n\t\t\tmarkerContainer.height = undefined;\r\n\t\t\tif (!(valueAxis.renderer instanceof AxisRendererX)) {\r\n\t\t\t\tvalueAxis.renderer = new AxisRendererX();\r\n\t\t\t}\r\n\t\t}\r\n\t\t// VERTICAL\r\n\t\telse {\r\n\t\t\tif (!$type.hasValue(this.height)) {\r\n\t\t\t\tthis.height = 200;\r\n\t\t\t}\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.layout = \"horizontal\";\r\n\t\t\tmarkerContainer.width = undefined;\r\n\t\t\tmarkerContainer.height = percent(100);\r\n\t\t\tvalueAxis.height = percent(100);\r\n\t\t\tvalueAxis.width = undefined;\r\n\t\t\tvalueAxis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\t\tif (!(valueAxis.renderer instanceof AxisRendererY)) {\r\n\t\t\t\tvalueAxis.renderer = new AxisRendererY();\r\n\t\t\t}\r\n\t\t\tvalueAxis.renderer.inside = true;\r\n\t\t\tvalueAxis.renderer.labels.template.inside = true;\r\n\r\n\t\t\tthis.markerContainer.reverseOrder = true;\r\n\t\t}\r\n\r\n\t\tlet renderer = valueAxis.renderer;\r\n\t\trenderer.grid.template.disabled = true;\r\n\t\trenderer.axisFills.template.disabled = true;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t\trenderer.labels.template.padding(2, 3, 2, 3);\r\n\r\n\t\trenderer.minHeight = undefined;\r\n\t\trenderer.minWidth = undefined;\r\n\r\n\t\tthis.markerContainer.layout = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns orientation value.\r\n\t *\r\n\t * @return {\"horizontal\" | \"vertical\"}\r\n\t */\r\n\tpublic get orientation(): \"horizontal\" | \"vertical\" {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a value axis of heat legend. Value axis for heat legend is created automatically.\r\n\t * @param {ValueAxis}\r\n\t */\r\n\tpublic set valueAxis(valueAxis: ValueAxis) {\r\n\r\n\t\tthis._valueAxis = valueAxis;\r\n\r\n\t\tvalueAxis.parent = this;\r\n\t\tvalueAxis.strictMinMax = true;\r\n\t\tthis.orientation = this.orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns valueAxis value.\r\n\t * @return {ValueAxis}\r\n\t */\r\n\tpublic get valueAxis(): ValueAxis {\r\n\t\tif (!this._valueAxis) {\r\n\t\t\tthis.valueAxis = this.createChild(ValueAxis);\r\n\t\t\tthis.valueAxis.shouldClone = false;\r\n\t\t}\r\n\t\treturn this._valueAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.\r\n\t * @param series\r\n\t */\r\n\tset series(series: Series) {\r\n\t\tthis._series = series;\r\n\r\n\t\tlet dataField = \"value\";\r\n\r\n\t\ttry {\r\n\t\t\tlet dataFieldDefined = series.heatRules.getIndex(0).dataField;\r\n\t\t\tif (dataFieldDefined) {\r\n\t\t\t\tdataField = dataFieldDefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err) {\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n\r\n\t\tseries.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\tthis.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n\t\t}, undefined, false);\r\n\r\n\t\tseries.heatRules.events.on(\"inserted\", this.invalidate, this, false);\r\n\t\tseries.heatRules.events.on(\"removed\", this.invalidate, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns series value.\r\n\t * @return {Series}\r\n\t */\r\n\tget series(): Series {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates min/max of value axis.\r\n\t * @ignore\r\n\t */\r\n\tprotected updateMinMax(min: number, max: number) {\r\n\t\tlet valueAxis = this.valueAxis;\r\n\t\tif (!$type.isNumber(this.minValue)) {\r\n\t\t\tvalueAxis.min = min;\r\n\t\t\tvalueAxis.invalidate();\r\n\t\t}\r\n\t\tif (!$type.isNumber(this.maxValue)) {\r\n\t\t\tvalueAxis.max = max;\r\n\t\t\tvalueAxis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isString(config.series)) {\r\n\t\t\t\tif ($type.isString(config.series)) {\r\n\t\t\t\t\tif (this.map.hasKey(config.series)) {\r\n\t\t\t\t\t\tconfig.series = this.map.getKey(config.series);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet seriesId = config.series;\r\n\t\t\t\t\t\tconst disposer = this.map.events.on(\"insertKey\", function(ev) {\r\n\t\t\t\t\t\t\tif (ev.key == seriesId) {\r\n\t\t\t\t\t\t\t\tthis.series = ev.newValue;\r\n\t\t\t\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\tthis._disposers.push(disposer);\r\n\t\t\t\t\t\tdelete config.series;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"HeatLegend\"] = HeatLegend;\r\n","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { GroupField, IXYSeriesGroupFields } from \"./XYSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t */\r\n\thighDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines data fields that can be calculated for aggregate values.\r\n * \r\n * @since 4.7.0\r\n */\r\nexport interface ICandlestickSeriesGroupFields extends IXYSeriesGroupFields {\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `lowValueX` data field.\r\n\t *\r\n\t * @default \"low\"\r\n\t */\r\n\tlowValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `lowValueY` data field.\r\n\t *\r\n\t * @default \"low\"\r\n\t */\r\n\tlowValueY?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `highValueX` data field.\r\n\t *\r\n\t * @default \"high\"\r\n\t */\r\n\thighValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `highValueY` data field.\r\n\t *\r\n\t * @default \"high\"\r\n\t */\r\n\thighValueY?: GroupField;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines type of the group fields.\r\n\t * \r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic _groupFields: ICandlestickSeriesGroupFields;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\t/**\r\n\t * Sets type of the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.groupFields.lowValueX = \"low\";\r\n\t\tthis.groupFields.lowValueY = \"low\";\r\n\r\n\t\tthis.groupFields.highValueX = \"high\";\r\n\t\tthis.groupFields.highValueY = \"high\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]) {\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tlet yAxisFieldName: string = $utils.capitalize(yAxis.axisFieldName);\r\n\t\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t\t}\r\n\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tlet xAxisFieldName: string = $utils.capitalize(xAxis.axisFieldName);\r\n\t\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.stroke;\r\n\t\tlegendDataItem.colorOrig = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\tthis.fillSprite.path = \"\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines type for segement.\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocationX:number;\r\n\t\tlet endLocationX:number;\r\n\r\n\t\tlet startLocationY:number;\r\n\t\tlet endLocationY:number;\t\t\r\n\r\n\t\tif(this.baseAxis == this.xAxis){\r\n\t\t\tstartLocationX = this.startLocation;\r\n\t\t\tendLocationX = this.endLocation;\r\n\r\n\t\t\tstartLocationY = this.getAdjustedXLocation(dataItem, this.yOpenField);\r\n\t\t\tendLocationY = this.getAdjustedXLocation(dataItem, this.yField);\r\n\t\t}\r\n\r\n\t\tif(this.baseAxis == this.yAxis){\r\n\t\t\tstartLocationY = this.startLocation;\r\n\t\t\tendLocationY = this.endLocation;\r\n\r\n\t\t\tstartLocationX = this.getAdjustedXLocation(dataItem, this.xOpenField);\r\n\t\t\tendLocationX = this.getAdjustedXLocation(dataItem, this.xField);\t\t\t\r\n\t\t}\r\n\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocationX);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocationY);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocationX);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocationY);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t * @ignore\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\treturn this.radarColumn.getTooltipX();\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t * @ignore\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\treturn this.radarColumn.getTooltipY();\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.copyProperties(this, radarColumn, visualProperties); // need this \r\n\t\t\t$object.copyProperties(this.columns.template, radarColumn, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tradarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet width = radarColumn.width;\r\n\t\tlet percentWidth = 100;\r\n\r\n\t\tif (width instanceof Percent) {\r\n\t\t\tpercentWidth = width.percent;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, 0, \"valueY\"), y: this.yAxis.getY(dataItem, yField, 0, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, 1, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, 1, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, 0, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, 1, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tif ($type.isNumber(width)) {\t\t\t\t\r\n\t\t\t\tlet abs = Math.abs(tRadius - bRadius);\r\n\t\t\t\tif (abs > width) {\r\n\t\t\t\t\tlet d = (abs - width) / 2;\r\n\t\t\t\t\ttRadius += d;\r\n\t\t\t\t\tbRadius -= d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = rangeColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.paper = this.paper;\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererRadial>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n","/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Width of the top edge of the slice.\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Width of the bottom edge of the slice.\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\texpandDistance?: number;\r\n\r\n\t/**\r\n\t * Orientation of the slice.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSlice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSliceAdapters extends IContainerAdapters, IFunnelSliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSlice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Am anchor point the slice tick line is pointing to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @readonly\r\n\t */\r\n\tpublic tickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.shouldClone = false;\r\n\t\tthis.slice.setElement(this.paper.add(\"path\"));\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.expandDistance = 0;\r\n\r\n\t\tthis.className = \"FunnelSlice\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tlet ed = this.expandDistance;\r\n\r\n\t\tlet path = \"\";\r\n\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n\t\t\tlet cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(br);\r\n\t\t\tlet qp2 = $path.lineTo(tl);\r\n\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(br, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tl, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n\t\t\tlet cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(bt);\r\n\t\t\tlet qp2 = $path.lineTo(tb);\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(bt, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tb, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n\t\t}\r\n\r\n\t\tthis.slice.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\r\n\tgetPoint(locationX:number, locationY:number):IPoint{\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet mlx = tl.x + (bl.x - tl.x) * locationY;\r\n\t\t\tlet mrx = tr.x + (br.x - tr.x) * locationY;\r\n\r\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet mty = tt.y + (bt.y - tt.y) * locationX;\r\n\t\t\tlet mby = tb.y + (bb.y - tb.y) * locationX;\r\n\r\n\t\t\treturn { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Bottom width\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return bottom width\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Top width\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top width\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set orintation if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to. It's relative to the\r\n\t * height of the slice.\r\n\t *\r\n\t * Zero (default) will mean the sides will be perfectly straight.\r\n\t *\r\n\t * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n\t *\r\n\t * Negative values will make them bend inwards.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set expandDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"expandDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return expandDistance\r\n\t */\r\n\tpublic get expandDistance(): number {\r\n\t\treturn this.getPropertyValue(\"expandDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.slice) {\r\n\t\t\tthis.slice.copyFrom(source.slice);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n","/**\r\n * Funnel tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelSlice } from \"./FunnelSlice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickProperties extends ITickProperties {\r\n\tlocationX?: number;\r\n\r\n\tlocationY?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelTickAdapters extends ITickAdapters, IFunnelTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nexport class FunnelTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<Label>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<FunnelSlice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelTick\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\r\n\t\tthis.setPropertyValue(\"locationX\", 0);\r\n\t\tthis.setPropertyValue(\"locationY\", 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: FunnelSlice = this.slice;\r\n\t\tlet point = slice.getPoint(this.locationX, this.locationY);\r\n\r\n\t\tif (point) {\r\n\t\t\tlet label = this.label;\r\n\r\n\t\t\tlet series = <FunnelSeries>slice.dataItem.component;\r\n\t\t\tlet p0:IPoint;\r\n\t\t\tlet p1:IPoint;\r\n\t\t\tlet p2:IPoint;\r\n\r\n\t\t\tif (series.orientation == \"vertical\") {\r\n\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tx1 += label.maxRight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp0 = $utils.spritePointToSprite(point, slice, this.parent);\t\t\t\t\r\n\t\t\t\tp2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\t\t\t\tp1 = { x: label.parent.pixelX - this.length, y: p2.y };\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tp1.x = label.parent.measuredWidth + this.length; \r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\ty1 += label.maxBottom;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tp2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\t\t\t\tp1 = { x: p2.x, y: label.parent.pixelY - this.length };\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tp1.y = label.parent.measuredHeight + this.length; \r\n\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1) + $path.lineTo(p2);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [[FunnelSlice]] element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: FunnelSlice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this, false),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return FunnelSlice\r\n\t */\r\n\tpublic get slice(): FunnelSlice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: Label) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tthis.setPropertyValue(\"locationX\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tthis.setPropertyValue(\"locationY\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n","/**\r\n * Defines Funnel Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SlicedChart } from \"../types/SlicedChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FunnelSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * A reference to a label element.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a tick element.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FunnelSeries;\r\n\r\n\t/**\r\n\t * Defines a type of elements linking slices.\r\n\t */\r\n\tpublic _sliceLink: FunnelSlice;\r\n\r\n\t/**\r\n\t * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get sliceLink(): this[\"_sliceLink\"] {\r\n\t\tif (!this._sliceLink) {\r\n\t\t\tlet sliceLink = this.component.sliceLinks.create();\r\n\t\t\tthis._sliceLink = sliceLink;\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\t\t\tsliceLink.parent = this.component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.sliceLinks.removeValue(sliceLink);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(sliceLink);\r\n\t\t\tsliceLink.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._sliceLink;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelSeriesDataItem\";\r\n\t\t// this helps to invalidate series when value is 0 an it is hidden (no other events are triggered then)\r\n\t\tthis.events.on(\"visibilitychanged\", () => {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesDataFields extends IPercentSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative width of the slice bottom. See description of `bottomRatio`\r\n\t * property for full description.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tbottomRatio?: number;\r\n\r\n\t/**\r\n\t * Orientation of series\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tlabelsOpposite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSeriesAdapters extends IPercentSeriesAdapters, IFunnelSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSeries extends PercentSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: SlicedChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IFunnelSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: FunnelSeriesDataItem;\r\n\r\n\r\n\tprotected _nextY: number = 0;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _sliceLinks: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * Holds sum of values for all slices\r\n\t */\r\n\tprotected _total: number;\r\n\r\n\t/**\r\n\t * Holds number of slices.\r\n\t */\r\n\tprotected _count: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FunnelSeries\";\r\n\t\tthis.orientation = \"vertical\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.slicesContainer.width = percent(100);\r\n\t\tthis.slicesContainer.height = percent(100);\r\n\r\n\t\tthis._disposers.push(this.slicesContainer.events.on(\"maxsizechanged\", this.invalidateDataItems, this, false));\r\n\r\n\t\tthis.labelsOpposite = true;\r\n\r\n\t\tthis.labelsContainer.layout = \"absolute\";\r\n\r\n\t\tthis.bottomRatio = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelSlice]] element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new FunnelSlice();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelTick]] element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new FunnelTick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Funnel Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FunnelSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#p')} ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.expandDistance = 0.2;\r\n\t}\r\n\r\n\t/**\r\n\t * [initLabel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param label [description]\r\n\t */\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tsuper.initLabel(label);\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.isMeasured = true;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextY = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\r\n\t\tlet slicesContainer = this.slicesContainer;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlabelTemplate.interactionsEnabled = true;\r\n\t\t\tslicesContainer.isMeasured = true;\r\n\t\t\tlabelsContainer.isMeasured = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabelTemplate.interactionsEnabled = false;\r\n\t\t\tslicesContainer.isMeasured = false;\r\n\t\t\tlabelsContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\t\tthis.dataItems.each((dItem) => {\r\n\t\t\tif ($type.hasValue(dItem.value)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tif (dItem.value > 0) {\r\n\t\t\t\t\ttotal += Math.abs(dItem.getWorkingValue(\"value\") / dItem.value);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.ignoreZeroValues) {\r\n\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (!dItem.visible || dItem.__disabled || dItem.isHiding) {\r\n\t\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttotal += 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._total = 1 / count * total;\r\n\t\tthis._count = count;\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tthis.arrangeLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\r\n\t\t\tif (!nextItem.visible || nextItem.isHiding || nextItem.__disabled || (nextItem.value == 0 && this.ignoreZeroValues)) {\r\n\t\t\t\treturn this.getNextValue(nextItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [formDataElement description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected formDataElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//if ($type.hasValue(dataItem.value)) {\r\n\t\t// FunnelSlice\r\n\t\tlet slice = dataItem.slice;\r\n\t\tslice.orientation = this.orientation;\r\n\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tsliceLink.orientation = this.orientation;\r\n\r\n\t\tlet tick = dataItem.tick;\r\n\t\tlet label = dataItem.label;\r\n\r\n\t\ttick.slice = slice;\r\n\t\ttick.label = label;\r\n\r\n\t\tif ($type.hasValue(dataItem.value)) {\r\n\t\t\tthis.decorateSlice(dataItem);\r\n\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\tif (dataItem.value == 0 && this.ignoreZeroValues) {\r\n\t\t\t\t\tsprite.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsprite.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (dataItem.index == this.dataItems.length - 1) {\r\n\t\t\tsliceLink.disabled = true;\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tsliceLink.fill = slice.fill;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\t\tlet bottomRatio = this.bottomRatio;\r\n\r\n\t\tlet d = 1;\r\n\t\tif (dataItem.value != 0) {\r\n\t\t\td = workingValue / Math.abs(dataItem.value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (dataItem.__disabled || dataItem.isHiding || !dataItem.visible) {\r\n\t\t\t\td = 0.000001;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.ignoreZeroValues && dataItem.value == 0) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this._nextY == Infinity) {\r\n\t\t\tthis._nextY = 0;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tlet linkHeight = sliceLink.pixelHeight * d;\r\n\r\n\t\t\tmaxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\tslice.height = Math.min(100000, $math.max(0, maxHeight / this._count * d / this._total - linkHeight));\r\n\r\n\t\t\tslice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = slice.x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = undefined;\r\n\t\t\t}\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = slice.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet linkWidth = sliceLink.pixelWidth * d;\r\n\r\n\t\t\tmaxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\tslice.width = Math.min(100000, maxWidth / this._count * d * 1 / this._total - linkWidth);\r\n\t\t\tslice.y = maxHeight / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = slice.y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\r\n\t\t\tsliceLink.y = slice.y;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLastLabel(index: number): Label {\r\n\t\tif (index > 0) {\r\n\t\t\tlet lastLabel = this.labels.getIndex(index);\r\n\t\t\tif (lastLabel.__disabled || !lastLabel.visible) {\r\n\t\t\t\treturn this.getLastLabel(index - 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn lastLabel;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [arrangeLabels description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected arrangeLabels(): void {\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlet count = this.labels.length;\r\n\t\t\tif (count > 1) {\r\n\r\n\t\t\t\tlet lastLabel = this.getLastLabel(count - 1);\r\n\t\t\t\tif (lastLabel) {\r\n\r\n\t\t\t\t\tlet lastY = lastLabel.pixelY;\r\n\t\t\t\t\tlet lastX = lastLabel.pixelX;\r\n\r\n\t\t\t\t\tif (count > 1) {\r\n\t\t\t\t\t\tfor (let i = count - 2; i >= 0; i--) {\r\n\t\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\r\n\t\t\t\t\t\t\tif (label.visible && !label.__disabled) {\r\n\t\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelY + label.measuredHeight > lastY) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.y = Math.min(1000000, lastY - label.measuredHeight);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelX + label.measuredWidth > lastX) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.x = Math.min(1000000, lastX - label.measuredWidth);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlastY = label.pixelY;\r\n\t\t\t\t\t\t\t\tlastX = label.pixelX;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlastY = 0;\r\n\t\t\t\t\t\tlastX = 0;\r\n\t\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\t\t\t\t\t\t\tif (label.visible && !label.__disabled) {\r\n\t\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelY < lastY) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.y = Math.min(1000000, lastY);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelX < lastX) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.x = Math.min(1000000, lastX);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlastY += label.measuredHeight;\r\n\t\t\t\t\t\t\t\tlastX += label.measuredWidth;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: FunnelSlice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tbullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n\t\tbullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\t\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t\t\tthis.invalidate();\r\n\t\t\tif (value == \"vertical\") {\r\n\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\tthis.ticks.template.locationY = 0.5;\r\n\t\t\t\tthis.labels.template.rotation = 0;\r\n\t\t\t\tthis.layout = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.ticks.template.locationX = 0.5;\r\n\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\tthis.labels.template.rotation = -90;\r\n\t\t\t\tthis.layout = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's bottom will change in relation to slices top AND\r\n\t * next slices top.\r\n\t *\r\n\t * Basically it's a relative value (0-1) that indicates bottom width\r\n\t * position between current slice's top width and the top withd of the next\r\n\t * one.\r\n\t *\r\n\t * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n\t * slice with).\r\n\t *\r\n\t * `0` (default) will mean that bottom will be the same as top, resulting in\r\n\t * a prefectly square slice.\r\n\t *\r\n\t * From the data-viz standpoint `0` is a correct setting, since area of the\r\n\t * slices will depict their value correctly.\r\n\t *\r\n\t * `1` will mean that slice will become trapezoid with its bottom matching\r\n\t * width of the next slice.\r\n\t *\r\n\t * `0.5` will make bottom width be in the middle of width of current slice\r\n\t * and the next slice.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set bottomRatio(value: number) {\r\n\t\tif (this.setPropertyValue(\"bottomRatio\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get bottomRatio(): number {\r\n\t\treturn this.getPropertyValue(\"bottomRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of elements linking each actual slice.\r\n\t *\r\n\t * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n\t * so they have all the same configuration options.\r\n\t *\r\n\t * You can use `template` of this link, to specify how links will look.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"FunnelSeries\",\r\n\t *      // ...\r\n\t *      \"sliceLinks\": {\r\n\t *        \"fillOpacity\": 0.5\r\n\t *      }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Funnel links\r\n\t */\r\n\tpublic get sliceLinks(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._sliceLinks) {\r\n\t\t\tlet sliceLink = new FunnelSlice();\r\n\t\t\tsliceLink.applyOnClones = true;\r\n\t\t\tsliceLink.fillOpacity = 0.5;\r\n\t\t\tsliceLink.expandDistance = - 0.3;\r\n\t\t\tsliceLink.hiddenState.properties.opacity = 0;\r\n\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\r\n\t\t\tthis._sliceLinks = new ListTemplate(sliceLink);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._sliceLinks));\r\n\t\t}\r\n\t\treturn this._sliceLinks;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif(!options.animationsEnabled){\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\t\t\r\n\r\n\t\tlet delay: number = 0;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.show(interpolationDuration, delay, [\"value\"]);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[] = [\"value\"];\r\n\t\tlet value: number = 0;\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif(!options.animationsEnabled){\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\t\t\t\t\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t});\r\n\r\n\t\tlet animation: Animation = super.hide(duration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tsuper.setAlignLabels(value);\r\n\t\tthis.ticks.template.disabled = !value;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tif (labelsContainer) {\r\n\t\t\t// do not align\r\n\t\t\tif (!value) {\r\n\t\t\t\tlabelsContainer.width = percent(100);\r\n\t\t\t\tlabelsContainer.height = percent(100);\r\n\t\t\t}\r\n\t\t\t//align\r\n\t\t\telse {\r\n\t\t\t\tlabelsContainer.height = undefined;\r\n\t\t\t\tlabelsContainer.width = undefined;\r\n\t\t\t\tlabelsContainer.margin(10, 10, 10, 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t}\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * This setting is only used if `alignLabels = true`.\r\n\t *\r\n\t * If set to `true` (default) labels will be drawn to the right (on vertical\r\n\t * series), or to the bottom (on horizontal series).\r\n\t *\r\n\t * If set to `false`, labels will be positioned to the left or top\r\n\t * respectively.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.1.13\r\n\t * @param  value  Labels on opposite side?\r\n\t */\r\n\tpublic set labelsOpposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"labelsOpposite\", value)\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tlet labelAlign: Align = \"none\";\r\n\t\tlet labelValign: VerticalAlign = \"none\";\r\n\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlabelAlign = \"center\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelValign = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// opposite (left/bottom)\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.labelsContainer.toFront();\r\n\t\t\t\t// left\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"left\";\r\n\t\t\t\t\tlabelAlign = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\t// bottom\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"right\";\r\n\t\t\t\t\tlabelValign = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// non oposite (right/top)\r\n\t\t\telse {\r\n\t\t\t\tthis.labelsContainer.toBack();\r\n\t\t\t\t// right\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 0;\r\n\t\t\t\t\tlabelAlign = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\t// top\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelValign = \"top\";\r\n\t\t\t\t\tthis.ticks.template.locationY = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlabelTemplate.align = labelAlign;\r\n\t\tlabelTemplate.valign = labelValign;\r\n\r\n\t\tthis.validateLayout();\r\n\t\tthis.ticks.each((tick) => {\r\n\t\t\ttick.invalidate();\r\n\t\t})\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels on opposite side?\r\n\t */\r\n\tpublic get labelsOpposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"labelsOpposite\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.value > 0) {\r\n\t\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.absoluteSum;\r\n\r\n\t\tif (sum == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tif (sliceHeight > 0) {\r\n\t\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsliceBottomWidth = sliceTopWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t\tthis.align = \"center\";\r\n\t\tthis.valign = \"middle\";\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tlet y: number;\r\n\t\tlet x: number;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tif (this.valign == \"bottom\") {\r\n\t\t\t\ty = (maxHeight - newHeight);\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"middle\") {\r\n\t\t\t\ty = (maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"top\") {\r\n\t\t\t\ty = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.align == \"left\") {\r\n\t\t\t\tx = -(maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"center\") {\r\n\t\t\t\tx = 0;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"right\") {\r\n\t\t\t\tx = (maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tthis.slicesContainer.dx = x;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.valign == \"bottom\") {\r\n\t\t\t\ty = (maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"middle\") {\r\n\t\t\t\ty = 0;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"top\") {\r\n\t\t\t\ty = -(maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.align == \"left\") {\r\n\t\t\t\tx = 0;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"center\") {\r\n\t\t\t\tx = (maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"right\") {\r\n\t\t\t\tx = (maxWidth - newWidth);\r\n\t\t\t}\r\n\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tthis.slicesContainer.dy = y;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.slicesContainer.x = x;\r\n\t\tthis.labelsContainer.x = x;\r\n\t\tthis.ticksContainer.x = x;\r\n\r\n\t\tthis.slicesContainer.y = y;\r\n\t\tthis.labelsContainer.y = y;\r\n\t\tthis.ticksContainer.y = y;\r\n\r\n\t\tif (newWidth > 0 && newHeight > 0) {\r\n\t\t\tthis.slicesContainer.mask = maskSprite;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\t\t\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.innerWidth / 2 + 1\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.innerHeight / 2 + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\th = Math.abs(h);\r\n\t\t\tpoints = [{ x: x, y: h }, { x: x + w, y: h / 2 }, { x: x, y: 0 }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n","/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines type of the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tcolumn = dataItem.column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $dom from \"../../core/utils/DOM\";\r\nimport { system } from \"../../core/System\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties {\r\n\r\n\t/**\r\n\t * Can be used to modify cursor position point dynamically using custom code.\r\n\t *\r\n\t * @since 4.9.35\r\n\t */\r\n\tcursorPoint: IPoint;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * non-modified down point\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * non-modified up point\r\n\t * @ignore\r\n\t */\r\n\tprotected _upPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n\t * make cursor execute all of the actions associated with cursor move,\r\n\t * including line redraws, tooltip updates, etc. Useful when underlying\r\n\t * chart data is dynamically being updated.\r\n\t *\r\n\t * @param point  Point to place cursor at\r\n\t * @param stick  Level of cursor stickiness to the place\r\n\t * @param force  Force cursor move\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\", force?: boolean): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point, force);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y || force) {\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tsystem.requestFrame();\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatch(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatch(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatch(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\tthis.updateSelection();\r\n\t\t}\r\n\t\t/*\r\n\t\telse {\r\n\t\t\t\r\n\t\t\tif(this._generalBehavior == \"select\"){\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}*/\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Initiate blur so that whatever focused element on the page is unselected\r\n\t\t$dom.blur();\r\n\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tthis._downPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * Child classes should override this as necessary.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tif (!this.downPoint || !this.fitsToBounds(this.downPoint)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tthis._upPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t */\r\n\tsnapToSeries?: XYSeries | XYSeries[];\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t */\r\n\thideSeriesTooltipsOnSelection?: boolean;\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t */\r\n\tmaxTooltipDistance?: number;\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t */\r\n\tsnapOnPan?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposers: IDisposer[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.snapOnPan = true;\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.visible = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\tthis.hideSeriesTooltipsOnSelection = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\t\t\tlet behavior = this.behavior;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t\tlet snapToSeries = this.snapToSeries;\r\n\t\tif ((snapToSeries && !this.downPoint)) {\r\n\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\tif (snapToSeries.isHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet allHidden = true;\r\n\t\t\t\t$array.each(snapToSeries, (s) => {\r\n\t\t\t\t\tif (!s.isHidden) {\r\n\t\t\t\t\t\tallHidden = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (allHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this._generalBehavior == \"select\") {\r\n\t\t\t\tthis.selection.parent = this.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handle action when cursor is released, which should perform an operation\r\n\t * based on its `behavior`, like zoom.\r\n\t * \r\n\t * @param  point  Release point\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint): void {\r\n\t\tif (this.hasMoved()) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tif (this._generalBehavior != \"pan\") {\r\n\t\t\t\t\tthis.getRanges();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\tthis.selection.hide(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.xRange = undefined;\r\n\t\t\t\tthis.yRange = undefined;\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the cursor has moved enough based on its `behavior`.\r\n\t * \r\n\t * @return Moved?\r\n\t */\r\n\tprivate hasMoved(): boolean {\r\n\t\tlet distance: number;\r\n\t\tif (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\r\n\t\t\tdistance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\r\n\t\t\tdistance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdistance = $math.getDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\treturn distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = startY - currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = 1 - $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * `\"zoomX\"` - zooms horizontally.\r\n\t * * `\"zoomY\"` - zooms vertically.\r\n\t * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n\t * * `\"selectX\"` - selects a range horizontally.\r\n\t * * `\"selectY\"` - selects a range vertically.\r\n\t * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n\t * * `\"panX\"` - moves (pans) current selection horizontally.\r\n\t * * `\"panY\"` - moves (pans) current selection vertically.\r\n\t * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n\t * * `\"none\"` - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n\t * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t * @param  value  hide tooltips?\r\n\t */\r\n\tpublic set hideSeriesTooltipsOnSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return hide tooltip?\r\n\t */\r\n\tpublic get hideSeriesTooltipsOnSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t * @param  value  Distance\r\n\t */\r\n\tpublic set maxTooltipDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"maxTooltipDistance\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance\r\n\t */\r\n\tpublic get maxTooltipDistance(): number {\r\n\t\treturn this.getPropertyValue(\"maxTooltipDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.preventShow = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.preventShow = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\t\tpoint.y = 1;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\t\tpoint.x = 1;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries)) {\r\n\t\t\t\tlet snapTo = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\r\n\t\t\t\tlet snapError = false;\r\n\t\t\t\t$array.each(snapTo, (snap, index) => {\r\n\t\t\t\t\tif ($type.isString(snap)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(snap)) {\r\n\t\t\t\t\t\t\tsnapTo[index] = this.map.getKey(snap);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\r\n\t\t\t\t\t\t\tsnapError = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (snapError) {\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconfig.snapToSeries = snapTo;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t *\r\n\t * @param {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries | XYSeries[]) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\r\n\t\t\tif (series instanceof XYSeries) {\r\n\t\t\t\tseries = [series];\r\n\t\t\t}\r\n\t\t\tif (this._snapToDisposers) {\r\n\t\t\t\t$array.each(this._snapToDisposers, (disposer) => {\r\n\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tthis._snapToDisposers = [];\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\t$array.each(series, (s) => {\r\n\t\t\t\t\tthis._snapToDisposers.push(s.events.on(\"tooltipshownat\", () => { this.handleSnap(s) }, undefined, false));\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries | XYSeries[] {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t * @return Snap on pan?\r\n\t */\r\n\tpublic get snapOnPan(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapOnPan\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param value Snap on pan?\r\n\t */\r\n\tpublic set snapOnPan(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapOnPan\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Snaps the zoom selection after chart is panned.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic handleSnap(series: XYSeries) {\r\n\t\tif (!this.downPoint) {\r\n\t\t\tlet x = series.getTooltipX() + series.xAxis.pixelX;\r\n\t\t\tlet y = series.getTooltipY() + series.yAxis.pixelY;\r\n\r\n\t\t\tlet xAxis = series.xAxis;\r\n\t\t\tlet yAxis = series.yAxis;\r\n\r\n\t\t\tif (xAxis) {\r\n\t\t\t\tif (xAxis.renderer.opposite) {\r\n\t\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = { x: x, y: y };\r\n\t\t\tthis.getPositions();\r\n\r\n\t\t\tlet xx = x;\r\n\t\t\tlet yy = y;\r\n\r\n\t\t\tx -= this.pixelWidth;\r\n\r\n\t\t\tif (yAxis) {\r\n\t\t\t\tif (yAxis.renderer.opposite) {\r\n\t\t\t\t\tx += this.pixelWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltip = series.tooltip;\r\n\t\t\tlet duration = tooltip.animationDuration;\r\n\t\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t//\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\t//\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\t\tthis.lineY.x = x;\r\n\t\t\tthis.lineX.y = y;\r\n\r\n\t\t\tif (!this.xAxis) {\r\n\t\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t\t}\r\n\t\t\tif (!this.yAxis) {\r\n\t\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.hide(0);\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, force?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n","import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = [\"id\"]\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(\"div\", {\n    id: _ctx.idName,\n    style: _normalizeStyle([_ctx.source == 'dashboard' ? 'height: 300px' : 'height: 400px;  position: inherit'])\n  }, null, 12, _hoisted_1))\n}","\r\n    import { Vue } from \"vue-class-component\";\r\n    import * as am4core from \"@amcharts/amcharts4/core\";\r\n    import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n    import am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n    import { Prop } from \"vue-property-decorator/lib/decorators/Prop\";\r\n\r\n    am4core.useTheme(am4themes_animated);\r\n\r\n    export default class BarChart extends Vue {\r\n\r\n        @Prop() public importedData: any[] | undefined;\r\n        @Prop() public xAxis: string | undefined;\r\n        @Prop() public yAxis: string | undefined;\r\n        @Prop() public xAxisTitle: string | undefined;\r\n        @Prop() public yAxisTitle: string | undefined;\r\n        @Prop() public idName: string | undefined;\r\n        @Prop() public chartName: string | undefined;\r\n        @Prop() public source: string | undefined;\r\n        \r\n        public chart: am4charts.XYChart = new am4charts.XYChart;\r\n\r\n        public mounted() {\r\n\r\n            if (this.source != \"dashboard\") am4core.disposeAllCharts();\r\n\r\n            let chart = am4core.create(this.idName, am4charts.XYChart);\r\n            if (this.importedData) chart.data = this.importedData;\r\n\r\n            let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n            categoryAxis.dataFields.category = this.xAxis;\r\n            if (this.xAxisTitle) categoryAxis.title.text = this.xAxisTitle;\r\n            categoryAxis.renderer.minGridDistance = 20;\r\n            if (this.source == \"dashboard\") categoryAxis.renderer.labels.template.fontSize = 14;\r\n            if(this.xAxisTitle == \"Assessment\" || this.xAxisTitle == \"Module\") categoryAxis.renderer.labels.template.rotation = 45;\r\n\r\n            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n            valueAxis.min = 0;\r\n            valueAxis.max = 100;\r\n            if (this.yAxisTitle) valueAxis.title.text = this.yAxisTitle;\r\n\r\n            let title = chart.titles.create();\r\n            if (this.chartName) title.text = this.chartName;\r\n\r\n            let series = chart.series.push(new am4charts.ColumnSeries());\r\n            series.columns.template.tooltipText = this.xAxisTitle + \": {categoryX}\\n\" \r\n                + this.yAxisTitle + \": {valueY}\";\r\n            series.columns.template.fill = am4core.color(\"#104547\");\r\n            series.dataFields.valueY = this.yAxis;\r\n            series.dataFields.categoryX = this.xAxis;\r\n\r\n            this.chart = chart;\r\n        }\r\n  \r\n        beforeDestroy() {\r\n            if (this.chart) {\r\n                this.chart.dispose();\r\n            }\r\n        }\r\n    } \r\n","import { render } from \"./BarChart.vue?vue&type=template&id=83e1e4bc&ts=true\"\nimport script from \"./BarChart.vue?vue&type=script&lang=ts\"\nexport * from \"./BarChart.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\katha\\\\dev\\\\fyp-angular\\\\cs3ip16\\\\vue-3-typescript\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["AssessmentDataService","getAll","http","get","id","getAssessmentsByModule","create","data","update","delete","AssessmentMarksDataService","getByAssessment","getByStudent","ModuleDataService","_super","_this","className","cs","InterfaceColorSet","layout","padding","margin","background","fillOpacity","cornerRadius","icon","Sprite","element","paper","add","path","$path","x","y","strokeWidth","pixelPerfect","stroke","getFor","strokeOpacity","align","valign","label","dispose","undefined","position","autoHideDelay","events","on","ev","_autoHideTimeout","setTimeout","hide","applyTheme","__extends","Object","Grip","this","getPropertyValue","value","setPropertyValue","horizontalCenter","verticalCenter","rotation","width","height","percent","Button","registry","DataItem","MutableValueDisposer","constructor","Chart","Error","template","Label","titles","ListTemplate","_disposers","push","ListDisposer","chartAndLegendContainer","createChild","Container","shouldClone","chartContainer","showOnInit","_legend","processTitle","updateReaderTitleReferences","role","defaultState","transitionDuration","applyInternalDefaults","$type","readerTitle","language","translate","fixLayout","draw","legend","toBack","toFront","isMeasured","event","title","newValue","parent","uidAttr","length","titleIds_1","$iter","iterator","uid","setSVGAttribute","join","removeSVGAttribute","setLegend","set","property","addDisposer","Disposer","reset","feedLegend","config","type","processConfig","source","copyFrom","clone","removeChildren","_dragGrip","grip_1","tooltipContainer","touch","interactionsEnabled","show","focusable","Component","defaultRules","relevant","ResponsiveBreakpoints","state","target","stateId","states","pixelPaddingLeft","properties","paddingLeft","pixelPaddingRight","paddingRight","pixelPaddingTop","paddingTop","pixelPaddingBottom","paddingBottom","tooltipX","tooltipY","applyOnClones","copyToLegendMarker","Bullet","dataItem","component","invalidate","disabled","LegendDataItem","_label","label_1","labels","addSprite","itemContainer","removeValue","color","setProperty","_valueLabel","valueLabel_1","valueLabels","_itemContainer","component_1","itemContainer_1","itemContainers","togglable","toggleDataItem","focusedItem","dataContext","readerControls","readerLabelledBy","sprite","isDisposed","visibilitychanged","readerChecked","visible","disableType","isActive","enableType","dataItems","remove","_marker","marker_1","markers","createMarker","clickable","cursorOverStyle","MouseCursorStyle","getInteraction","body","keyboard","isEnabled","dispatchImmediately","interfaceColors","marker","setStateOnChildren","propertyFields","fill","disabledColor","child","activeState","rectangle","RoundedRectangle","text","truncate","fullWords","valueLabel","textAlign","handleScrollbar","scrollable","updateMasks","_handleWheelReal","Legend","scrollbar","start","end","validateDataElements","validateDataElement","container","$utils","legendDataItem","tempMaxWidth","maxWidth","Percent","legendSettings","createLegendMarker","useDefaultMarker","childrenCreated","updateLegendValue","invalid","validate","__disabled","itemValueText","valueText","setState","maxLabelWidth","each","measuredWidth","pixelMarginLeft","pixelMarginRight","maxValueLabelWidth","maxMarkerWidth","maxAdjustedLabelWidth","trueMaxWidth","Math","min","afterDraw","measuredHeight","maxHeight","pixelWidth","contentHeight","thumb","handleThumbPosition","contentAlign","maxColumns","Scrollbar","orientation","endGrip","startGrip","marginLeft","_mouseWheelDisposer","handleWheel","shift","ds","delta","$math","dy","pixelY","maskRectangle","invalidatePosition","item","isHiding","isHidden","colorOrig","appeared","hidden","svgContainer","readerAlert","locale","name","values","SeriesDataItem","_bullets","Dictionary","DictionaryDisposer","bullets","clear","setValue","LegendSettings","Series","axisRanges","List","processAxisRange","minBulletDistance","mainContainer","mask","bulletsContainer","_shouldBeReady","virtualParent","tooltip","Tooltip","hiddenState","transitionEasing","$ease","createDataItem","options","setClassName","_chart","bullet","isTemplate","once","itemsFocusable","oldValue","eachBullet","getKey","validateDataItems","processValues","key","startIndex","i","getIndex","getActualWorkingValue","rangeChangeUpdate","working","simplifiedProcessing","count_1","sum_1","absoluteSum_1","low_1","high_1","open_1","close_1","previous_1","first_1","absoluteFirst_1","startIndex_1","endIndex","dataItem_1","$object","dataItem_2","abs","getFirstValue","getAbsoluteFirstValue","setCalculatedValue","prevValue","calculatePercent","dataItem_3","ksum","usePercentHack","zeroItem_1","dataItem_4","filters","axisRange","pixelX","children","_showBullets","updateTooltipBounds","topParent","w","h","rect","setBounds","bulletTemplate","shouldCreateBullet","disabledField","currentDataItem","setKey","readerText_1","itemReaderText","xField","yField","isDynamic","deepInvalidate","populateString","hoverable","itemWidth","itemHeight","positionBullet","dataRangeInvalid","invalidateProcessedData","_ignoreMinMax","invalidateDataItems","rangesContainer","contents","isRange","axis","xPosition","yPosition","processBullet","removeBullet","chart","invalidateRawData","readerText","_itemReaderText","tooltipText","tooltipHTML","_adapterO","apply","_itemReaderTextChanged","skipFocusThreshold","_legendDataItem","notRange","itemLabelText","labelText","e","modal","content","adapter","message","closable","open","console","log","applyFilters","filter","_heatRules","heatRule","dataField_1","dataField","seriesDataItem_1","property_1","minValue","maxValue","foundSprite","$array","sprites","clonedFrom","anySprite","anyChild","foundSprite_1","ruleTarget","max","propertyField","low","high","fieldValues","workingValue","logarithmic","LOG10E","Infinity","Color","$colors","rgb","heatRules","len","rule","map","hasKey","parts","split","listitem","maybeIndex","match","maybeColorOrPercent","a","b","configOrder","setVisibility","ChartDataItem","colors","ColorSet","_usesData","seriesContainer","zIndex","SerialChart","patterns","_series","createSeries","handleSeriesAdded","handleSeriesRemoved","series","dataUsers","dataUser","autoDispose","di","_dataUsers","moveValue","handleSeriesAdded2","handleLegendSeriesAdded","hiddenInLegend","addData","dataInvalid","reinit","_data","legendData_1","dataFields","appear","inited","breakSize","marginRight","marginTop","marginBottom","fillShape","WavedLine","_fillShape","startLine","_startLine","endLine","_endLine","_axis","AxisBreak","addBreakSprite","renderer","gridContainer","createBreakSprites","breakTemplate","axisBreaks","invalidateSeries","positionToPoint","startPosition","endPosition","updateBreakElement","AxisItemLocation","AxisDataItem","_grid","grid_1","grid","_tick","component_2","tick_1","tick","ticks","component_3","_axisFill","component_4","axisFill_1","axisFill","axisFills","_text","_mask","_contents","createFill","_axisBreak","axisBreak","appendDataItem","prop","hasProperty","minPosition","maxPosition","noChangeValues","_bullet","Axis","hideTooltipWhileZooming","minWidth","minHeight","toggleZoomOutButton","zoomable","_dataItemsIterator","createNewItems","pointerLength","fitPointerToBounds","readerHidden","preventShow","index","round","opacity","invalidateLayout","_axisItemCount","ghostLabel","updateLabelElement","gridCount","axisLength","minGridDistance","_gridCount","clearCache","axisFullLength","validateLayout","updateGridCount","updateAxisLine","updateTooltip","updateBaseGridElement","_prevLength","above","updateGridContainer","_axisBreaks","breakContainer","MultiDisposer","createMask","_renderer","initRenderer","ghostLabel_1","positionToAngle","point","pointToPosition","positionToCoordinate","getPositionRangePath","angle","duration","hideTooltip","_tooltipPosition","local","_tooltip","toAxisPosition","tooltipLocation","getCellStartPosition","getCellEndPosition","tooltipPosition","tooltipLocation2","startPoint","endPoint","currentItemStartPoint","currentItemEndPoint","fullWidthTooltip","globalPoint","line","getTooltipText","delayedPointTo","cursorTooltipEnabled","inversed","pointerOrientation","boundingRectangle","fixDoc","location","axisLocation","_axisRanges","SortedListTemplate","createAxisBreak","$number","adjustedStartValue","processBreak","axisLetter","dataItemsIterator","findNearest","stackKey","range","difference","startValue","endValue","adjustedEndValue","intersection","firstAxisBreak","first","previousEndValue_1","createSeriesRange","changed","setDisabled","_title","AxisLine","AxisFill","fillPath","measure","attr","Grid","AxisLabel","nonScalingStroke","Tick","AxisTick","inside","cellStartLocation","cellEndLocation","minLabelPosition","maxLabelPosition","invalidateAxisItems","baseGrid","disposers","AxisRenderer","setAxis","bind","moveTo","position2","coordinate","pixelHeight","coordinate2","positionItem","toggleVisibility","updatedStart","updatedEnd","_axisFills","createGrid","_ticks","createTick","_labels","createLabel","AxisBullet","opposite","AxisRendererY","inversedPosition","relativePositionSprite","relativeY","innerHeight","relativeHeight","processRenderer","bigNum","bbx","bby","bbw","bbh","coordinateToPosition","y1","y2","getWidth","tickLength","basePoint","deltaX","x1","x2","wavedRectangle","WavedRectangle","setWavedSides","ValueAxisBreak","valueToPosition","ValueAxisDataItem","axisFieldName","Number","MAX_VALUE","keepSelection","includeRangesInMinMax","ValueAxis","step","_start","_end","_maxZoomed","_maxDefined","_minZoomed","_minDefined","_maxAdjusted","_minAdjusted","calculateTotals","total","sum","this_1","excludeFromTotal","getMinMax","fixAxisBreaks","calculateZoom","validateAxisElements","validateAxisRanges","validateBreaks","hideUnusedDataItems","positionToValue","differece","adjustDifference","minMaxStep","adjustMinMax","stepDecimalPlaces","_stepDecimalPlaces","syncWithAxis","calculated","getCache","_step","_dsc","fixSmallStep","value_1","minZoomed","differencePower","pow","floor","maxZoomed","resetIterators","dataItemsIterator_1","precisionChanged","_prevStepDecimalPlaces","isInBreak","find","formatLabel","currentText","stepPower","decCount","renderer_1","breakValue_1","adjustedMin","adjustedMax","adjustedStep","itemIndex","fillEndPosition","updateTickElement","updateGridElement","updateFillElement","fillRule","updateBullet","adjustLabelPrecision","numberFormatter","format","baseValue","_baseValue","valueToPoint","min_1","max_1","_difference","treatZeroAs","invalidateLabels","difference_1","value_2","breakStartPosition","breakEndPosition","breakStartValue","breakEndValue","breakPosition","E","animate","from","to","rangeChangeDuration","rangeChangeEasing","POSITIVE_INFINITY","NEGATIVE_INFINITY","ignoreMinMax","seriesMin","seriesMax","raiseCriticalError","_minReal","_maxReal","dif","fixMin","fixMax","_deltaMinMax","exponent","power","extraMin","extraMax","strict","strictMinMax","animation","_minMaxAnimation","_extremesChanged","isFinished","_finalMax","_finalMin","animateMinMax","handleSelectionExtremesChange","_saveMinMax","strictMode","initialMin","initialMax","extra","ceil","stepDivisor","maxPrecision","minCount","maxCount","registerSeries","handleExtremesChange","selectionMin","selectionMax","allHidden","outOfRange","seriesSelectionMin","seriesSelectionMax","minMaxStep2","syncAxes","declination","setCache","zoom","mw_1","getPositionX","getWorkingValue","stack","getValue","getPositionY","extraTooltipPrecision","valueStr","skipRangeEvent","instantly","axisBreakDif","axisBreakGridCount","breakMinMaxStep","showTooltipAtPosition","count","currentCount","synced","c","diff","omin","omax","ostep","checkSync","processingErrors","xAxis","_min","_max","DateAxisBreak","getTime","date","endDate","DateAxisDataItem","dates","setDate","timeUnit","snapTooltip","groupCount","getDFFormatter","gridIntervals","pushAll","groupIntervals","DateAxis","gridInterval","_gridInterval","gridDuration","$time","dateFormats","periodChangeDateFormats","baseDuration","periodCount","_firstWeekDay","getFirstWeekDay","mainBaseDuration","mainBaseInterval","maxZoomFactor","newPeriodCount","interval","_intervalMax","_intervalMin","dataSetChanged","groupData","getIntervalMin","getIntervalMax","modifiedDifference","startLocation","endLocation","groupInterval","chooseInterval","_groupInterval","newId","_currentDataSetId","dispatch","baseAxis","setDataSet","baseInterval","_nextGridUnit","_intervalDuration","_gridDate","Date","_df","utc","timezoneMinutes","timezone","field_1","getAxisField","minZoomedStr","toString","startDataItem","dataItemsByAxis","currentDataSetId","findFirst","findClosestIndex","maxZoomedStr","endDataItem","validateDataRange","time","previousDataItem","previousDate","validateData","minDifference","_minDifference","seriesGroupUpdate","addEmptyUnitsBreaks","JSON","stringify","_baseInterval","mainDataSet","postProcessSeriesDataItem","groupSeriesData","dataGrouped","intervals_1","mainIntervalDuration_1","intervalDuration","_dataSets","dataSetId","dataSet","OrderedListTemplate","dataSets","newDataItem","roundedDate","previousTime","dfkey","df","dfk","indexOf","getDate","firstDayOfWeek","currentTime","vkey","setWorkingLocation","locations","dateX","openDateX","dateY","openDateY","_index","dvalues","close","average","fieldValue","f","hasProperties","groupDataItems","groupFieldName","groupFields","dateFormatter","intervalID","startDate","startTime","skipEmptyPeriods","startTimeStr","hasData","_gapBreaks","breakGridCount","gridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","durationBreaksRemoved","countBreaksRemoved","getGridDate","getBreaklessDate","prevGridDate","this_2","markUnitChange","timeUnit_1","intervalCount_1","prevGridDate_1","timestamp_1","text_1","endTimestamp","location_1","endTime","intervals","lastIndex","dateToPosition","dateToPoint","getTimeByLocation","workingLocations","timezoneOffset","setTime","getTimezoneOffset","openTime","openDate","prevSeriesTime","_prevSeriesTime","updateAxisBySeries","_baseIntervalReal","_mainBaseInterval","timeInterval","postProcessSeriesDataItems","invalidateData","positionToDate","tooltipDate","tooltipDateFormat","dateFormat","getPositionLabel","roundPosition","deltaValue","nextDate","key_1","getCurrentLabelFormat","groupMin","groupMax","adjust","parse","zoomToValues","isEnd","isStart","groupInterval_1","mindi","maxdi","yAxis","field","asIs","closestDate_1","actualDate","actualTime_1","getSeriesDataItem","closestTime_1","cursor","snapToSeries","showTooltipAtDataItem","_seriesPoints","previous","connect","autoGapCount","prevDate","prevTime","AxisRendererX","deltaY","getHeight","pixelMarginTop","pixelMarginBottom","relativeX","innerWidth","relativeWidth","CategoryAxisBreak","indexToPosition","category","categoryToIndex","endCategory","deltaPosition","CategoryAxisDataItem","oldCategory","deltaCoordinate","_lastDataItem","dataItemsByCategory","removeKey","CategoryAxis","processSeriesDataItem","categoryAxisDataItem","seriesId","seriesDataItems","invalidateDataRange","positionToIndex","minIndex","maxIndex","axisDataItem","i_1","seriesDataItem","dataCount","MAX_SAFE_INTEGER","frequency","_startIndex","_endIndex","_frequency","frequency_1","itemIndex_1","fillEndIndex","fillPosition","html","disposeData","processDataItem","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","startCategory","zoomToIndexes","startPos","endPos","categoryX","categoryY","index_1","sdi_1","category_1","categories","tooltipDataItem","sortBySeries","addDelayedMap","customValue","valueX","valueY","openValueX","openValueY","setLocation","XYSeriesDataItem","setCategory","openCategoryX","openCategoryY","fields","stackValue","cursorHoverEnabled","setElement","stacked","stackToNegative","returnBulletDefaultState","_xAxis","_yAxis","observe","visualProperties","_propertiesChanged","XYSeries","_tmin","_tmax","_smin","_smax","resetExtremes","seriesDataChangeUpdate","valueYShow","openValueXShow","openValueYShow","usesShowFields","defineFields","dataChangeUpdate","updateItemReaderText","_xField","_yField","setInitialWorkingValues","updateDataItem","dataItemsX","clearCatAxis","dataItemsY","xAxisFieldName","xOpenField","yAxisFieldName","yOpenField","_xOpenField","_yOpenField","_xValueFields","_yValueFields","addValueField","path_1","getMaskPath","_maxxX","plotContainer","_maxxY","maskBullets","leftAxesContainer","rightAxesContainer","topAxesContainer","bottomAxesContainer","xAxes","setXAxis","oldAxis","yAxes","setYAxis","XYChart","handleYAxisSet","_baseAxis","rawDataItem","removeCount","skipRaw","scrollbarSeries","_parseDataFrom","setData","_dataSetChanged","_prevStartIndex","_prevEndIndex","minX","maxX","minY","maxY","workingStartIndex","workingEndIndex","getStackValue","stackX","stackY","getMin","getMax","processSeriesDataItems","xAxisId","yAxisId","stackedSeries","tmin","isShowing","tmax","_prevTooltipDataItem","bulletLocationX","bulletLocationY","hideSeriesTooltipsOnSelection","selection","downPoint","tooltipXField","tooltipYField","tooltipPoint","getPoint","getAdjustedXLocation","getAdjustedYLocation","interactions","isRealHover","isHover","showTooltip","fireEvent","hasValue","getBulletLocationX","getBulletLocationY","positionX","positionY","openValue","closeValue","middleValue","rightLocation","locationX","leftLocation","openPositionX","topLocation","locationY","bottomLocation","openPositionY","positionBulletReal","bulletLocation","updateStacking","anim","delay","interpolationDuration","realDuration","sequencedInterpolation","sequencedInterpolationDelay","disable","enable","handleDataItemWorkingValueChange","axisSeries","field_2","backwards","prevSeries","prevDataItem","prevStack","prevRealValue","_tooltipXField","_tooltipYField","xKey","yKey","stackKeyX","stackKeyY","getX","getY","val","axisBulletsContainer","scrollbarChart","_scrollbarChart","DesaturateFilter","filterUnits","unselectedOverlay","_unselectedOverlay","thumbBackground","hoverState","downState","XYChartScrollbar","sourceSeries","zoomOutButton","inputDateFormat","addXAxis","addYAxis","labelsTemplate","maxZoomCount","minZoomCount","vAxis_1","sourceAxis","minDefined","maxDefined","vAxis_2","vAxis_3","vAxis_4","zoomOutAxes","updateByOrientation","off","err","handleDataChanged","dataProvider","dispatchEvents","updateThumb","SerialChartDataItem","arrangeTooltips","topAxesCont","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","leftAxesCont","updateXAxesMargins","plotCont","mouseWheelBehavior","_cursorContainer","rightAxesCont","ZoomOutButton","_bulletMask","exportable","updateSeriesLegend","leftAxesWidth","rightAxesWidth","updateXAxis","updateYAxis","_axisRendererX","handleXAxisChange","handleXAxisRangeChange","processAxis","_axisRendererY","handleYAxisChange","handleYAxisRangeChange","getCommonAxisRange","scrollbarX","zoomAxes","updateScrollbar","show_1","minZoomFactor","seriesAppeared","scrollbarY","skipRangeEvents","axes","axisStart","axisEnd","updateSeriesMasks","_xAxes","processXAxis","handleAxisRemoval","_yAxes","processYAxis","next","backgroundOpacity","_cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","tapToActivate","setTapToActivate","xPosition_1","yPosition_1","showSeriesTooltip","exceptAxes_1","dataItems_1","snpSeries","closestDataItem_1","getClosest","closestSeries","handleSnap","_cursorXPosition","showAxisTooltip","_cursorYPosition","sortSeriesTooltips","closestDataItem","minDistance","xPos","toGlobalPosition","yPos","dxPosition","dyPosition","distance","sqrt","hideObjectTooltip","seriesPoints","cursor_1","maxTooltipDistance","nearestSeries_1","nearestPoint_1","cursorPoint_1","smallestDistance_1","seriesPoint","fixedPoint","newSeriesPoints_1","handleOutReal","np","topLeft_1","bottomRight_1","filteredSeriesPoints_1","firstSeries","sort","reverse","averageY","SVGContainer","top_1","bottom","dropped","nextHeight","pointY","nextY","except","behavior","xRange","getUpdatedRange","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","panEndRange","panStartRange","snapOnPan","_panEndYRange","maxPanOut","newStart","newEnd","newRange","_scrollbarX","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","stop","realRange","originalRange","cellWidth","d","svgPoint","htmlContainer","cssScale","plotPoint","handleWheelReal","horizontalMouseWheelBehavior","rangeX","rangeY","shiftStep","singleItemStep","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","location2X","location2Y","wheelable","_mouseWheelDisposer2","handleHorizontalWheel","dataSourceDateFields","populateDataSourceFields","len_1","len_2","_zoomOutButton","button","addScrollbarData","removeScrollbarData","removeData","isTouchProtected","handleTapToActivate","handleTapToActivateDeactivation","sbstate","fillSprite","strokeSprite","LineSeriesSegment","points","closePoints","smoothnessX","smoothnessY","smoothing","$smoothing","smooth","closed","lineElement","fillElement","DurationAxis","durationFormatter","axisDurationFormat","baseUnit","divisors","realDivisor","divisor","reducedCount","closest","getValueUnit","getFormat","_tooltipDurationFormat","tooltipDurationFormat","_baseUnit","DurationAxisDataItem","segments","createSegment","_segmentsIterator","tensionX","tensionY","segmentsContainer","LineSeries","LineSeriesDataItem","initialY","setWorkingValue","initialX","segment","tooltipColorSource","openSegmentWrapper","_adjustedStartIndex","findAdjustedIndex","_workingStartIndex","_workingEndIndex","adjustedIndex","openIndex","params","openSegment","getFirst","getSegment","addToClose","closeIndex","propertiesChanged","strokeDasharray","group","node","removeAttribute","valuesFound","updateSegmentProperties","addPoints","makeGap","closeSegment","drawSegment","itemProperties","checkOnly","propertyName","currentValue","currentValueStr","disposeChildren","Line","Rectangle","hasLabels","connectEnds","RadarSeries","RadarSeriesDataItem","radius","getAngle","startAngle","endAngle","pixelRadius","pixelInnerRadius","unshift","updateRendererRefs","rendererX","rendererY","axisRendererY","AxisFillCircular","innerRadius","setPercentProperty","GridCircular","locationOnPath","AxisLabelCircular","fdx","fdy","textPathElement","axisRadius","sign","axisRadiusY","dx","isNegative","realRadius","relativeRotation","labelRadius","bent","point_1","bbox","dH","dW","_measuredHeight","_measuredWidth","useChartAngles","AxisRendererCircular","cos","atan2","sin","PI","pixelRadiusReal","mr","innerRadiusModifyer","arc","gridInnerRadius","fixPosition","gridType","axisAngle","AxisRendererRadial","gridLocation","WavedCircle","tooltipOrientation","XYChartDataItem","radarContainer","Circle","RadarChart","beforeDraw","innerRect","wr","hr","maxRadius","diameter","_pixelInnerRadius","definedBBox","validatePosition","pin","startWidth","endWidth","hand","Trapezoid","ClockHand","leftSide","rightSide","x0","_pin","_hand","easing","_value","newAngle","anyToPosition","currentAngle","rotationDirection","angleToPosition","showValue","updateValue","RadarChartDataItem","hands","processHand","GaugeChart","PercentSeriesDataItem","slice","toValue","ticksContainer","labelsContainer","_slice","slice_1","slices","slicesContainer","_addAllDataItems","alignLabels","PercentSeries","_slices","createSlice","initSlice","initTick","initLabel","currentStep","lh","nextLabel","getNextLabel","nextLabelHeight","nextLabelY","previousTop","nextDataItem","setAlignLabels","labelState","tickState","PercentChart","percentSeriesDataItem","PercentChartDataItem","PieTick","ix","scale","y0","iy","radiusY","r","radiusValue","PieSeriesDataItem","PieSeries","Slice","handleSliceScale","handleSliceMove","shiftRadius","lastHitPointer","_leftItems","_rightItems","_currentStartAngle","_arcRect","_maxRadiusPercent","radiusValuePercent","aAngle","middleAngle","bAngle","arrangeLabels","arrangeLabels2","ignoreZeroValues","normalizedMiddleAngle","arcRect","depth","_pixelRadius","_startAngleInternal","_endAngleInternal","updateRadius","PieChart","_chartPixelRadius","updateSeriesAngles","chartCont","chartRadius","chartPixelInnerRadius","seriesRadius","_chartPixelInnerRadius","PieChartDataItem","depthValue","PieSeries3DDataItem","PieSeries3D","Slice3D","depthPercent","PieChart3D","invalidateDataUsers","SlicedChart","SlicedChartDataItem","draggable","inert","invalidateLinks","FlowDiagramNode","outgoingDataItems","toNode","link","incomingDataItems","fromNode","colorMode","gradient","stop_1","stops","stop_2","_incomingDataItems","sortBy","_incomingSorted","fromName","_outgoingDataItems","_outgoingSorted","setColorProperty","_background","column","FlowDiagramLink","_bulletsContainer","_bulletsMask","bulletsMask","middleLine","rotationField","addColor","setFill","_gradient","Polyline","LinearGradient","FlowDiagramDataItem","toName","toColor","_link","link_1","links","nodePadding","minNodeSize","linksContainer","nodesContainer","FlowDiagram","nodes","sortNodes","strokeModifier","LinearGradientModifier","opacities","fillModifier","strNode","getNodeValue","_sorted","sortedIterator","incomingTotal","outgoingTotal","totalIncoming","totalOutgoing","changeSorting","_nodes","createNode","handleHit","DictionaryTemplate","_links","createLink","hideOversized","handleMaxSize","LabelBullet","nameLabel","SankeyNode","nextInCoord","nextOutCoord","orientation_1","endX","endY","linkWidth","valueHeight","startX","startY","tension","controlPointDistance","Polyspline","SankeyLink","_a","_b","makeBackwards","_c","_d","xt0","yt0","xt1","yt1","xb0","xb1","yb0","yb1","xm0","xm1","ym0","ym1","_bbox","cpd","kxt0","kyt0","kxt1","kyt1","kxm0","kym0","kxm1","kym1","kxb0","kyb0","kxb1","kyb1","positionBullets","nodeAlign","SankeyDiagram","_valueHeight","_levelCount","level","getNodeLevel","levels","_counter","checkLoop","_levelSum","_levelNodesCount","maxSum","availableHeight","maxSumLevel","realValue","levelNodeCount","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","Animation","interpolationEasing","calculateValueHeight","nextCoordinate","levelCoordinate","nodeCount","container_1","showReal","nodeHeight","SankeyDiagramDataItem","updateRotation","ChordNode","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","nonRibbon","percentWidth","valueAngle","mAngle","trueStartAngle","tx","ty","QuadraticCurve","cpx","cpy","p1","p2","cp","point1","point2","ChordLink","fromX","fromY","toX","toY","mAngle1","mAngle2","chordContainer","ChordDiagram","newTotal","ChordDiagramDataItem","createAssets","handleKidAdded","Column","ColumnSeriesDataItem","_column","setColumn","columns","_rangesColumns","clustered","columnsContainer","_columnsContainer","ColumnSeries","prevAxisIndex_1","baseAxisSeries","clusterCount_1","sortedByAxis_1","index_2","sortedItem","_startLocation","_endLocation","sortCategoryAxis","disableUnusedColumns","currentPosition","getSeriesDataItemByCategory","deltaAnimation","validateDataElementReal","l","t","getStartLocation","getEndLocation","percentHeight","outOfBounds","diw","dih","offset","fixHorizontalCoordinate","fixVerticalCoordinate","axisLenght","column_1","realX","realY","realWidth","realHeight","setColumnStates","rangeColumn","rangesColumns","_dropFromOpenState","_dropFromPreviousState","_riseFromOpenState","_riseFromPreviousState","change","droppedFromOpen","droppedFromPrevious","_columns","createColumnTemplate","fromOpenState_1","fromPreviousState_1","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","configField","TreeMapSeries","hideReal","hasChildren","TreeMapDataItem","childValue","squarify","maxLevels","currentLevel","hideParentColumns","sorting","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","TreeMap","_navigationBar","navigationBar","createTreeSeries","_tempSeries","homeDataItem","_homeText","layoutItems","_updateDataItemIndexes","layoutAlgorithm","navigationData","parentDataItem","initSeries","createTreeSeriesReal","currentlyZoomed","zoomToSeriesDataItem","rangeChangeAnimation","toggleBullets","_dataDisposers","binaryTree","dice","sliceDice","validateRawData","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","newRatio","minRatio","alpha","beta","ratio","i0","i1","row","getLegendLevel","legendParent","exporting","getExporting","info","AxisRendererX3D","dx3D","dy3D","handle3DChanged","AxisRendererY3D","Column3D","column3D","Rectangle3D","ColumnSeries3D","ColumnSeries3DDataItem","XYChart3D","fixColumns","depthIndex","s","inversed_1","maskColumns","markerContainer","markerCount","HeatLegend","minValue_1","maxValue_1","valueAxis","reverseOrder","minColor","maxColor","getMinFromRules","getMaxFromRules","seriesFill","minOpacity","maxOpacity","minStrokeOpacity","maxStrokeOpacity","minStroke","maxStroke","strokeGradient","color_1","opacity_1","_valueAxis","dataFieldDefined","updateMinMax","seriesId_1","disposer_1","Candlestick","lowLine","highLine","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeriesDataItem","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","CandlestickSeries","validateCandlestick","lowLine_1","highLine_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC","openLine","highLowLine","closeLine","OHLCSeries","OHLCSeriesDataItem","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesSegment","noRisers","vertical","StepLineSeries","StepLineSeriesDataItem","startLocationX","endLocationX","startLocationY","endLocationY","prevPoint","point0","RadarColumn","radarColumn","getTooltipX","getTooltipY","RadarColumnSeries","lAngle","rAngle","tRadius","bRadius","cellAngle","temp","RadarColumnSeriesDataItem","bottomWidth","topWidth","expandDistance","FunnelSlice","pt","pb","pr","pl","ed","tw","bw","tl","tr","br","bl","cpr","cpl","qp1","qp2","tickPoint","tt","tb","bt","bb","mlx","mrx","mty","mby","FunnelTick","p0","labelsOpposite","maxRight","maxBottom","FunnelSeriesDataItem","_sliceLink","sliceLink_1","sliceLinks","bottomRatio","FunnelSeries","_nextY","labelTemplate","dItem","_total","_count","nextValue","nextItem","getNextValue","sliceLink","decorateSlice","linkHeight","lastLabel","getLastLabel","lastY","lastX","_sliceLinks","labelAlign","labelValign","pyramidHeight","valueIs","PyramidSeries","PyramidSeriesDataItem","_nextWidth","relValue","_pyramidHeight","_pyramidWidth","absoluteSum","pyramidWidth","sliceTopWidth","tan","sliceHeight","sliceBottomWidth","totalSquare","square","sliceWidth","_maskSprite","PictorialStackedSeries","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","PictorialStackedSeriesDataItem","hs","ConeColumn","coneColumn","Cone","ConeSeries","ConeSeriesDataItem","CurvedColumn","curvedColumn","CurvedColumnSeries","CurvedColumnSeriesDataItem","circle","CircleBullet","errorLine","ErrorBullet","NavigationBarDataItem","textLink","TextLink","_linksIterator","triangle","Triangle","direction","separators","activeLink","fontWeight","NavigationBar","getLast","separator","trackable","interaction","handleCursorDown","handleCursorUp","handleCursorMove","Cursor","_generalBehavior","isLocalElement","pointer","svg","_stick","_stickPoint","fitsToBounds","triggerMove","stick","force","triggerMoveReal","getPositions","triggerDownReal","setGlobalStyle","triggerUpReal","system","updatePoint","upPoint","_upPointOrig","_downPointOrig","getHitOption","updateSelection","$dom","cancelable","shouldPreventGestures","preventDefault","triggerDown","triggerUp","lockElement","lineX","lineY","updateSize","_lineX","_lineY","XYCursor","_usesSelection","_positionPrecision","updateLinePositions","allHidden_1","getPanningRanges","fixPoint","selectionX","selectionY","hasMoved","getRanges","currentX","currentY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","fullWidthLineY","_selection","snapTo_1","snapError_1","snap","_snapToDisposers","disposer","xx","yy","animationDuration","animationEasing","RadarCursor","truePixelRadius","updateLineX","updateLineY","fillStartAngle","fillEndAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","upAngle","upRadius","_hoisted_1","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createElementBlock","idName","style","_normalizeStyle","am4core","am4themes_animated","BarChart","Vue","am4charts","mounted","importedData","categoryAxis","xAxisTitle","fontSize","yAxisTitle","chartName","beforeDestroy","__decorate","Prop","__exports__"],"sourceRoot":""}